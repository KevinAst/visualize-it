{"version":3,"sources":["util/ErrorExtensionPolyfill.js","util/verify.js","util/typeCheck.js","util/checkUnknownArgs.js","core/pkgManager.js","core/PseudoClass.js","core/DispMode.js","core/SmartModel.js","core/SmartScene.js","util/notify.js","core/Scene.js","core/konvaUtil.js","core/Collage.js","util/logger.js","core/SmartClassRef.js","core/SmartPkg.js","core/SmartView.js","core/preregisterCoreClasses.js","featureFlags.js","core/SmartComp.js","features/sandbox/konvaSandbox/generalComps.js","features/sandbox/konvaSandbox/konvaSandboxSmartPkg.js","features/sandbox/feature.js","util/encoder.js","features/common/initFirebase/initializeFirebase.js","features/common/initFirebase/feature.js","features/common/baseUI/actions.js","features/common/baseUI/featureName.js","util/noOp.js","util/deviceStorage.js","features/common/baseUI/uiThemeStorage.js","features/common/baseUI/responsiveModeStorage.js","features/common/baseUI/state.js","util/reduxFnRef.js","features/common/baseUI/logic.js","features/common/baseUI/comp/LeftNavMenuPallet.js","util/genDualClickHandler.js","features/common/baseUI/LeftNavManager.js","features/common/baseUI/comp/LeftNav.js","features/common/baseUI/comp/UserMenu.js","core/pkgPersist.js","util/discloseError.js","features/common/baseUI/comp/FileMenu.js","features/toolBar/actions.js","features/toolBar/featureName.js","features/toolBar/state.js","features/toolBar/comp/VitToolBar.js","features/common/baseUI/comp/AppMotif.js","util/Transition.js","util/SplashScreen.js","util/responsiveBreakpoints.js","features/common/baseUI/comp/MainLayout.js","features/common/baseUI/comp/UserMenuItem.js","features/common/baseUI/comp/ToggleUITheme.js","features/common/baseUI/comp/MaintainResponsiveMode.js","features/common/baseUI/comp/About.js","features/common/baseUI/feature.js","features/common/tabManager/actions.js","features/common/tabManager/featureName.js","features/common/tabManager/state.js","features/common/tabManager/TabController.js","features/common/tabManager/tabManager.js","features/common/tabManager/logic.js","features/common/tabManager/comp/TabManager.js","util/CenterItems.js","features/common/tabManager/comp/StartUpPage.js","features/common/tabManager/route.js","features/common/tabManager/feature.js","features/toolBar/logic.js","features/toolBar/feature.js","features/common/diagnostic/logActions/logic.js","features/common/diagnostic/logActions/featureName.js","features/common/diagnostic/logActions/feature.js","features/common/pwa/serviceWorker.js","features/common/pwa/feature.js","features/common/baseUI/comp/LeftNavCollapsibleItem.js","util/ReactSmartView.js","features/common/tabManager/TabControllerScene.js","features/common/tabManager/TabControllerCollage.js","features/common/tabManager/TabControllerClass.js","features/index.js","aspects/index.js","app.js","index.js"],"names":["Error","prototype","defineUserMsg","userMsg","this","expected","isExpected","isUnexpected","defineAttemptingToMsg","attemptingToMsg","formatUserMsg","prior_toString","toString","call","verify","condition","msg","prefix","msgPrefix","isClass","isFunction","isNumber","val","checkUnknownArgs","check","unknownNamedArgs","args","unknownArgKeys","Object","keys","length","PkgManager","pkgCatalog","smartPkg","constructor","unmangledName","getPkgName","pkgName","isString","className","classRef","getClassRef","entryId","getEntry","pkgManager","PseudoClass","id","name","unknownArgs","arguments","isType","ref","pseudoClass","clazz","isPseudoClassMaster","DispMode","Enumify","view","edit","animate","_","closeEnum","SmartModel","diagClassName","dispMode","parent","getParent","getPackage","undefined","canHandleDispMode","enableViewMode","enableEditMode","enableAnimateMode","myJSON","smartType","getClassName","getClassPkgName","getEncodingProps","forEach","propName","encodeRef","Array","isArray","map","item","isObject","toSmartJSON","isPlainObject","entries","reduce","accum","subRefName","subRef","isInstance","pseudoClassMaster","pseudoClassRef","smartClassRef","realClassRef","overridingNamedProps","encodingProps","clonedProps","instanceName","instanceValue","clonedValue","smartClone","key","value","namedProps","clonedCopy","smartJSON","extraClassResolver","fromSmartJSON","err","console","log","JSON","stringify","getClassRefFromSmartJSON","createSmartObject","subName","SmartScene","containingKonvaStage","containingHtmlElm","size","draggable","Notify","props","classes","useStyles","maxSnack","dense","variantSuccess","NotifyAPI_withSnackBar","children","makeStyles","theme","whiteSpace","variantInfo","variantWarning","variantError","_singleton","NotifyAPI","duration","level","position","modal","actions","levelVariant","anchorOrigin","action","indx","txt","autoHideDuration","actionsCbMap","identityFn","actionButtons","Button","color","snackbarKey","enqueueSnackbar","variant","onClick","e","closeSnackbar","clientAction","target","textContent","setTimeout","Fragment","React","Component","success","info","warn","error","vertical","horizontal","p","withSnackbar","notify","directive","display","toastBase","funcQual","toast","alertBase","alert","confirmBase","confirm","displayName","Scene","comps","x","y","_size","width","height","Number","isInteger","comp","setParent","konvaSceneLayer","getChildren","each","konvaComp","n","off","find","destroy","draw","pkg","canPersist","on","ancestorOfLayer","node","parentNode","transformer","Konva","Transformer","add","attachTo","rotation","scaleX","scaleY","getName","getPkgDesc","method","Layer","mount","checkMounted","Collage","scenes","scene","newSize","style","sceneSize","Math","max","createLogger","_enabled","logger","obj","force","isEnabled","enable","disable","SmartClassRef","realClass","hasOwnProperty","pseudoClassContainer","namedParams","newObj","msgQualifier","getFullClassName","SmartPkg","initializeCatalogs","adornContainedClasses","pkgResourcePath","entriesContainCode","entry","_classRefCatalog","_entryCatalog","dirName","dirContent","errMsg","arrItem","smartObj","values","pseudoClassMasters","pkgNameBeingResolved","resolvePseudoClassMasters","jsonEntry","resolvedObj","newVal","i","SmartView","konvaStage","Stage","container","registerPkg","core","SmartComp","containingKonvaLayer","compGroup","Group","Valve1","shape1","Rect","fill","stroke","strokeWidth","connector1","Circle","radius","connector2","subGroup","subCircle","Valve2","shape","shadowBlur","cornerRadius","Valve3","generalCompsPkg","scene1","scene2","scene1Copy","scene2Copy","collage1","konvaSandboxSmartPkg","collages","savedId","savedName","str","rehydratedSmartPkg","createFeature","enabled","featureFlags","appInit","showStatus","fassets","getState","dispatch","leftNavManager","addLeftNav","encode","safeguard","encoding","demarkObjEncoding","demarkSafeguard","window","btoa","obfuscate","decode","result","indexOf","atob","deobfuscate","substring","parse","a","fetch","resp","ok","status","text","includes","firebaseAppConfig","firebase","initializeApp","generateActions","root","toggleUITheme","actionMeta","setResponsiveMode","traits","changeView","addLeftNavItem","removeLeftNavItem","noOp","storeItem","deviceStorage","setItem","fetchItem","getItem","_localStorageAvailable","type","storage","removeItem","DOMException","code","storageAvailable","keyName","keyValue","localStorage","uiThemeKey","responsiveModeKey","reducer","slicedReducer","expandWithFassets","combineReducers","uiTheme","reducerHash","_baseUIAct","state","responsiveMode","curView","viewName","leftNavItems","leftNavKey","fn","LeftNavComp","fnRef","gfs","appState","getSlicedState","getUITheme","getResponsiveMode","getOrderedLeftNavItems","createSelector","encodedLeftNavComp","sort","k1","k2","localeCompare","createLogic","String","process","done","memo","useDispatch","activateTab","useFassets","handleActivateTab","tabId","tabName","preview","dualHandleActivateTab","onSingleClick","onDoubleClick","delay","timeoutID","rest","clearTimeout","genDualClickHandler","LeftNavCollapsibleItem","TreeView","defaultCollapseIcon","defaultExpandIcon","accumTreeItems","accumulativeId","directoryAccum","push","TreeItem","nodeId","label","tabController","TabControllerScene","TabControllerCollage","tabManager","registerTab","compClass","compName","TabControllerClass","genTreeItems","flexGrow","maxWidth","leftNavCache","processAddLeftNav","LeftNav","orderedLeftNavItems","useSelector","Drawer","leftNav","paper","leftNavPaper","Toolbar","comment","List","flexShrink","UserMenu","curUser","useState","anchorUserMenu","setAnchorUserMenu","userMenuOpen","useMemo","Boolean","openUserMenu","useCallback","event","currentTarget","_closeUserMenu","userMenuItems","orderedUserMenuItems","item1Key","item2Key","IconButton","Menu","anchorEl","transformOrigin","open","onClose","closeUserMenu","fassetsKey","UserMenuItem","openPkg","chooseFileSystemEntries","fileHandle","accepts","description","extensions","mimeTypes","message","getFile","file","fileContent","setPkgResourcePath","savePkg","saveAs","content","getPkgResourcePath","createWriter","writer","write","close","DYNAMIC_DEFAULT","discloseError","showUser","logIt","FileMenu","anchorFileMenu","setAnchorFileMenu","fileMenuOpen","openFileMenu","_closeFileMenu","activeTabId","sel","getActiveTabId","isActiveTab","Typography","noWrap","closeFileMenu","MenuItem","handleOpenPkg","handleSavePkg","disabled","resolvePkg","targetObj","getTabController","getTarget","dispModeChanged","getDispMode","enumKey","_toolBarAct","enumValueOf","title","AppMotif","viewAuxiliaryContent","get","curViewAuxiliaryContent","matchKey","fallbackViewAuxiliaryContent","resolveCurViewAuxiliaryContent","TitleComp","FooterComp","app","AppBar","appBar","toolbar","disableGutters","menuButton","bottomBar","zIndex","drawer","top","bottom","marginRight","overflow","_toolBarSel","handleDispModeChange","newDispMode","myTitle","activeTarget","FormControl","InputLabel","Select","labelId","onChange","from","dm","TransitionZoom","forwardRef","Fade","timeout","Slide","direction","Zoom","SplashScreen","isCellPhone","useTheme","useMediaQuery","breakpoints","down","useForCellPhone","SplashScreenCommon","fullScreen","SplashScreenProgrammatic","defaultProps","palette","common","white","backgroundColor","primary","main","progress","margin","spacing","splashState","setSplashState","_setSplashState","splash","_errLastReported","errCntl","Dialog","TransitionComponent","DialogTitle","DialogContent","src","alt","MainLayout","themeInUse","darkTheme","lightTheme","CssBaseline","createMuiTheme","typography","useNextVariants","fontSize","light","dark","contrastText","secondary","ToggleUITheme","ChipIcon","MoonIcon","SunIcon","Chip","icon","Divider","MaintainResponsiveMode","CheckedIcon","maintainResponsiveMode","defineActions","curResponsiveMode","breakpoint","About","showAbout","define","defineUse","use","required","fassetValidations","any","logic","appWillStart","curRootAppElm","injectDependency","ratify","closeTab","_tabManagerAct","pgmDirectives","next_activeTabId","previewTabId","next_previewTabId","tabs","newTabs","removeTabId","addNewTab","filter","tab","getPreviewTabId","getTabs","getTotalTabs","TabController","TabPanelComp","createTabPanelComp","tabRegistry","getTabId","transform","next","reject","req_tabId","req_preview","cur_previewTabId","cur_targetTab","getTabName","closeTabIndx","findIndex","nextTabIndx","nextTabId","setDispMode","TabManager","_tabManagerSel","handleTabChanged","Tabs","indicatorColor","textColor","scrollButtons","Tab","tabPreview","tabPermanent","Grid","justify","stopPropagation","TabCreator","getTabPanelComp","fontStyle","TabPanel","Paper","hidden","Box","padding","CenterItems","alignItems","StartUpPage","marginTop","featureRoute","route","lastState","group","curState","groupEnd","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister","PaletteIcon","PaletteIconDefault","setOpen","toggleExpansion","ListItem","button","ListItemIcon","ListItemText","Collapse","in","pallet","otherProps","stageElm","useRef","useEffect","current","border","collage","sandbox","baseUI","tabManagerFeature","toolBar","initFirebase","pwa","logActions","createReducerAspect","createLogicAspect","createRouteAspect","fallbackElm","launchApp","features","aspects","registerRootAppElm","rootAppElm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.151c8b49.chunk.js","sourcesContent":["/**\r\n * Standardize the ability to handle ALL errors more generically, by\r\n * adding these value-added extensions to ALL Error objects (via this\r\n * Error class polyfill - a monkey patch).\r\n * \r\n * All Error instances (created anywhere) are extended to include the\r\n * following characteristics:\r\n * \r\n * - A new error.userMsg property is defined.\r\n * \r\n *   This message is intended to be seen by users, so it should be\r\n *   suitable for human consumption:\r\n *     - both in meaning, \r\n *     - and in sanitation (so as to not reveal any internal\r\n *       architecture)\r\n * \r\n *   By default, error.userMsg = 'Unexpected Condition'\r\n *   and can be changed by: \r\n *     + error.defineUserMsg(userMsg): error\r\n * \r\n * - There is a delineation of expected vs. unexpected conditions.  For\r\n *   example:\r\n * \r\n *     - An error communicating \"invalid password\" is an expected\r\n *       condition, because it is stimulated by user input.\r\n * \r\n *     - Contrast that with an error communicating \"DB is down\", which is\r\n *       an unexpected condition, because this is outside the user's\r\n *       control.\r\n * \r\n *   This distinction is controlled by whether an error.userMsg has\r\n *   been defined (expected) or not (unexpected).\r\n * \r\n *   In other words, all errors start out as unexpected, and can be\r\n *   changed to expected by simply invoking:\r\n *     + error.defineUserMsg(userMsg): error\r\n * \r\n *   This distinction may be programmatically delineated through one of\r\n *   the following methods:\r\n *     + error.isExpected(): boolean\r\n *     + error.isUnexpected(): boolean\r\n * \r\n * - A new error.attemptingToMsg property is defined.\r\n * \r\n *   This message is also intended to be seen by users, and provides\r\n *   additional detail of what was being attempted (over and above the\r\n *   error.userMsg).\r\n * \r\n *   By default, error.attemptingToMsg = ''\r\n *   and can be changed by: \r\n *     + error.defineAttemptingToMsg(attemptingToMsg): error\r\n * \r\n * - A new error.formatUserMsg() is provided that combines all\r\n *   user-specific messages (userMsg and attemptingToMsg).\r\n * \r\n *     + error.formatUserMsg(): string\r\n * \r\n * - The toString() method has been extended to suffix the base\r\n *   toString() with user-specific messages.\r\n * \r\n * - All of the new \"defining\" methods return the receiving error,\r\n *   so as to allow them to be conveniently chained.  For example:\r\n * \r\n *     throw new Error('catastrophic details here').defineAttemptingToMsg('sign in');\r\n * \r\n * **Usage Scenarios** are as follows:\r\n * \r\n * - Error Origination\r\n * \r\n *   In throwing a new Error, you can:\r\n *     throw new Error('internal technical error details')\r\n *                 .defineUserMsg('You did not bla')           // ONLY INVOKE if this is an expected condition - otherwise default to: 'Unexpected Condition'\r\n *                 .defineAttemptingToMsg('log into the app'); // optionally provide additional clarification in either case (expected/unexpected)\r\n * \r\n * - Error Pass Through\r\n * \r\n *   Within a mid-level service, you may capture an error from a lower\r\n *   point and supplement it as follows:\r\n * \r\n *     catch(err) {\r\n *       throw err.defineUserMsg('You did not bla')           // ONLY INVOKE if this is an expected condition - otherwise default to: 'Unexpected Condition'\r\n *                .defineAttemptingToMsg('log into the app'); // optionally provide additional clarification in either case (expected/unexpected)\r\n *     }\r\n * \r\n * - Error Consumption (by client)\r\n * \r\n *   Using these enhancements, the client can abstractly apply various\r\n *   heuristics, such as:\r\n *\r\n *     - if logging is necessary\r\n *       * if so, reveal complete context (internal details and user context)\r\n *     - if user notification necessary\r\n *       * if so supply info suitable for human consumption\r\n * \r\n *   For more usage scenarios, please refer to the discloseError.js utility.\r\n */\r\n\r\n/* eslint-disable no-extend-native */  // we are very careful NOT to break native behavior of the Error object\r\n\r\nif (!Error.prototype.defineUserMsg) { // key off of one of several extension points\r\n\r\n  /**\r\n   * Define a user-specific message, that is applicable for human\r\n   * consumption:\r\n   *  - both in meaning, \r\n   *  - and in sanitization (so as to not reveal any internal architecture).\r\n   *\r\n   * This method also delineates the error as an expected condition.\r\n   *\r\n   * @param {String} userMsg the user message to define\r\n   *\r\n   * @return {Error} self, supporting convenient Error method chaining.\r\n   */\r\n  Error.prototype.defineUserMsg = function(userMsg) {\r\n    this.userMsg  = userMsg;\r\n    this.expected = true;\r\n    return this;\r\n  };\r\n  Error.prototype.userMsg = \"Unexpected Condition\"; // prototype provides the default\r\n\r\n\r\n  /**\r\n   * Return an indicator as to whether this error was\r\n   * expected (say user input error),\r\n   * or not (say a catastrophic error).\r\n   *\r\n   * @return {boolean} error expected (true) or not (false).\r\n   */\r\n  Error.prototype.isExpected = function() {\r\n    return this.expected;\r\n  };\r\n  Error.prototype.expected = false; // prototype provides the default\r\n\r\n\r\n  /**\r\n   * Return an indicator as to whether this error was\r\n   * unexpected (say a catastrophic error),\r\n   * or not (say user input error).\r\n   *\r\n   * @return {boolean} error unexpected (true) or not (false).\r\n   */\r\n  Error.prototype.isUnexpected = function() {\r\n    return !this.expected;\r\n  };\r\n\r\n\r\n  /**\r\n   * Define a user-specific 'attempting to' message, that provides\r\n   * additional details of what was being attempted.\r\n   *\r\n   * Errors with this context are prefixed with ' ... attempting to: ',\r\n   * so word your phrasing appropriately.\r\n   * \r\n   * Multiple attempting-to phrases can be used, which will be\r\n   * combined with the ', -and- ' phrase.\r\n   *\r\n   * @param {String} attemptingToMsg the user-specific attempting\r\n   * to' message.\r\n   *\r\n   * @return {Error} self, supporting convenient Error method chaining.\r\n   */\r\n  Error.prototype.defineAttemptingToMsg = function(attemptingToMsg) {\r\n    if (this.attemptingToMsg) // append multiples\r\n      this.attemptingToMsg += `, -and- ${attemptingToMsg}`;\r\n    else                      // initial definition\r\n      this.attemptingToMsg += ` ... attempting to: ${attemptingToMsg}`;\r\n    return this;\r\n  };\r\n  Error.prototype.attemptingToMsg = ''; // prototype provides the default\r\n\r\n\r\n  /**\r\n   * Format a user-specific message, combining all user-specific contexts.\r\n   *\r\n   * @return {string} formatted user message.\r\n   */\r\n  Error.prototype.formatUserMsg = function() {\r\n    return this.userMsg + this.attemptingToMsg;\r\n  };\r\n\r\n\r\n  /**\r\n   * Extend the Error toString() to prefix user-specific context.\r\n   */\r\n  const prior_toString = Error.prototype.toString; // monkey patch\r\n  Error.prototype.toString = function() {\r\n    return prior_toString.call(this) + '\\n\\nUser Msg: ' + this.formatUserMsg();\r\n  };\r\n\r\n\r\n  // L8TR:\r\n  // /**\r\n  //  * Define an indicator as to the cause of this error ... used to apply\r\n  //  * various heuristics, such as whether logging is necessary.\r\n  //  *\r\n  //  * The following indicators are available:\r\n  //  *   Error.Cause {\r\n  //  *     UNEXPECTED_CONDITION        [default]\r\n  //  *     RECOGNIZED_USER_ERROR\r\n  //  *   }\r\n  //  *\r\n  //  * @param {String} cause one of Error.Cause.\r\n  //  *\r\n  //  * @return {Error} self, supporting convenient Error method chaining.\r\n  //  */\r\n  // Error.prototype.defineCause = function(cause) {\r\n  //   this.cause = cause;\r\n  //   return this;\r\n  // };\r\n  // \r\n  // Error.Cause = {\r\n  //   UNEXPECTED_CONDITION:    'UNEXPECTED_CONDITION',\r\n  //   RECOGNIZED_USER_ERROR: 'RECOGNIZED_USER_ERROR'\r\n  // };\r\n  // \r\n  // Error.prototype.cause = Error.Cause.UNEXPECTED_CONDITION; // prototype provides the default\r\n\r\n}\r\n","/**\r\n * A convenience assertion utility, typically used to validate\r\n * pre-conditions of a routine.\r\n *\r\n * **Advanced**: verify.prefix(msgPrefix) returns a higher-order\r\n *               verify() function where all messages are prefixed.\r\n *\r\n * @param {truthy} condition - a \"truthy\" condition which\r\n * must be satisfied.\r\n *\r\n * @param {string} msg - a message clarifying the condition being\r\n * checked.\r\n * \r\n * @throws {Error} an Error is thrown when the supplied condition is\r\n * NOT met.\r\n */\r\nexport default function verify(condition, msg) {\r\n  if (!condition) {\r\n    // TODO: don't think there is any benefit in logging this console.error \r\n    // console.error(`verify() constraint issue: ${msg}`); // supplement exception with error log (for react-native exposure)\r\n    throw new Error(msg);\r\n  }\r\n}\r\n\r\nverify.prefix = function(msgPrefix) {\r\n  return (condition, msg) => verify(condition, msgPrefix+msg);\r\n};\r\n","import isEqual        from 'lodash.isequal';\r\nimport isFunction     from 'lodash.isfunction';\r\nimport isObject       from 'lodash.isobject';\r\nimport isPlainObject  from 'lodash.isplainobject';\r\nimport isString       from 'lodash.isstring';\r\nimport {isValidElementType} from 'react-is';\r\n\r\n// alias to isFunction\r\nconst  isClass        = isFunction;\r\n\r\n// return an indicator as to whether the supplied parameter is a \r\n// react component (true) or not (false).\r\nfunction isComponent(comp) {\r\n  // NOTE: our unit test checks all three forms of Component creation:\r\n  //       - Stateless Functional Component\r\n  //       - Class Component (extending from React.Component)\r\n  //       - Legacy React.createClass()\r\n  return isValidElementType(comp); \r\n}\r\n\r\n\r\n// return an indicator as to whether the supplied parameter is a\r\n// number (true) or not (false).\r\nfunction isNumber(val) {\r\n  return typeof val === 'number';\r\n}\r\n\r\nexport {\r\n  isEqual,                    // + isEqual(ref1, ref2): boolean ... a deep comparison\r\n  isFunction,                 // + isFunction(ref): boolean\r\n  isNumber,                   // + isNumber(ref): boolean\r\n  isObject,                   // + isObject(ref): boolean\r\n  isPlainObject,              // + isPlainObject(ref): boolean\r\n  isString,                   // + isString(ref): boolean\r\n  isClass,                    // + isClass(ref): boolean\r\n  isComponent,                // + isComponent(ref): boolean\r\n};\r\n","/**\r\n * A convenience assertion validation utility that performs checks\r\n * related to \"Unknown Arguments\" of functions accepting \"named\r\n * arguments\".  This logic is encapsulated here because it a\r\n * repetitive requirement by many functions :-)\r\n * \r\n * When any \"Unknown Arguments\" are detected, an exception is thrown\r\n * with a message containing context through the supplied `check`\r\n * parameter.\r\n * \r\n * USAGE: \r\n * ```js\r\n * myFunc({id, name, ...unknownNamedArgs}={}) {\r\n * \r\n *   // validate myFunc() parameters\r\n *   const check = verify.prefix(`myFunct({id:'${id}', name:'${name}'}) parameter violation: `);\r\n *   \r\n *   // ... id\r\n *   check(id,             'id is required');\r\n *   check(isString(id),   'id must be a string');\r\n *   \r\n *   // ... name\r\n *   check(name,           'name is required');\r\n *   check(isString(name), 'name must be a string');\r\n * \r\n *   // ... unknown arguments\r\n *   checkUnknownArgs(check, unknownNamedArgs, arguments);\r\n * }\r\n * ```\r\n *\r\n * @param {verifyFn} check - the verify assertion utility function,\r\n * typically prefixed with `verify.prefix()` to give proper context\r\n * to emitted exceptions.\r\n *\r\n * @param {string[]} unknownNamedArgs - an array of unknown named\r\n * argument named, typically supplied using ES6 \"rest parameters\".\r\n * \r\n * @param {argsObj} args - the implicit `arguments` object\r\n * (accessible within standard JavaScript functions).\r\n * \r\n * @throws {Error} an Error is thrown when any \"Unknown Arguments\" are\r\n * detected.\r\n */\r\nexport default function checkUnknownArgs(check, unknownNamedArgs, args) {\r\n\r\n  // check for any unrecognized named parameters\r\n  const unknownArgKeys = Object.keys(unknownNamedArgs);\r\n  check(unknownArgKeys.length === 0,  `unrecognized named parameter(s): ${unknownArgKeys}`);\r\n\r\n  // check for any unrecognized positional parameter\r\n  // NOTE: when defaulting entire struct, arguments.length is 0\r\n  check(args.length <= 1,  `unrecognized positional parameters (only named parameters can be specified) ... ${args.length} arguments were supplied`);\r\n}\r\n\r\n/*\r\n\r\n?? would be nice to add a check to determine if namedParams is a plain object\r\n\r\n   feature-u check-in comment: adjusted createAspect() namedParam validation to produce more intuitive \"positional param errors\"\r\n   ... see: c:/dev/feature-u/src/extend/createAspect.js\r\n\r\n   1. our utility would accept an additional `namedParams` parameter:\r\n\r\n        + checkUnknownArgs(check, args, namedParams, unknownNamedArgs): void ?? I reordered this too ?? AI rename checkUnknownArgs() TO: checkNamedParams()\r\n\r\n      AND provide this additional check:\r\n\r\n        check(isPlainObject(namedParams), `only named parameters may be supplied`);\r\n\r\n   2. client should accept a single `namedParams` parameter\r\n      and do the destructuring in an executable statement\r\n      RATHER than the function signature.\r\n\r\n      They would also move the checkUnknownArgs() up higher\r\n\r\n      CLIENT EX:\r\n\r\n      ```js\r\n      myFunc(namedParams={}) {\r\n      \r\n        const {id, name, ...unknownNamedArgs} = namedParams;\r\n      \r\n        // ... unknown arguments ?? move this up\r\n        // ... check named params ?? new name\r\n        checkNamedParams(check, arguments, namedParams, unknownNamedArgs); // ?? new signature\r\n      \r\n        // validate myFunc() parameters\r\n        const check = verify.prefix(`myFunct({id:'${id}', name:'${name}'}) parameter violation: `);\r\n        \r\n        // ... id\r\n        check(id,             'id is required');\r\n        check(isString(id),   'id must be a string');\r\n        \r\n        // ... name\r\n        check(name,           'name is required');\r\n        check(isString(name), 'name must be a string');\r\n      }\r\n      ```\r\n\r\n    9: INTERNAL NOTE:\r\n\r\n       I had originally tried to keep the destructuring in the function signature\r\n       AND use JavaScript `arguments[0]` as the namedParams\r\n       HOWEVER this has some BAD QUIRKS:\r\n\r\n       NOTE: arguments is a bit tricky\r\n             - it represents raw client-supplied args\r\n             - WITHOUT default semantics (in signature destructuring)\r\n                                                     arguments.length  arguments[0]  id (via signature destructuring)\r\n                                                     ================  ============  =========\r\n             - EX1: if client supplies NO params:           0            undefined   undefined\r\n             - EX2: if client supplies (123)                1            123         undefined (TRICKY)\r\n             - EX3: if client supplies (new Date())         1            Date        undefined (TRICKY)\r\n             - EX4: if client supplies (123, 456)           2            123         undefined (TRICKY)\r\n                    TRICKY: NOT SURE I fully understand this\r\n\r\n             - SO: placement order of the checks below is critical\r\n                   to get the desired message precedence to user\r\n                   i.e. our ONE required param check IS DONE FIRST\r\n\r\n*/\r\n","import verify      from 'util/verify';\r\nimport {isString}  from 'util/typeCheck';\r\n\r\n/*-------------------------------------------------------------------------------\r\n   \r\n  ***********************************\r\n  *** Resolve Circular Dependency ***\r\n  ***********************************\r\n\r\n  Do NOT IMPORT SmartPkg\r\n  import SmartPkg from './SmartPkg';\r\n  \r\n  Because SmartPkg extends SmartModel, and SmartModel uses pkgManager,\r\n  this module (pkgManager) cannot rely on SmartPkg!\r\n  \r\n  In other words we cannot import SmartPkg here!\r\n   - Prior to this, openPkg() was a method in PkgManager()\r\n     and we worked around it (a hack) by insuring SmartPkg was expanded FIRST\r\n     ... in src/index.js\r\n         import 'core/SmartPkg'; // \"Resolve Circular Dependency\" by expanding this first\r\n   - This is why we moved openPkg() into a separate module (pkgPersist.js) \r\n     With this refactor, this hack is no longer needed!\r\n\r\n-------------------------------------------------------------------------------*/\r\n\r\n/**\r\n * PkgManager is the manager of ALL packages (SmartPkg)\r\n * loaded and maintained in the visualize-it system.\r\n *\r\n * Entries from one package can have dependencies on other external\r\n * packages (for example, a \"system\" package may contain component\r\n * instances from classes defined in a \"component\" package).\r\n * \r\n * Because the pkgManager service is aware of all packages, it\r\n * provides a clearing house to resolve classRefs, during persistence\r\n * hydration ... see: `SmartModel.fromSmartJSON()`\r\n */\r\nclass PkgManager {\r\n\r\n  /**\r\n   * Create a PkgManager.\r\n   */\r\n  constructor() {\r\n    // carve out our pkgCatalog\r\n    this.pkgCatalog = {\r\n      // [pkgName]: smartPkg,\r\n      // ...\r\n    };\r\n  }\r\n\r\n\r\n  /**\r\n   * Register the supplied package in self.\r\n   *\r\n   * This registration:\r\n   *\r\n   * - makes SmartPkg resources available to low-level processes (for\r\n   *   example, classRefs used in resolving resource-based hydration)\r\n   *   ... see: getClassRef() / getEntry()\r\n   * \r\n   * - is independent of LeftNav visualization (this is accomplished\r\n   *   through `leftNavManager.addLeftNav(smartPkg)`)\r\n   *\r\n   * This registration  occurs automatically when using `openPkg()` (in pkgPersist.js)\r\n   * ... so it could be interpreted as a pseudo private method.\r\n   * \r\n   * - However, non-resource-based packages must register themselves\r\n   *   using this entry point ... for ex:\r\n   *    - code-only packages (as in core offerings)\r\n   *    - unit tests\r\n   *    - etc.\r\n   *   This registration can be accomplished VERY EARLY (e.g. during\r\n   *   code expansion of core classes).\r\n   *\r\n   * @param {SmartPkg} smartPkg - the package to register.\r\n   *\r\n   * @throws {Error} an Error is thrown when the package is already loaded\r\n   */\r\n  registerPkg(smartPkg) {\r\n\r\n    // validate parameters\r\n    const check = verify.prefix(`${this.constructor.unmangledName}.registerPkg() parameter violation: `);\r\n\r\n    // ... smartPkg\r\n    check(smartPkg,                     'smartPkg is required');\r\n    check(smartPkg.getPkgName,          'smartPkg must be a SmartPkg instance'); // use \"duct type\" check\r\n  //check(smartPkg instanceof SmartPkg, 'smartPkg must be a SmartPkg instance'); // to avoid SmartPkg import (see: \"Circular Dependency\" note above)\r\n\r\n    // maintain our package catalog\r\n    const pkgName = smartPkg.getPkgName();\r\n    // console.log(`xx PkgManager.registerPkg() registering smartPkg(${pkgName}): `, smartPkg);\r\n    if (this.pkgCatalog[pkgName]) { // verify smartPkg is not already loaded\r\n      throw new Error(`***ERROR*** ${this.constructor.unmangledName}.registerPkg() pkgName: ${pkgName} is already registered :-(`)\r\n        .defineUserMsg(`The visualize-it '${pkgName}' package is already loaded`); // AI: we may need to conditionally refresh existing packages (per user confirmation)\r\n    }\r\n    this.pkgCatalog[pkgName] = smartPkg;\r\n  }\r\n\r\n  /**\r\n   * Return the package (SmartPkg) registered to the supplied\r\n   * `pkgName` (undefined for NOT registered).\r\n   *\r\n   * @param {string} pkgName - the package name to retrieve.\r\n   *\r\n   * @returns {SmartPkg} the package (SmartPkg) registered to the\r\n   * supplied `pkgName` (undefined for NOT registered).\r\n   */\r\n  getPackage(pkgName) {\r\n\r\n    // validate parameters\r\n    const check = verify.prefix('PkgManager.getPackage() parameter violation: ');\r\n    // ... pkgName\r\n    check(pkgName,             'pkgName is required');\r\n    check(isString(pkgName),   'pkgName must be a string');\r\n\r\n    // return the package (if any)\r\n    return this.pkgCatalog[pkgName];\r\n  }\r\n\r\n  /**\r\n   * Resolve classRefs managed in self's packages.\r\n   *\r\n   * NOTE: This accessor is commonly used in the rehydration process\r\n   *       (SmartModel.fromSmartJSON()) to resolve classes at a low level.\r\n   *\r\n   * @param {string} pkgName - the package name that the class belongs to.\r\n   * @param {string} className - the class name of the classRef to return.\r\n   *\r\n   * @returns {SmartClassRef} the classRef matching the supplied `pkgName`/`className`\r\n   *\r\n   * @throws {Error} an Error is thrown when the class was not resolved.\r\n   */\r\n  getClassRef(pkgName, className) {\r\n\r\n    // validate parameters\r\n    const check = verify.prefix('PkgManager.getClassRef() parameter violation: ');\r\n    // ... pkgName\r\n    check(pkgName,             'pkgName is required');\r\n    check(isString(pkgName),   'pkgName must be a string');\r\n    // ... className\r\n    check(className,           'className is required');\r\n    check(isString(className), 'className must be a string');\r\n\r\n    // resolve the package containing the class\r\n    const smartPkg = this.pkgCatalog[pkgName];\r\n    if (!smartPkg) { // this is an expected condition (communicate to user via defineUserMsg())\r\n      throw new Error(`***ERROR*** PkgManager.getClassRef(pkgName:${pkgName}, className:${className}) package is NOT cataloged ... did you forget to load a dependent package?`)\r\n        .defineUserMsg(`The '${pkgName}/${className}' class has been referenced, but the '${pkgName}' package has NOT been loaded ... did you forget to load this dependent package?`);\r\n    }\r\n    \r\n    // resolve the classRef\r\n    const classRef = smartPkg.getClassRef(className);\r\n    if (!classRef) { // this is more of an unexpected condition\r\n      throw new Error(`***ERROR*** PkgManager.getClassRef(pkgName:${pkgName}, className:${className}) class NOT in package :-(`);\r\n    }\r\n    return classRef;\r\n  }\r\n\r\n  /**\r\n   * Resolve entries managed in self's packages.\r\n   *\r\n   * NOTE: This accessor was thought to be used by the tabManager to resolve\r\n   *       entries at a low level, however it is currently not needed.\r\n   *       ... as of 2/16/2020, this method NOT being used.\r\n   *\r\n   * @param {string} pkgName - the package name that the entry belongs to.\r\n   * @param {string} entryId - the entry ID of the entry to return.\r\n   *\r\n   * @returns {entry} the entry matching the supplied params,\r\n   * undefined for not-found.\r\n   */\r\n  getEntry(pkgName, entryId) {\r\n\r\n    // validate parameters\r\n    const check = verify.prefix('PkgManager.getEntry() parameter violation: ');\r\n    // ... pkgName\r\n    check(pkgName,           'pkgName is required');\r\n    check(isString(pkgName), 'pkgName must be a string');\r\n    // ... entryId\r\n    check(entryId,           'entryId is required');\r\n    check(isString(entryId), 'entryId must be a string');\r\n\r\n    // resolve the package containing the entry\r\n    const smartPkg = this.pkgCatalog[pkgName];\r\n    if (!smartPkg) {\r\n      return;\r\n    }\r\n    \r\n    // resolve the entry, if any (when defined in package)\r\n    return smartPkg.getEntry(entryId);\r\n  }\r\n\r\n}\r\nPkgManager.unmangledName = 'PkgManager';\r\n\r\n// expose our single pkgManager utility ... AI: singleton code smell\r\nconst pkgManager = new PkgManager();\r\nexport default pkgManager;\r\n","import verify            from 'util/verify';\r\nimport checkUnknownArgs  from 'util/checkUnknownArgs';\r\nimport {isString,\r\n        isClass}         from 'util/typeCheck';\r\n\r\n/**\r\n * PseudoClass maintains meta data that allows an object instance to\r\n * logically be considered a class (a pseudoClass).\r\n *\r\n * This is used for resource-based objects:\r\n *  - that can be dynamically edited (through the graphical editor)\r\n *  - and yet can be \"instantiated\" as items of other objects!\r\n * This last point is where the resource is taking on the roll of a\r\n * class ... i.e. there are instances of this class in other resources!\r\n *\r\n * Classes whose object instances can take on the roll of a\r\n * pseudoClass should instantiate a `pseudoClass` member of type\r\n * PseudoClass as follows:\r\n *\r\n * ```js\r\n * export default class MyClass extends SmartModel {\r\n *   constructor(...) {\r\n *     ...\r\n *     // make objects of this type pseudoClasses\r\n *     this.pseudoClass = new PseudoClass();\r\n *     ...\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * All visualize-it utilities recognize this convention and support it.\r\n * As an example:\r\n *  - `SmartClassRef.createSmartObject(...)` will operate on either a\r\n *    real classes (SmartModel derivations) or pseudoClasses\r\n *\r\n * Objects instances that contain the pseudoClass member can be in one\r\n * of two states:\r\n * \r\n * 1. **MASTER DEFINITION** of the pseudoClass: There is only one\r\n *    object instance of this type, and is what can be dynamically\r\n *    edited.\r\n *\r\n *    **INTERNAL NOTE** In this state:\r\n *     - the `container.pseudoClass.id === 'TYPE'`\r\n *     - the `container.id` will represent the pseudoClass type\r\n *\r\n * 2. **INSTANCE** of the pseudoClass: There can be many instances of\r\n *    the pseudoClass type.\r\n *\r\n *    **INTERNAL NOTE** In this state:\r\n *     - the `container.pseudoClass.id` will reference the pseudoClass type name\r\n *     - the `container.pseudoClass.pseudoClassMaster` will reference the pseudoClassMaster\r\n *\r\n * Currently there are two scenarios where pseudoClasses are used:\r\n *\r\n *  - a `DynamicComp` represents a component that can be edited and\r\n *    maintained in the visualize-it graphical editor.  Many\r\n *    `DynamicComp` master definitions can be created (each with their\r\n *    own pseudoClass type), each which can be instantiated many times\r\n *    in a visualize-it model.\r\n *\r\n *  - a `Scene` represents a graphical perspective that visualizes a\r\n *    system, but each Scene definition can be referenced many times\r\n *    within various `Collages`.\r\n */\r\nexport default class PseudoClass {\r\n\r\n  /**\r\n   * Create a PseudoClass.\r\n   *\r\n   * **IMPORTANT NOTE**: The PseudoClass constructor parameters are\r\n   * strictly used internally!  All client usages should rely on the\r\n   * defaults for these parameters.\r\n   *\r\n   * **Please Note** this constructor uses named parameters.\r\n   *\r\n   * @param {string} [id='TYPE'] - the type reference for this pseudoClass.\r\n   */\r\n  constructor({id='TYPE', \r\n               name='the MASTER pseudoClass definition of type: ... see container.id',\r\n               ...unknownArgs}={}) {\r\n\r\n    // validate SmartScene() constructor parameters\r\n    const check = verify.prefix('PseudoClass() constructor parameter violation: ');\r\n\r\n    // ... id\r\n    check(id,            'id is required');\r\n    check(isString(id),  'id must be a string');\r\n\r\n    // ... name\r\n    check(name,           'name is required');\r\n    check(isString(name), 'name must be a string');\r\n\r\n    // ... unknown arguments\r\n    checkUnknownArgs(check, unknownArgs, arguments);\r\n\r\n    // retain parameters in self\r\n    this.id   = id;\r\n    this.name = name || id;\r\n  }\r\n\r\n  // NOT NEEDED (my props are all contained in super)\r\n  // getEncodingProps(): {\r\n  //   return [...super.getEncodingProps(), ...['my', 'props', 'too']];\r\n  // }\r\n  \r\n  /**\r\n   * Return an indicator as to whether self represents a \"type\",\r\n   * verses an \"instance\" of a type ... the opposite of\r\n   * `isInstance()`.\r\n   * \r\n   * @returns {boolean} `true` if self is a \"type\", false otherwise.\r\n   */\r\n  isType() { return this.id==='TYPE'; }\r\n\r\n  /**\r\n   * Return an indicator as to whether self represents an \"instance\"\r\n   * of a type, verses a \"type\" ... the opposite of `isType()`.\r\n   * \r\n   * @returns {boolean} `true` if self is an \"instance\" of a type,\r\n   * false otherwise.\r\n   */\r\n  isInstance() { return !this.isType(); }\r\n\r\n  /**\r\n   * Return an indicator as to whether the supplied `ref` is a\r\n   * \"logical\" class (i.e. a pseudoClass MASTER) ... an object\r\n   * instance that is logically treated as a class.\r\n   *\r\n   * @param {any} ref - the item to interpret.\r\n   *\r\n   * @returns {boolean} true: `ref` is a \"logical\" class (a\r\n   * pseudoClass MASTER), false: `ref` is something else.\r\n   */\r\n  static isPseudoClassMaster(ref) {\r\n    return ref.pseudoClass && ref.pseudoClass.isType();\r\n  }\r\n\r\n  /**\r\n   * Return the class name of the supplied `clazz` (interpreting BOTH\r\n   * real classes and pseudoClass MASTERS).\r\n   *\r\n   * NOTE: This utility is used when the client is reasoning about a\r\n   *       raw `clazz`, NOT a classRef (SmartClassRef).\r\n   *\r\n   * @param {class | pseudoClassMASTER} clazz - the class to interpret\r\n   * (either a real class or a pseudoClass MASTER).\r\n   *\r\n   * @returns {string} the class name of the supplied `clazz`.\r\n   *\r\n   * @throws {Error} an Error is thrown when the supplied clazz is invalid.\r\n   */\r\n  static getClassName(clazz) {\r\n\r\n    // validate parameters\r\n    const check = verify.prefix('PseudoClass.getClassName() parameter violation: ');\r\n    // ... clazz\r\n    check(clazz, 'clazz is required');\r\n\r\n    // interpret a pseudo class MASTER (an object instance that is logically a class)\r\n    if (this.isPseudoClassMaster(clazz)) {\r\n      return clazz.id;\r\n    }\r\n\r\n    // interpret a real class name\r\n    if (isClass(clazz)) {\r\n      return clazz.unmangledName || clazz.name;\r\n    }\r\n    \r\n    // otherwise supplied param is invalid\r\n    else {\r\n      check(false, 'clazz must be a real class or a pseudoClass MASTER');\r\n    }\r\n  }\r\n\r\n}\r\nPseudoClass.unmangledName = 'PseudoClass';\r\n","import {Enumify} from 'enumify';\r\n\r\nexport default class DispMode extends Enumify {\r\n  static view     = new DispMode();\r\n  static edit     = new DispMode();\r\n  static animate  = new DispMode();\r\n  static _        = this.closeEnum();\r\n}\r\n","import verify            from 'util/verify';\r\nimport {isString,\r\n        isObject,\r\n        isPlainObject}   from 'util/typeCheck';\r\nimport checkUnknownArgs  from 'util/checkUnknownArgs';\r\nimport pkgManager        from './pkgManager';\r\nimport PseudoClass       from './PseudoClass';\r\nimport DispMode          from './DispMode';\r\n\r\n/**\r\n * SmartModel is the abstract top-level base class of the visualize-it\r\n * object model. \r\n *\r\n * SmartModel derivations are referred to as \"smartObjects\".  They\r\n * have the following characteristics:\r\n *\r\n * - The class constructor employs namedProps.  This is KEY aspect to\r\n *   make persistence work, because it supports data-driven injection\r\n *   from smartJSON.\r\n *\r\n * The SmartModel base class provides a consistency in:\r\n *\r\n *  - identification (id/name):\r\n *    + constructor({id, name})\r\n *\r\n *  - persistance:\r\n *    + toSmartJSON():smartJSON ................. transforms self (with depth) into smartJSON\r\n *<S> + fromSmartJSON(smartJSON): smartObject ... reconstitutes class-based objects (with depth) from smartJSON\r\n *    + getEncodingProps(): string[] ............ polymorphically expose properties required to encode self\r\n *    + smartClone(): smartObject ............... creates a deep copy of self (used in pseudo constructor - SmartClassRef.createSmartObject(namedParams)))\r\n *\r\n *  - meta info (more found in PseudoClass and SmartClassRef):\r\n *    + getClassRef(): SmartClassRef ... promotes the classRef from which self was created (unifying both real classes and pseudo classes)\r\n *    + diagClassName(): string ........ resolves real class name (unmangled) used in diagnostics (use getClassRef().getClassName() when pseudoClass needs to be interpreted)\r\n */\r\nexport default class SmartModel {\r\n\r\n  /**\r\n   * Create a SmartModel.\r\n   *\r\n   * **Please Note** this constructor uses named parameters.\r\n   *\r\n   * @param {string} id - the unique identifier of this object.\r\n   * @param {string} [name=id] - the human interpretable name of this\r\n   * object (DEFAULT to id). // ?? UNSURE if we want to DEFAULT this way\r\n   */\r\n  constructor({id, name, ...unknownArgs}={}) {\r\n\r\n    // validate parameters\r\n    const check = verify.prefix(`${this.diagClassName()}(id:'${id}', name:'${name}') constructor parameter violation: `);\r\n\r\n    // ... id\r\n    check(id,            'id is required');\r\n    check(isString(id),  'id must be a string');\r\n\r\n    // ... name\r\n    if (name) {\r\n      check(isString(name), 'name (when supplied) must be a string');\r\n    }\r\n\r\n    // ... unknown arguments\r\n    checkUnknownArgs(check, unknownArgs, arguments);\r\n\r\n    // retain parameters in self\r\n    this.id       = id;\r\n    this.name     = name || id;\r\n    this.dispMode = DispMode.view; // ... our dispMode starts out \"viewing\" content\r\n  }\r\n\r\n  /**\r\n   * Return the object id.\r\n   */\r\n  getId() {\r\n    return this.id;\r\n  }\r\n\r\n  /**\r\n   * Return the object name.\r\n   */\r\n  getName() {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Return the SmartPkg self belongs to.\r\n   * \r\n   * NOTE: This is the SmartPkg that self belongs to (e.g. 'com.astx.KONVA'),\r\n   *       NOT the package self was created from: (e.g. 'core').\r\n   *\r\n   * @returns {SmartPkg} the package self belongs to, `undefined` when\r\n   * outside our supported \"primary\" containment tree.\r\n   */\r\n  getPackage() {\r\n    // when self is a SmartPkg, we have found it!\r\n    // ... we use a \"duct type\" check\r\n    //     in lieu of `this instanceof SmartPkg`\r\n    //     to avoid SmartPkg import (introducing a potential \"Circular Dependency\")\r\n    if (this.getPkgName) {\r\n      return this;\r\n    }\r\n    // follow our parent chain, till we find the SmartPkg\r\n    const  parent = this.getParent();\r\n    return parent ? parent.getPackage() : undefined;\r\n  }\r\n\r\n  /**\r\n   * Return self's parent object, with respect to the \"primary\"\r\n   * containment tree (i.e. NOT view related).\r\n   *\r\n   * @returns {SmartObject} the parent object of self, `undefined` for\r\n   * top-level (e.g. SmartPkg).\r\n   */\r\n  getParent() {\r\n    return this.parent;\r\n  }\r\n\r\n  /**\r\n   * Return self's parent object, with respect to the \"primary\"\r\n   * containment tree (i.e. NOT view related).\r\n   *\r\n   * @param {SmartObject} parent - the parent object of self.\r\n   */\r\n  setParent(parent) {\r\n    this.parent = parent;\r\n  }\r\n\r\n  /**\r\n   * Return self's dispMode (used in top-level objects targeted by a tab).\r\n   * @returns {DispMode} the dispMode of self.\r\n   */\r\n  getDispMode() {\r\n    return this.dispMode;\r\n  }\r\n\r\n  /**\r\n   * Set self's dispMode (used in top-level objects targeted by a tab).\r\n   *\r\n   * @param {DispMode} dispMode - the display mode to set.\r\n   *\r\n   * @throws {Error} an Error is thrown if the supplied dispMode is NOT supported.\r\n   */\r\n  setDispMode(dispMode) {\r\n\r\n    // validate parameters\r\n    const check = verify.prefix(`${this.diagClassName()}.setDispMode() parameter violation: `);\r\n    // ... dispMode\r\n    check(dispMode,                     'dispMode is required');\r\n    check(dispMode instanceof DispMode, 'dispMode must be a DispMode type');\r\n\r\n    // ... insure self supports this setting\r\n    check(this.canHandleDispMode(dispMode), `does NOT support ${dispMode} :-(`);\r\n\r\n    // perform the set operation\r\n    this.dispMode = dispMode;\r\n\r\n    // fully enable this DispMode in the object model\r\n    if (dispMode === DispMode.view) {\r\n      this.enableViewMode();\r\n    }\r\n    else if (dispMode === DispMode.edit) {\r\n      this.enableViewMode(); // a neutral reset\r\n      this.enableEditMode();\r\n    }\r\n    else if (dispMode === DispMode.animate) {\r\n      this.enableViewMode(); // a neutral reset\r\n      this.enableAnimateMode();\r\n    }\r\n    else {\r\n      throw new Error(`***ERROR*** ${this.diagClassName()}.setDispMode() [id:${this.id}]: unrecognized dispMode: ${dispMode}!`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return an indicator as to whether self supports the supplied `dispMode`.\r\n   *\r\n   * @param {DispMode} dispMode - the display mode to evaluate.\r\n   *\r\n   * @throws {boolean} true: can handle, false: not supported.\r\n   */\r\n  canHandleDispMode(dispMode) {\r\n    return true;  // by default, base class assumes all DispModes are supported\r\n  }\r\n\r\n  /**\r\n   * Enable self's \"view\" DispMode (used in top-level objects targeted by a tab).\r\n   *\r\n   * NOTE: this is also invoked prior to other display modes, as a neutral reset :-)\r\n   */\r\n  enableViewMode() {\r\n    throw new Error(`***ERROR*** SmartModel pseudo-interface-violation [id:${this.id}]: ${this.diagClassName()}.enableViewMode() is an abstract method that MUST BE implemented!`);\r\n  }\r\n\r\n  /**\r\n   * Enable self's \"edit\" DispMode (used in top-level objects targeted by a tab).\r\n   */\r\n  enableEditMode() {\r\n    throw new Error(`***ERROR*** SmartModel pseudo-interface-violation [id:${this.id}]: ${this.diagClassName()}.enableEditMode() is an abstract method that MUST BE implemented!`);\r\n  }\r\n\r\n  /**\r\n   * Enable self's \"animate\" DispMode (used in top-level objects targeted by a tab).\r\n   */\r\n  enableAnimateMode() {\r\n    throw new Error(`***ERROR*** SmartModel pseudo-interface-violation [id:${this.id}]: ${this.diagClassName()}.enableAnimateMode() is an abstract method that MUST BE implemented!`);\r\n  }\r\n\r\n\r\n  /**\r\n   * An instance method that transforms self (with depth) into\r\n   * smartJSON.\r\n   * \r\n   * NOTE: This algorithm is fully implemented within the SmartModel\r\n   *       base class.  With the polymorphic knowledge of which\r\n   *       properties to encode (see getEncodingProps()) it rarely\r\n   *       needs to be overwritten.\r\n   *\r\n   * REMEMBER: `this` is an object instance of SmartModel (because this is an\r\n   *           instance method).  In other words, this method only handles\r\n   *           SmartModel types (NOT primitives, or other objects, etc.)\r\n   *           As a result, the resulting JSON follows this pattern:\r\n   *\r\n   *           - the master definition of the BoilerScene pseudoClass (a type: Scene)\r\n   *             ```js\r\n   *               {\r\n   *                 smartType: 'Scene',\r\n   *                 smartPkg:  'core',\r\n   *                 id:        'BoilerScene',\r\n   *                 name:      'A Scene focused on the boiler components of our system',\r\n   *                 _size:     {width: 300, height: 250},\r\n   *                 comps: [\r\n   *                   {...smartObj...},\r\n   *                   {...smartObj...},\r\n   *                 ],\r\n   *               }\r\n   *             ```\r\n   *\r\n   *           - an instance of the BoilerScene pseudoClass (a type: BoilerScene)\r\n   *             ```js\r\n   *               {\r\n   *                 smartType: 'BoilerScene',\r\n   *                 smartPkg:  'ACME',\r\n   *                 id:        'BoilerScene',\r\n   *                 name:      'A Scene focused on the boiler components of our system',\r\n   *                 _size:     {width: 300, height: 250},\r\n   *                 .... NOTE: all other members are re-constituted from the master definition\r\n   *                            ... i.e. the pseudoClass\r\n   *               }\r\n   *             ```\r\n   *\r\n   * @returns {smartJSON} the smartJSON representation of self.\r\n   */\r\n  toSmartJSON() {\r\n\r\n    // prime our JSON by encoding our smart type information\r\n    // ... using SmartClassRef, this structure considers BOTH real types/classes AND pseudoClasses\r\n    const classRef = this.getClassRef();\r\n    const myJSON = {\r\n      smartType: classRef.getClassName(),\r\n      smartPkg:  classRef.getClassPkgName(),\r\n    };\r\n\r\n    // demark the pseudoClass MASTERs in our JSON, so they can be hydrated early\r\n    // ... see SmartPkg.fromSmartJSON()\r\n    if (PseudoClass.isPseudoClassMaster(this)) {\r\n      myJSON.isPseudoClassMaster = true;\r\n    }\r\n\r\n    // encode self's instance properties\r\n    const encodingProps = this.getEncodingProps(); // $FOLLOW-UP$: refine getEncodingProps() to support BOTH persistence (toSmartJSON()) -AND- pseudoClass construction (smartClone())\r\n    encodingProps.forEach( (propName) => {\r\n      myJSON[propName] = encodeRef(this[propName]); // accumulate our running JSON structure\r\n    });\r\n\r\n    // beam me up Scotty :-)\r\n    return myJSON;\r\n\r\n\r\n    // internal function that encodes the supplied `ref` into JSON.\r\n    // - this algorithm is needed to support additional types over and\r\n    //   above smartObjs\r\n    // - the algorithm is recursive, picking up all sub-references\r\n    //   (with depth)\r\n    // - ALL data types are handled (EXCEPT for class-based objects\r\n    //   that are NOT smartObjs):\r\n    //   * arrays\r\n    //   * plain objects (as in object literals)\r\n    //   * smartObjs (class-based object derivations of SmartModel)\r\n    //   * primitives (string, number, boolean, etc.)\r\n    //   * NOT SUPPORTED: class-based objects that are NOT smartObjs\r\n    function encodeRef(ref) {\r\n\r\n      // handle NO ref\r\n      // ... simply pass it through (null, undefined, etc. ... even false is OK :-)\r\n      if (!ref) {\r\n        return ref;\r\n      }\r\n\r\n      // handle arrays ... simply encode all array items\r\n      else if (Array.isArray(ref)) {\r\n        const  arrayJSON = ref.map( item => encodeRef(item) );\r\n        return arrayJSON;\r\n      }\r\n\r\n      // handle objects\r\n      // ... various object types (see below)\r\n      else if (isObject(ref)) {\r\n        \r\n        // handle smartObjs (class-based object derivations of SmartModel)\r\n        if (ref instanceof SmartModel) {\r\n          return ref.toSmartJSON();\r\n        }\r\n\r\n        // handle plain objects\r\n        // ... simply encode each item WITHOUT the smartObj connotation\r\n        else if (isPlainObject(ref)) {\r\n          const plainObjJSON = Object.entries(ref).reduce( (accum, [subRefName, subRef]) => {\r\n            accum[subRefName] = encodeRef(subRef);\r\n            return accum;\r\n          }, {} );\r\n          return plainObjJSON;\r\n        }\r\n\r\n        // UNSUPPORTED: class-based objects that are NOT smartObjs\r\n        // ... CONSIDER (as needed) adding support for common objects like Date, etc\r\n        //     OR more generically leverage any object that has the toJSON() method\r\n        else {\r\n          throw new Error(`***ERROR*** SmartModel.toSmartJSON() processing ref object of type ${ref.constructor.name} is NOT supported ... only SmartModel derivations support the smartJSON format :-(`);\r\n        }\r\n\r\n      }\r\n\r\n      // handle primitives (string, number, boolean, etc.)\r\n      // ... simply pas-through as-is\r\n      else {\r\n        return ref;\r\n      }\r\n\r\n    } // end of ... encodeRef(ref)\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * Return the classRef from which self was created.\r\n   *\r\n   * This is a meta object that accommodates type/class information\r\n   * for ALL smartObjects, unifying both real classes and pseudo\r\n   * classes!\r\n   *\r\n   * @returns {SmartClassRef} the classRef from which self was\r\n   * created.\r\n   */\r\n  getClassRef() {\r\n\r\n    // validation checks\r\n    // ... we use plain `this.constructor.name`, even though it may be mangled in production build\r\n    //     to avoid reliance on the value-added classRef we are accessing \"in this method\" :-)\r\n    const check = verify.prefix(`${this.constructor.name}.getClassRef() id:'${this.id}', name:'${this.name}') ... `);\r\n\r\n    // interpret pseudoClass instances\r\n    // ... once again, we interpret this structure directly\r\n    //     to avoid reliance on the value-added classRef we are accessing \"in this method\" :-)\r\n    if (this.pseudoClass && this.pseudoClass.isInstance() ) {\r\n\r\n      // the pseudoClass master (it's type) is maintained by the pseudo constructor\r\n      // ... see: SmartClassRef.createSmartObject(namedParams)\r\n      const pseudoClass = this.pseudoClass.pseudoClassMaster;\r\n      check(pseudoClass, 'this pseudoClass instance has NO pseudoClassMaster reference ... you must create it with SmartClassRef.createSmartObject()');\r\n\r\n      // the smartClassRef is maintained by the SmartPkg package manager\r\n      const pseudoClassRef = pseudoClass.smartClassRef;\r\n      check(pseudoClassRef, 'this pseudoClass instance has NO smartClassRef reference ... it must be managed by a SmartPkg');\r\n\r\n      return pseudoClassRef;\r\n    }\r\n\r\n    // interpret a real class instances (the only other case)\r\n    // ... NOTE: even pseudoClass Masters revert to their real class :-)\r\n\r\n    // the real class is defined by standard JavaScript constructs\r\n    const realClass = this.constructor;\r\n\r\n    // the smartClassRef is maintained by the SmartPkg package manager\r\n    const realClassRef = realClass.smartClassRef;\r\n    check(realClassRef, 'this real class instance has NO smartClassRef reference ... it must be managed by a SmartPkg');\r\n\r\n    return realClassRef;\r\n  }\r\n\r\n  /**\r\n   * Return self's \"real\" class name, used for diagnostic purposes\r\n   * (such as logs and errors).  The name is unmangled (even in\r\n   * production builds).\r\n   *\r\n   * NOTE: Any usage that requires interpretation of pseudo classes,\r\n   *       should use:\r\n   *         this.getClassRef().getClassName()\r\n   *       This is only available once package containers have been\r\n   *       registered (e.g. pkgManager.registerPkg(smartPkg)!\r\n   *\r\n   * @returns {string} self's \"real\" class name.\r\n   */\r\n  diagClassName() {\r\n    return this.constructor.unmangledName || this.constructor.name;\r\n  }\r\n\r\n  /**\r\n   * Polymorphically reveal self's properties that should be used to\r\n   * reconstitute an equivalent object.  This is used by:\r\n   *  - toSmartJSON() ... driving persistance\r\n   *  - smartClone() .... in duplicating objects\r\n   * With this polymorphic knowledge, these methods can be fully\r\n   * implemented by the SmartModel base class.\r\n   * \r\n   * Sub-classes can define their own properties, and include their\r\n   * base-class as follows:\r\n   * \r\n   * Sub-classes should accumulate their properties by including their\r\n   * parent classes, as follows:\r\n   *\r\n   *   ```js\r\n   *   class MyClass extends SmartModel {\r\n   *     getEncodingProps(): {\r\n   *       return [...super.getEncodingProps(), ...['my', 'props', 'too']];\r\n   *     }\r\n   *     ...\r\n   *   }\r\n   *   ```\r\n   * \r\n   * **Detail**:\r\n   *\r\n   * NOT ALL object properties should be encoded. There are cases\r\n   * where this state should be reconstituted from logic rather from\r\n   * the content driven by this method.  As an example, temporal\r\n   * working state (such as mounted visuals) should be omitted.\r\n   *\r\n   * Remember this encoding is used to reconstitute an equivalent\r\n   * object.\r\n   *\r\n   * In regard to pseudoClasses, the returned content will vary, based\r\n   * on whether self is the pseudoClass MASTER definition, or an\r\n   * INSTANCE of a pseudoClass.\r\n   * $FOLLOW-UP$: refine getEncodingProps() to support BOTH persistence (toSmartJSON()) -AND- pseudoClass construction (smartClone())\r\n   *              ... see: \"NO WORK (I THINK)\" in journal (1/20/2020)\r\n   *              We may need to interpret different usages in support of BOTH:\r\n   *                - persistence (toSmartJSON()) -AND-\r\n   *                - pseudoClass construction (smartClone())\r\n   *              - may supply param: enum CloningType: forCloning/forJSON\r\n   *\r\n   * @returns {string[]} self's property names that need to be encoded\r\n   * in our smartJSON representation.\r\n   */\r\n  getEncodingProps() {\r\n    return ['id', 'name'];\r\n  }\r\n\r\n  /**\r\n   * A static method that reconstitutes class-based objects (with\r\n   * depth) from smartJSON.  By class-based objects we mean it will have\r\n   * all the behavior (i.e. methods and state) of the original object.\r\n   *\r\n   * @param {JSON} smartJSON - the smartJSON structure representing\r\n   * the object(s) to create.\r\n   *\r\n   * @param {function} [extraClassResolver] - an optional\r\n   * function to supplement the standard class resolver, used in\r\n   * hydrating self-referencing pseudoClasses found in SmartPkg (ex:\r\n   * collage referencing scene instances).\r\n   *\r\n   * @returns {smartObject} a newly instantiated class-based object\r\n   * from the supplied smartJSON.\r\n   *\r\n   * @throws {Error} an Error is thrown when the process could not\r\n   * successfully complete.\r\n   */\r\n  static fromSmartJSON(smartJSON, extraClassResolver) {\r\n\r\n    // NOTE: We do NOT validate any characteristic of our supplied smartJSON,\r\n    //       because the way in which this algorithm is invoked (recursively),\r\n    //       it can truly be ANY type of data!\r\n    //       As an example, a sub elm of JSON could be a number or a string.\r\n\r\n    // handle NO smartJSON\r\n    // ... simply pass it through (null, undefined, etc. ... even false is OK :-)\r\n    if (!smartJSON) {\r\n      return smartJSON;\r\n    }\r\n\r\n    // handle arrays ... simply recursively decode all array items\r\n    else if (Array.isArray(smartJSON)) {\r\n      return smartJSON.map( item => SmartModel.fromSmartJSON(item, extraClassResolver) );\r\n    }\r\n\r\n    // handle JSON objects\r\n    // ... two types (see below)\r\n    else if (isPlainObject(smartJSON)) {\r\n\r\n      // handle smartObjs (class-based object derivations of SmartModel)\r\n      if (smartJSON.smartType) {\r\n\r\n        // define our namedProps to feed into our constructor (from smartJSON),\r\n        // recursively resolving each ref into real class-based objects (as needed)\r\n        const namedProps = {};\r\n        for (const key in smartJSON) {\r\n          const val = smartJSON[key];\r\n\r\n          // bypass selected keywords that are NOT part of the constructor namedProps\r\n          if (key === 'smartType' || key === 'smartPkg' || key === 'isPseudoClassMaster') { // type info is for decoding only\r\n            continue;\r\n          }\r\n\r\n          // recursively resolve each val into a real class-based object\r\n          namedProps[key] = SmartModel.fromSmartJSON(val, extraClassResolver);\r\n        }\r\n\r\n        // determine the classRef (could be a real class or a pseudoClass)\r\n        const classRef = getClassRefFromSmartJSON(smartJSON, extraClassResolver);\r\n\r\n        // instantiate a real class-based object using our value-added constructor\r\n        // that handles BOTH real classes and pseudoClasses\r\n        return classRef.createSmartObject(namedProps);\r\n      }\r\n\r\n      // handle plain NON class-based objects\r\n      // ... simply decode each item recursively\r\n      else {\r\n        const plainObj = Object.entries(smartJSON).reduce( (accum, [subName, subRef]) => {\r\n          accum[subName] = SmartModel.fromSmartJSON(subRef, extraClassResolver) ;\r\n          return accum;\r\n        }, {} );\r\n        return plainObj;\r\n      }\r\n    }\r\n    \r\n    // all other types are assumed to be immutable primitives, and simply passed through :-)\r\n    // ... string, number, etc.\r\n    // ... ALSO passes through class-based objects that are pre-hydrated\r\n    //     USED in SmartPkg.fromSmartJSON(smartJSON) with it's 2-phase hydration\r\n    return smartJSON;\r\n  }\r\n\r\n\r\n  /**\r\n   * An instance method that creates a deep copy of self.\r\n   * \r\n   * Within the cloning process, object creation is still based on\r\n   * class instantiation ... dynamically performing a `new\r\n   * Class(namedProps)`.  As such the supported object types are\r\n   * limited to smartObjects (SmartModel derivations), native types,\r\n   * arrays, and plain objects.  This heuristic applies not only to\r\n   * the top-level object, but also it's subordinate objects within\r\n   * the containment tree.\r\n   *\r\n   * NOTE: This algorithm is fully implemented within the SmartModel\r\n   *       base class.  With the polymorphic knowledge of which\r\n   *       properties to encode (see getEncodingProps()) it rarely\r\n   *       needs to be overwritten.\r\n   *\r\n   * @param {ObjectLiteral} [namedProps] - The optional named\r\n   * properties that when supplied will override the members of self\r\n   * that are to be deeply cloned).\r\n   *\r\n   * @returns {smartObject} a deep copy of self.\r\n   */\r\n  smartClone(overridingNamedProps={}) {\r\n\r\n    // clone our instance properties members by recursively drilling into smartClone() as needed\r\n    // ... handling arrays and object literals too\r\n    const encodingProps = this.getEncodingProps(); // $FOLLOW-UP$: refine getEncodingProps() to support BOTH persistence (toSmartJSON()) -AND- pseudoClass construction (smartClone())\r\n    const clonedProps = {};\r\n    encodingProps.forEach( (instanceName) => {\r\n      const instanceValue = this[instanceName]; // self's instance member\r\n      let   clonedValue   = undefined;          // resolved below\r\n\r\n      // defer to supplied override (when defined)\r\n      if (overridingNamedProps[instanceName]) {\r\n        clonedValue = 'placeholder';; // DEFENSIVE: use placeholder, resolved later (supporting overrides that are NOT part of our instance members)\r\n      }\r\n\r\n      // otherwise (when not overridden) deeply clone our instance value\r\n      else {\r\n\r\n        // clone SmartModel objects\r\n        if (instanceValue.smartClone) { // ... using a duck type check\r\n          clonedValue = instanceValue.smartClone();\r\n        }\r\n\r\n        // clone arrays, by cloning all array items\r\n        else if (Array.isArray(instanceValue)) {\r\n          clonedValue = instanceValue.map( item => item.smartClone ? item.smartClone() : item ); // ?? L8TR: for item: encapsulate reusable function to handle all types (as above/below)\r\n        }\r\n\r\n        // for NON SmartModel objects\r\n        else if (isObject(instanceValue)) {\r\n\r\n          // we support plain objects\r\n          if (isPlainObject(instanceValue)) {\r\n            clonedValue = Object.entries(instanceValue).reduce( (accum, [key, value]) => {\r\n              accum[key] = value.smartClone ? value.smartClone() : value; // ?? L8TR: for value: encapsulate reusable function to handle all types (as above/below)\r\n              return accum;\r\n            }, {} );\r\n          }\r\n\r\n          // all other objects are a problem\r\n          // ... CONSIDER (as needed) adding support for common objects like Date, etc\r\n          //     OR more generically leverage any object that has the toJSON() method\r\n          else {\r\n            throw new Error(`***ERROR*** SmartModel.smartClone() processing self object of type ${this.diagClassName()}, whose member object of type ${instanceValue.constructor.name} is NOT supported ... do NOT know how to clone this member :-(`);\r\n          }\r\n        }\r\n\r\n        // all other types pass-through as-is, supporting primitive types (string, number, etc.) \r\n        else {\r\n          clonedValue = instanceValue;\r\n        }\r\n      }\r\n\r\n      // accumulate our running clonedProps\r\n      clonedProps[instanceName] = clonedValue;\r\n\r\n    });\r\n    \r\n    // instantiate a new copy of self (our cloned copy)\r\n    const namedProps = {...clonedProps, ...overridingNamedProps}; // DEFENSIVE: overridingNamedProps take precedence -and- support overrides that are NOT part of our instance members\r\n    const clonedCopy = new this.constructor(namedProps);          // NOTE: our entire cloning and persistance architecture is based on SmartModel constructors using named parameters!\r\n\r\n    // that's all folks :-)\r\n    return clonedCopy;\r\n  }\r\n\r\n} // end of ... SmartModel class\r\nSmartModel.unmangledName = 'SmartModel';\r\n\r\n\r\n//******************************************************************************\r\n//*** Specifications\r\n//******************************************************************************\r\n\r\n/**\r\n * @typedef {Object} smartObject\r\n *\r\n * smartObject is an object instance that is a SmartModel derivation.  It\r\n * has the following characteristics:\r\n *\r\n * - The class constructor employs namedProps.  This is KEY aspect to\r\n *   make persistence work, because it supports data-driven injection\r\n *   from smartJSON.\r\n */\r\n\r\n\r\n/**\r\n * @typedef {JSON} smartJSON\r\n * \r\n * smartJSON is a self-contained JSON structure that can be\r\n * re-constituted back into a class-based object representation.\r\n * \r\n * - it supports object containment (i.e. objects with depth),\r\n *   allowing an entire object tree to be  JSONized\r\n * \r\n * - it is used for BOTH persistence and functional state management\r\n *   (in redux).\r\n * \r\n * - it is created by:\r\n *   ```\r\n *   SmartModel.prototype.toSmartJSON()\r\n *   ```\r\n * \r\n * - it is used to reconstitute class-based objects, via:\r\n *   ```\r\n *   SmartModel.fromSmartJSON(smartJSON)\r\n *   ```\r\n */\r\n\r\n/**\r\n * @typedef {ref} ObjectLiteral\r\n * \r\n * A plain object, such as an object literal ...  `{a: 1, b: 2}` used\r\n * in JSON structures, namedProps, etc.\r\n */\r\n\r\n\r\n\r\n//******************************************************************************\r\n//*** Internal Helper Functions\r\n//******************************************************************************\r\n\r\n/**\r\n * Return the classRef of the supplied smartJSON.\r\n *\r\n * @param {JSON} smartJSON - the smartJSON to interpret.\r\n *\r\n * @param {function} [extraClassResolver] - an optional\r\n * function to supplement the standard class resolver, used in\r\n * hydrating self-referencing pseudoClasses found in SmartPkg (ex:\r\n * collage referencing scene instances).\r\n *\r\n * @returns {SmartClassRef} the classRef of the supplied smartJSON\r\n *\r\n * @throws {Error} an Error is thrown when the class was not resolved.\r\n */\r\nfunction getClassRefFromSmartJSON(smartJSON, extraClassResolver) {\r\n\r\n  // glean our pkgName and className\r\n  const pkgName   = smartJSON.smartPkg;\r\n  const className = smartJSON.smartType;\r\n\r\n  // resolve our classRef\r\n  let classRef = null;\r\n\r\n  // ... use extraClassResolver (when supplied)\r\n  if (extraClassResolver) {\r\n    classRef = extraClassResolver(pkgName, className);\r\n    if (classRef) {\r\n      return classRef;\r\n    }\r\n  }\r\n\r\n  // ... use standard pkgManager class resolver\r\n  try {\r\n    classRef = pkgManager.getClassRef(pkgName, className);\r\n  }\r\n  catch (err) {\r\n    console.log(`***ERROR*** SmartModel.fromSmartJSON() could not resolve pkgName: ${pkgName} / className: ${className} \r\n... smartJSON: ${JSON.stringify(smartJSON, null, 2)}`);\r\n    throw err.defineAttemptingToMsg('hydrate smartObj (see logs for smartJson)');\r\n  }\r\n  return classRef;\r\n}\r\n","import SmartModel        from './SmartModel';\r\nimport verify            from 'util/verify';\r\nimport checkUnknownArgs  from 'util/checkUnknownArgs';\r\n\r\n/**\r\n * SmartScene is an abstract base class representing the graphical\r\n * perspective that visualizes a system (either in part or whole).\r\n */\r\nexport default class SmartScene extends SmartModel {\r\n\r\n  /**\r\n   * Create a SmartScene.\r\n   *\r\n   * **Please Note** this constructor uses named parameters.\r\n   *\r\n   * @param {string} id - the unique identifier of this scene.\r\n   * @param {string} [name=id] - the human interpretable name of this\r\n   * scene (DEFAULT to id). // ?? UNSURE if we want to DEFAULT this way\r\n   */\r\n  constructor({id, name, ...unknownArgs}={}) {\r\n    super({id, name});\r\n\r\n    // validate SmartScene() constructor parameters\r\n    const check = verify.prefix('SmartScene() constructor parameter violation: ');\r\n    // ... id/name validated by base class\r\n    // ... unknown arguments\r\n    checkUnknownArgs(check, unknownArgs, arguments);\r\n  }\r\n\r\n  /**\r\n   * Mount the visuals of this SmartScene, binding the graphics to the\r\n   * underlying canvas.\r\n   *\r\n   * Prior to `mount()` execution, the visualize-it object\r\n   * representation is very lightweight.\r\n   *\r\n   * @param {Konva.Stage} containingKonvaStage - The container of\r\n   * this scene (a Konva.Stage).\r\n   *\r\n   * @param {HtmlElm} containingHtmlElm - The overall containing\r\n   * HTML element (needed for dynamic resizing in Collage).\r\n   */\r\n  mount(containingKonvaStage, containingHtmlElm) {\r\n    throw new Error(`***ERROR*** SmartScene pseudo-interface-violation: ${this.diagClassName()}(id:${this.id}).mount() is an abstract method that MUST BE implemented!`);\r\n  }\r\n\r\n  /**\r\n   * Get/Set self's size ... {width, height}.\r\n   *\r\n   * @param {Size} [size] - the optional size that when\r\n   * supplied will set self's size (only for Scene - NOT Collage objects).\r\n   *\r\n   * @returns {Size|self} for getter: our current size,\r\n   * for setter: self (supporting chainable setters).\r\n   */\r\n  size(size) {\r\n    throw new Error(`***ERROR*** SmartScene pseudo-interface-violation: ${this.diagClassName()}(id:${this.id}).size() is an abstract method that MUST BE implemented!`);\r\n  }\r\n\r\n  /**\r\n   * Get/set our draggable scene flag.\r\n   *\r\n   * @param {boolean} [draggable] - the optional setting that when\r\n   * supplied will set the scene's draggability.\r\n   *\r\n   * @returns {boolean|self} for getter: our current draggable\r\n   * setting, for setter: self (supporting chainable setters).\r\n   */\r\n  // AI: OBSOLETE (based on current enableXxxMode() implementation)\r\n  draggable(draggable) {\r\n    throw new Error(`***ERROR*** SmartScene pseudo-interface-violation: ${this.diagClassName()}(id:${this.id}).draggable() is an abstract method that MUST BE implemented!`);\r\n  }\r\n}\r\nSmartScene.unmangledName = 'SmartScene';\r\n","import React              from 'react';\r\nimport verify             from 'util/verify';\r\nimport checkUnknownArgs   from 'util/checkUnknownArgs';\r\nimport {SnackbarProvider,\r\n        withSnackbar}     from 'notistack';\r\nimport {makeStyles}       from '@material-ui/core/styles';\r\nimport Button             from \"@material-ui/core/Button\";\r\nimport {isString,\r\n        isFunction}       from 'util/typeCheck';\r\n\r\n/* eslint-disable react/jsx-pascal-case */  // for: <NotifyAPI_withSnackBar>\r\n\r\n/**\r\n * The Notify component provides user notifications through a visual\r\n * message dialog.\r\n *\r\n * User messages are initiated through a programmatic invocation,\r\n * using the functional notify() API.  Supplied directives support\r\n * a variety of scenarios, including:\r\n *   - action buttons (for acknowledgment, or confirmation, etc.)\r\n *   - timed closure of the message\r\n *   - msg levels of success, info, warn, error (impacting the dialog style/color)\r\n *   - modal and non-modal\r\n *\r\n * Notify is the fundamental component which is the basis of various\r\n * UI notifications (i.e. Toasts, Alerts, Confirmations, etc.).  It\r\n * can be used stand-alone, or indirectly through various wrappers\r\n * (promoted through named exports).  The following functions are\r\n * summarized as follows:\r\n *\r\n * ```\r\n *                                                                 auto-close         variant-color      screen           ??TODO client\r\n *                 params:                         msg             duration           level              position         modal  actions\r\n *                 ============================    ==============  =================  =================  ===============  =====  ==========================\r\n *   - notify .... ({msg,                          msg to display  1-20 seconds       'success': green   'top-left'       false  [ {txt, [action]}, ... ]\r\n *                   duration=5,                   ... supports    null: close        'info':    blue    'top-center'     true   - where action: () => void\r\n *                   level='success',                  cr/lf             via          'warn':    yellow  'top-right'             - actions ARE OPTIONAL\r\n *                   position='bottom-left',                             client       'error':   red     'bottom-left'           - ALL actions auto close\r\n *                   modal=false,                                        action                          'bottom-center'  \r\n *                   actions=[]})                                        DEFAULT: OK                     'bottom-right'\r\n *                   \r\n *   - toast ..... ({msg, duration=5, actions})                    ditto              via toast.xyz()    'bottom-left'    false  ditto\r\n *   - alert ..... ({msg, actions})                                null               via alert.xyz()    'top-center'     true   ditto\r\n *   - confirm ... ({msg, actions})                                null               via confirm.xyz()  'top-right'      true   requires client action(s)\r\n * ```\r\n *\r\n * **Setup**:\r\n *\r\n *   The Notify component is tightly controlled as a single instance\r\n *   within an entire app.  Therefore, one and only one Notify\r\n *   instance must be pre-instantiated (initially hidden) somewhere at\r\n *   the top-level of your app.\r\n *\r\n *     ```\r\n *       <React.Fragment>\r\n *         <Notify/>\r\n *         {app content}\r\n *       </React.Fragment>\r\n\r\n *       -or-\r\n *       <Notify>\r\n *         {app content}\r\n *       <Notify>\r\n *     ```\r\n * \r\n * **Usage**:\r\n * \r\n *   see docs below: `notify()`, `toast()`, `alert()`, `confirm()`\r\n * \r\n * **Module Note**:\r\n *\r\n *   This utility is housed in a lower-case `notify.js` module,\r\n *   because the general public API is a series of lower-case \"named\r\n *   exported\" functions: `notify()`, `toast()`, `alert()`,\r\n *   `confirm()`.\r\n * \r\n *   There is a \"default exported\" Notify component (which is somewhat\r\n *   unusual to find in a lower-case module), but is only used once at\r\n *   app startup, so is therefore justified (in this case).\r\n */\r\n\r\n//***\r\n//*** the top-level Notify component conveniently auto-injects the notistack <SnackbarProvider>\r\n//*** (required for our programmatic interface)\r\n//***\r\n\r\nexport default function Notify(props) {\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <SnackbarProvider maxSnack={3} dense={true} className={classes.variantSuccess}>\r\n      <NotifyAPI_withSnackBar>\r\n        {props.children}\r\n      </NotifyAPI_withSnackBar>\r\n    </SnackbarProvider>\r\n  );\r\n}\r\n\r\n// apply snackbar variant style changes in support cr/lf\r\n// ... via: whiteSpace of 'pre-line'\r\n// ... this honors cr/lf within our snackbar items\r\nconst useStyles = makeStyles( theme => ({\r\n  variantSuccess: {\r\n    whiteSpace: 'pre-line',\r\n  },\r\n  variantInfo: {\r\n    whiteSpace: 'pre-line',\r\n  },\r\n  variantWarning: {\r\n    whiteSpace: 'pre-line',\r\n  },\r\n  variantError: {\r\n    whiteSpace: 'pre-line',\r\n  },\r\n}) );\r\n\r\n\r\n//***\r\n//*** keep track of our one-and-only instance\r\n//***\r\n\r\nlet _singleton = null;\r\n\r\n\r\n//***\r\n//*** the NotifyAPI component provides our internal programmatic API\r\n//*** (see .display()), used by notify(), toast(), etc.\r\n//***\r\n\r\nclass NotifyAPI extends React.Component {\r\n\r\n  static propTypes = { // expected component props\r\n  }\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    // keep track of our one-and-only instance\r\n    verify(!_singleton, '<Notify> only ONE Notify instance should be instantiated in the app (at the top-level).');\r\n    _singleton = this;\r\n  }\r\n\r\n  // display() is the interface point to our programmatic API (notify(), toast(), etc.)\r\n  display({msg,\r\n           duration=5, // auto close duration in seconds ... DEFAULT: 5 ... use null - manual close (via actions [default to OK])\r\n           level='success',\r\n           position='bottom-left',\r\n           modal=false,\r\n           actions=[],\r\n           ...unknownArgs}={}) {\r\n\r\n    // validate the named parameters (i.e. the directive)\r\n    const check = verify.prefix('notify() parameter violation: '); // NOTE: we pretend we are: notify() (the public access point)\r\n\r\n    // ... msg\r\n    check(msg, 'directive.msg is required');\r\n    check(isString(msg),  'msg must be a string');\r\n\r\n    // ... duration\r\n    if (duration !== null) {\r\n      check(duration >= 1 && duration <= 20, `supplied duration (${duration}) must be a number between 1 and 20 (inclusive).`);\r\n    }\r\n\r\n    // ... level\r\n    check(levelVariant[level], `invalid level: '${level}', expecting one of ${Object.keys(levelVariant)}.`);\r\n\r\n    // ... position\r\n    check(anchorOrigin[position], `invalid position: '${position}', expecting one of ${Object.keys(anchorOrigin)}.`);\r\n\r\n    // ... modal\r\n    check(modal===true || modal===false, `supplied modal (${modal}) must be a boolean true/false.`);\r\n\r\n    // ... actions\r\n    check(actions,                'actions must be an Action[] array'); // defaulted to [] ... this is user error of like null or something\r\n    check(Array.isArray(actions), 'actions must be an Action[] array');\r\n    actions.forEach( (action, indx) => {\r\n      check(action.txt,           `action[${indx}].txt is required`);\r\n      check(isString(action.txt), `action[${indx}].txt be a string ... NOT: ${action.txt}`);\r\n      if (action.action) {\r\n        check(isFunction(action.action), `action[${indx}].action (when supplied) must be a function ... NOT: ${action.action}`);\r\n      }\r\n    });\r\n\r\n    // ... unknown arguments\r\n    checkUnknownArgs(check, unknownArgs, arguments);\r\n\r\n    // maintain our display duration\r\n    const autoHideDuration = duration ? duration*1000 : null; // convert to seconds ... null indicates manual close (via actions [default to OK])\r\n\r\n    // interpret any client-supplied actions\r\n\r\n    // ... provide a default OK when NO duration and NO actions are defined\r\n    //     NOTE: When NO duration is supplied, only way to close notification is through an action!\r\n    //           If client has NO actions, we will supply one (a default OK)\r\n    if (!duration && actions.length===0) {\r\n      actions = [{txt: 'OK'}]; // do NOT mutate client-supplied actions\r\n    }\r\n\r\n    // ... maintain a actions callback map indexed by .txt (default to identityFn)\r\n    const actionsCbMap = actions.reduce( (map, action) => {\r\n      map[action.txt] = action.action || identityFn;\r\n      return map;\r\n    }, {} );\r\n    // ... define our actionButtons (supplied to enqueueSnackbar) ... empty array is ignored\r\n    const actionButtons = actions.map( (action, indx) => <Button key={indx} color=\"default\" size=\"small\">{action.txt}</Button> );\r\n\r\n\r\n    // KEY: display the notification ... using notistack's enqueueSnackbar(...)\r\n    const snackbarKey = this.props.enqueueSnackbar(msg, {\r\n      variant: levelVariant[level],\r\n      autoHideDuration,\r\n      anchorOrigin: anchorOrigin[position],\r\n      action: actionButtons,\r\n      onClick: (e) => {\r\n        // close this notification\r\n        this.props.closeSnackbar(snackbarKey);\r\n\r\n        // invoke client-supplied callback\r\n        // ... on delay to make any client-notification transitions more intuitive\r\n        const clientAction = actionsCbMap[e.target.textContent];\r\n        setTimeout( () => clientAction(), 400);\r\n      },\r\n    });\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {this.props.children}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n// our level variant (indirectly defines color -and- provides level validation)\r\nconst levelVariant = { // color NOT used\r\n  success: 'success',\r\n  info:    'info',\r\n  warn:    'warning',\r\n  error:   'error',\r\n};\r\n\r\n// our anchorOrigin, indexed by position keyword\r\nconst anchorOrigin = {\r\n  'top-left':      { vertical: 'top',    horizontal: 'left'   },\r\n  'top-center':    { vertical: 'top',    horizontal: 'center' },\r\n  'top-right':     { vertical: 'top',    horizontal: 'right'  },\r\n  'bottom-left':   { vertical: 'bottom', horizontal: 'left'   },\r\n  'bottom-center': { vertical: 'bottom', horizontal: 'center' },\r\n  'bottom-right':  { vertical: 'bottom', horizontal: 'right'  },\r\n};\r\n\r\n// a convenient identity function\r\nconst identityFn = (p)=>p;\r\n\r\n\r\n//***\r\n//*** the withSnackbar() HOC provides access to the Snackbar run-time methods:\r\n//***   + props.enqueueSnackbar(...)\r\n//***   + props.closeSnackbar(...)\r\n//*** \r\n\r\nconst NotifyAPI_withSnackBar = withSnackbar(NotifyAPI);\r\nNotifyAPI_withSnackBar.displayName = 'NotifyAPI_withSnackBar'; // ... for react debugging (NOT accomplished in withSnackbar() ... grrrrr)\r\n\r\n\r\n\r\n/**\r\n * Display a user notification - the general purpose access point,\r\n * using named directives.\r\n *\r\n * @param {string} directive.msg the message to be displayed (cr/lf\r\n * are supported).\r\n *\r\n * @param {number} [directive.duration] the number of seconds to\r\n * display the msg before automatically closing the dialog.  If not\r\n * supplied, the dialog must be explicitly closed through a button\r\n * click.\r\n *\r\n * @param {string} [directive.level] the category level associated\r\n * with this notification (impacting background color).  One of:\r\n *  - 'success' ... the default\r\n *  - 'info'\r\n *  - 'warn'\r\n *  - 'error'\r\n *\r\n * @param {string} [directive.position] the position to display this\r\n * notification. One of:\r\n *  - 'top-left'\r\n *  - 'top-center'\r\n *  - 'top-right'\r\n *  - 'bottom-left' ... the default\r\n *  - 'bottom-center'\r\n *  - 'bottom-right'\r\n *\r\n * @param {boolean} [directive.modal] an indicator as to whether the\r\n * notification dialog is modal (true) or not (false) the default.\r\n *\r\n * @param {Action[]} [directive.actions] one or more actions -\r\n * button/action combinations.  The required Action.txt defines the\r\n * button label, and the Action.action is an option client-supplied\r\n * callback.  Each defined action will implicitly close the dialog,\r\n * in addition to invoking the optional client-supplied callback.\r\n *\r\n * NOTE: When NO duration and NO actions are defined, a default OK \r\n *       action is injected that will close the dialog when clicked.\r\n *\r\n * Example:\r\n * ```\r\n *   notify({\r\n *     msg:      'You have un-saved changes.\\nif you leave, your changes will NOT be saved!',\r\n *     duration: seconds,\r\n *     level:    'warn',\r\n *     position: 'bottom-right',\r\n *     modal:    true,\r\n *     actions: [\r\n *       { txt: 'Discard Changes', action: () => ...callback-logic-here... },\r\n *       { txt: 'Go Back' }\r\n *     ]\r\n *   });\r\n * ```\r\n */\r\nexport function notify(directive) {\r\n  // validate that an <Notify> has been instantiated\r\n  verify(_singleton, 'notify(): NO <Notify> instance has been established in the app root.');\r\n\r\n  // pass-through to our instance method\r\n  _singleton.display(directive);\r\n}\r\n\r\n\r\n/**\r\n * The toast() function is a convenience wrapper around notify() that\r\n * displays the supplied msg as a \"toast\" ... a non-modal dialog\r\n * located at the bottom-left of the screen, which is typically closed\r\n * after 5 seconds.\r\n *\r\n * Various levels can be accomplished via toast.success(),\r\n * toast.info(), toast.warn(), toast.error() ... all of which have the\r\n * same signature.  NOTE: toast() is the same as toast.success().\r\n *\r\n * @param {string} directive.msg the message to be displayed (cr/lf are\r\n * supported).\r\n *\r\n * @param {number} [directive.duration] the number of seconds before\r\n * automatically closing the dialog (default: 5).  A null defers to\r\n * supplied actions to close (which in turn defaults to an OK).\r\n *\r\n * @param {Action[]} [directive.actions] one or more actions -\r\n * button/action combinations.  The required Action.txt defines the\r\n * button label, and the Action.action is an option client-supplied\r\n * callback.  Each defined action will implicitly close the dialog,\r\n * in addition to invoking the optional client-supplied callback.\r\n *\r\n * NOTE: When NO duration and NO actions are defined, a default OK \r\n *       action is injected that will close the dialog when clicked.\r\n *\r\n * Example:\r\n * ```\r\n *\r\n *   toast({ msg:'Hello World' });    // will close in 6 secs\r\n *\r\n *   toast.error({ msg:     `An error occurred: ${err}`, \r\n *                 duration: null }); // OK button will close\r\n *\r\n *   toast.warn({                     // will close in 3 secs -OR- when \"undo\" is clicked\r\n *     msg: 'Your item was deleted', \r\n *     actions: [\r\n *       { txt: 'undo', action: () => ...callback-logic-here... },\r\n *     ]\r\n *    })\r\n * ```\r\n */\r\nfunction toastBase({msg, duration=5, actions, ...unknownArgs}, level) {\r\n\r\n  // validate toast-specific characteristics (other validation done by notify())\r\n  const funcQual = level ? `.${level}` : '';\r\n  const check    = verify.prefix(`toast${funcQual}() parameter violation: `);\r\n\r\n  // NOTE: as a general rule, validations are provided by the root notify()\r\n  // checking msg explicitly avoids unknownArgKeys weirdness (below) when msg is passed as a non-named param\r\n  check(msg, 'msg named parameter is required');\r\n\r\n  const unknownArgKeys = Object.keys(unknownArgs);\r\n  check(unknownArgKeys.length===0,  `unrecognized named parameter(s): ${unknownArgKeys}`);\r\n\r\n  // defer to our general-purpose notify() utility\r\n  notify({\r\n    msg,\r\n    duration,\r\n    level,    // NOTE: level is defaulted by the root notify()\r\n    position: 'bottom-left',\r\n    modal: false,\r\n    actions,\r\n  });\r\n}\r\nexport function  toast(directive) { toastBase(directive);          }\r\ntoast.success  = function(directive) { toastBase(directive, 'success'); }\r\ntoast.info     = function(directive) { toastBase(directive, 'info');    }\r\ntoast.warn     = function(directive) { toastBase(directive, 'warn');    }\r\ntoast.error    = function(directive) { toastBase(directive, 'error');   }\r\n\r\n\r\n/**\r\n * The alert() function is a convenience wrapper around notify() that\r\n * displays the supplied msg as a \"alert\" ... a modal dialog located\r\n * at the top-center of the screen, that must be acknowledged by the\r\n * user with either the default OK button, or a client-supplied\r\n * action.\r\n *\r\n * Various levels can be accomplished via alert.success(),\r\n * alert.info(), alert.warn(), alert.error() ... all of which have the\r\n * same signature.  NOTE: alert() is the same as alert.success().\r\n *\r\n * @param {string} directive.msg the message to be displayed (cr/lf\r\n * are supported).\r\n *\r\n * @param {Action[]} [directive.actions] one or more actions -\r\n * button/action combinations.  The required Action.txt defines the\r\n * button label, and the Action.action is an option client-supplied\r\n * callback.  Each defined action will implicitly close the dialog,\r\n * in addition to invoking the optional client-supplied callback.\r\n *\r\n * NOTE: When NO actions are defined, a default OK  action is injected\r\n *       that will close the dialog when clicked.\r\n *\r\n * Example:\r\n * ```\r\n *   alert({ msg:'Hello World' });\r\n *   alert.warn({\r\n *     msg:`Your limit (${limit}) has been reached!`\r\n *     actions: [\r\n *       { txt: 'increase', action: () => ...callback-logic-here... },\r\n *     ]\r\n *   });\r\n * ```\r\n */\r\nfunction alertBase({msg, actions, ...unknownArgs}, level) {\r\n\r\n  // validate alert-specific characteristics (other validation done by notify())\r\n  const funcQual = level ? `.${level}` : '';\r\n  const check    = verify.prefix(`alert${funcQual}() parameter violation: `);\r\n\r\n  // NOTE: as a general rule, validations are provided by the root notify()\r\n  // checking msg explicitly avoids unknownArgKeys weirdness (below) when msg is passed as a non-named param\r\n  check(msg, 'msg named parameter is required');\r\n\r\n  const unknownArgKeys = Object.keys(unknownArgs);\r\n  check(unknownArgKeys.length===0,  `unrecognized named parameter(s): ${unknownArgKeys}`);\r\n\r\n  // defer to our general-purpose notify() utility\r\n  notify({\r\n    msg,\r\n    duration: null, // force user acknowledgment\r\n    level,          // NOTE: level is defaulted by the root notify()\r\n    position: 'top-center',\r\n    modal: true,\r\n    actions,\r\n  });\r\n}\r\nexport function  alert(directive) { alertBase(directive);          }\r\nalert.success  = function(directive) { alertBase(directive, 'success'); }\r\nalert.info     = function(directive) { alertBase(directive, 'info');    }\r\nalert.warn     = function(directive) { alertBase(directive, 'warn');    }\r\nalert.error    = function(directive) { alertBase(directive, 'error');   }\r\n\r\n\r\n/**\r\n * The confirm() function is a convenience wrapper around notify()\r\n * that displays the supplied msg as a \"confirmation\" ... a modal\r\n * dialog located at the bottom-right of the screen, that must be\r\n * acknowledged through client-supplied action buttons.\r\n *\r\n * Various levels can be accomplished via confirm.success(),\r\n * confirm.info(), confirm.warn(), confirm.error() ... all of which\r\n * have the same signature.  NOTE: confirm() is the same as\r\n * confirm.success().\r\n *\r\n * @param {string} directive.msg the message to be displayed (cr/lf\r\n * are supported).\r\n *\r\n * @param {Action[]} directive.actions one or more actions - button/action\r\n * combinations.  The required Action.txt defines the button label,\r\n * and the Action.action is an option client-supplied callback.  Each\r\n * defined action will implicitly close the dialog, in addition to\r\n * invoking the optional client-supplied callback.\r\n *\r\n * Example:\r\n * ```\r\n *   confirm.warn({ \r\n *     msg: 'This is an confirm warning.\\nYou must explicitly acknowledge it.', \r\n *     actions: [\r\n *       { txt: 'Discard Changes', action: () => console.log('xx Discarding Changes') },\r\n *       { txt: 'Go Back' }\r\n *     ]\r\n *   });\r\n * ```\r\n */\r\nfunction confirmBase({msg, actions, ...unknownArgs}, level) {\r\n\r\n  // validate confirm-specific characteristics (other validation done by notify())\r\n  const funcQual = level ? `.${level}` : '';\r\n  const check    = verify.prefix(`confirm${funcQual}() parameter violation: `);\r\n\r\n  // NOTE: as a general rule, validations are provided by the root notify()\r\n  // checking msg explicitly avoids unknownArgKeys weirdness (below) when msg is passed as a non-named param\r\n  check(msg, 'msg named parameter is required');\r\n\r\n  // confirm() requires client-supplied actions\r\n  check(actions && actions.length>0, 'client-specific actions are required.');\r\n\r\n  const unknownArgKeys = Object.keys(unknownArgs);\r\n  check(unknownArgKeys.length===0,  `unrecognized named parameter(s): ${unknownArgKeys}`);\r\n\r\n  // defer to our general-purpose notify() utility\r\n  notify({\r\n    msg,\r\n    duration: null, // force user acknowledgment\r\n    level,          // NOTE: level is defaulted by the root notify()\r\n    position: 'top-right',\r\n    modal: true,\r\n    actions,\r\n  });\r\n}\r\nexport function  confirm(directive) { confirmBase(directive);          }\r\nconfirm.success  = function(directive) { confirmBase(directive, 'success'); }\r\nconfirm.info     = function(directive) { confirmBase(directive, 'info');    }\r\nconfirm.warn     = function(directive) { confirmBase(directive, 'warn');    }\r\nconfirm.error    = function(directive) { confirmBase(directive, 'error');   }\r\n","import Konva             from 'konva';\r\nimport PseudoClass       from './PseudoClass';\r\nimport SmartScene        from './SmartScene';\r\nimport {ancestorOfLayer} from './konvaUtil';\r\nimport verify            from 'util/verify';\r\nimport checkUnknownArgs  from 'util/checkUnknownArgs';\r\nimport {isNumber}        from 'util/typeCheck';\r\nimport {toast}           from 'util/notify';\r\n\r\n/**\r\n * Scene is a SmartScene derivation that models a single Scene to be\r\n * displayed/visualized.\r\n *\r\n * A Scene represents a graphical perspective that visualizes a system\r\n * (either in part or whole).\r\n *\r\n * - a scene contains visual components, arranged in a way that\r\n *   resembles a system\r\n *\r\n * - a scene can DIRECTLY mange it's x/y properties (this is used in\r\n *   the context of a Collage, where multiple scenes are offset within\r\n *   a viewport).\r\n *\r\n * - a scene DIRECTLY manges the width/height properties\r\n *\r\n * - different scenes may visualize various aspects of a system (for\r\n *   example a functional breakdown)\r\n *   * each scene INTERNALLY correlates to a separate Konva.Layer\r\n *\r\n * - FUTURE: support of user-defined functional layers:\r\n *   - scene may be further sub-divided into MULTIPLE functional layers\r\n *   - components of a scene will belong to one of these functional layers\r\n *     ... Quest: is this a direct containment, or some logical tagging?\r\n *   - this allows the visualization of these functional layers to be toggled on/off\r\n *\r\n * - FUTURE: Animation Consideration:\r\n *   - internally each scene (and their functional layers) is\r\n *     sub-divided into two Konva layers:\r\n *     - a static layer\r\n *     - an animation layer\r\n *     > NEEDS WORK: may want to do things in our static layer (like change component color)\r\n *\r\n * **NOTE**: Scene objects are pseudoClasses.  In other words Scene\r\n *           instances are considered logical types.  Take for example\r\n *           `Foo`: a Scene instance with an id of `Foo`.  The master\r\n *           `Foo` object can be defined and edited, however `Foo`\r\n *           instances (copies of the `Foo` object) may be may created\r\n *           and referenced many times within the various Collages.\r\n */\r\nexport default class Scene extends SmartScene {\r\n\r\n  /**\r\n   * Create a Scene.\r\n   *\r\n   * **Please Note** this constructor uses named parameters.\r\n   *\r\n   * @param {string} id - the unique identifier of this scene.\r\n   * @param {string} [name=id] - the human interpretable name of this\r\n   * scene (DEFAULT to id). // ?? UNSURE if we want to DEFAULT this way\r\n   *\r\n   * @param {SmartComp[]} comps - the set of components (SmartComp) that \r\n   * make up this scene (logically our display list).\r\n   *\r\n   * @param {int} [x=0] - the optional x offset of this scene within it's container (used by Collage container - managing multiple Scenes)\r\n   * @param {int} [y=0] - the optional y offset of this scene within it's container (used by Collage container - managing multiple Scenes)\r\n   *\r\n   * @param {int} width - the width of this scene (mastered in scene).\r\n   * @param {int} height - the height of this scene (mastered in scene).\r\n   */\r\n  constructor({id,\r\n               name,\r\n               comps,\r\n               x=0,\r\n               y=0,\r\n               _size, // INTERNAL USE (for rehydration) takes precedence over width/height: _size: {width, height}\r\n               width, // NOTE: we keep as width/height rather than size: {width, height} (for now) ... CONSISTENT with Konva.Stage API (not that that matters ... it is an internal)\r\n               height,\r\n               ...unknownArgs}={}) {\r\n\r\n    super({id, name});\r\n\r\n    // validate Scene() constructor parameters\r\n    const check = verify.prefix(`${this.diagClassName()}() constructor parameter violation: `);\r\n\r\n    // ... id/name validated by base class\r\n\r\n    // ... comps\r\n    check(comps,                'comps is required');\r\n    check(Array.isArray(comps), 'comps must be a SmartComp[] array');\r\n\r\n    // ... x\r\n    check(isNumber(x), `x must be a number (when supplied), NOT: ${x}`);\r\n\r\n    // ... y\r\n    check(isNumber(y), `y must be a number (when supplied), NOT: ${y}`);\r\n\r\n    // ... INTERNAL USE (for rehydration) takes precedence over width/height: _size: {width, height}\r\n    if (_size) { \r\n      width  = _size.width;\r\n      height = _size.height;\r\n    }\r\n\r\n    // ... width\r\n    check(width,                   'width is required');\r\n    check(Number.isInteger(width), `width must be an integer, NOT: ${width}`);\r\n    check(width>0,                 `width must be a positive integer, NOT: ${width}`);\r\n\r\n    // ... height\r\n    check(height,                   'height is required');\r\n    check(Number.isInteger(height), `height must be an integer, NOT: ${height}`);\r\n    check(height>0,                 `height must be a positive integer, NOT: ${height}`);\r\n\r\n    // ... unknown arguments\r\n    checkUnknownArgs(check, unknownArgs, arguments);\r\n\r\n    //***\r\n    //*** maintain self state (instance vars)\r\n    //***\r\n\r\n    // Scene objects are pseudoClasses (see NOTE above)\r\n    this.pseudoClass = new PseudoClass();\r\n\r\n    // retain parameters in self\r\n    this.x     = x;\r\n    this.y     = y;\r\n    this._size = {width, height}; // NOTE: we use _size so as NOT to clash with size() method\r\n    this.comps = comps;\r\n\r\n    // maintain our parentage\r\n    this.comps.forEach( (comp) => comp.setParent(this) );\r\n  }\r\n\r\n  // support persistance by encoding needed props of self\r\n  // \r\n  // $FOLLOW-UP$: refine getEncodingProps() to support BOTH persistence (toSmartJSON()) -AND- pseudoClass construction (smartClone())\r\n  //              ... see: \"NO WORK (I THINK)\" in journal (1/20/2020)\r\n  //              We may need to interpret different usages in support of BOTH:\r\n  //                - persistence (toSmartJSON()) -AND-\r\n  //                - pseudoClass construction (smartClone())\r\n  //              - may supply param: enum CloningType: forCloning/forJSON\r\n  getEncodingProps() {\r\n\r\n    // NOTE: in all cases, id/name handled by super\r\n\r\n    // L8TR: see note above\r\n    //? if (cloningType === CloningType.forCloning) {\r\n    //?   return [...super.getEncodingProps(), ...['pseudoClass', 'x', 'y', '_size', 'comps']]; // ? if we do this, must handle pseudoClass in constructor params\r\n    //? }\r\n    //? else if (cloningType === CloningType.forJSON) {\r\n    //? }\r\n\r\n    // NOTE: currently pseudoClass is re-constituted via construction (above)\r\n    //       and tweaked by SmartModel utils ... hmmm\r\n\r\n    if (this.pseudoClass.isType()) { // the master TYPE DEFINITION persists EVERYTHING\r\n      return [...super.getEncodingProps(), ...['x', 'y', '_size', 'comps']];\r\n    }\r\n    else {                           // instances of this pseudoClass omit props that are part of the TYPE (will be re-constituted from master TYPE DEFINITION)\r\n      return [...super.getEncodingProps(), ...['x', 'y', '_size']];\r\n    }\r\n  }      \r\n\r\n  \r\n  /**\r\n   * Enable self's \"view\" DispMode (used in top-level objects targeted by a tab).\r\n   *\r\n   * NOTE: this is also invoked prior to other display modes, as a neutral reset :-)\r\n   */\r\n  enableViewMode() {\r\n    // clear everything from any of the other DispModes\r\n    // ... sequentially follow each item in the \"other\" DispModes\r\n    this.konvaSceneLayer.getChildren().each( (konvaComp, n) => konvaComp.draggable(false) );\r\n    this.konvaSceneLayer.off('dragend');\r\n    this.containingKonvaStage.off('click tap');\r\n    this.containingKonvaStage.find('Transformer').destroy(); // remove any outstanding transformers\r\n    this.konvaSceneLayer.getChildren().each( (konvaComp, n) => konvaComp.off('transformend') );\r\n    this.konvaSceneLayer.draw();\r\n  }\r\n\r\n  /**\r\n   * Enable self's \"edit\" DispMode (used in top-level objects targeted by a tab).\r\n   */\r\n  enableEditMode() {\r\n\r\n    // prevent edit mode when containing package cannot be persisted\r\n    // ... ex: when the package contains code\r\n    const pkg = this.getPackage();\r\n    if (!pkg.canPersist()) {\r\n      toast.warn({msg: `The \"${this.getName()}\" scene is NOT EDITABLE ` + \r\n                       `... normally scenes can be edited, however it belongs to the \"${pkg.getPkgDesc()}\" package which ` +\r\n                       `contains code (therefore you would not be able to save your changes).`});\r\n      return;\r\n    }\r\n\r\n    //***\r\n    //*** enable dragging ... to all top-level konvaComps\r\n    //***\r\n\r\n    // draggable: enable (propagate into each top-level shape/group)\r\n    this.konvaSceneLayer.getChildren().each( (konvaComp, n) => konvaComp.draggable(true) );\r\n\r\n    // monitor events at the Konva Scene Layer level (using Event Delegation and Propagation)\r\n    // ... dragend: monitor x/y changes - syncing KonvaLayer INTO our Scene SmartObject\r\n    this.konvaSceneLayer.on('dragend', (e) => {\r\n      // console.log(`xx Konva Scene Layer dragend: index: ${e.target.index}, id: ${e.target.id()}, name: ${e.target.name()} x: ${e.target.x()}, y: ${e.target.y()} ... e:\\n`, e);\r\n\r\n      // locate our component matching the target Konva.Group\r\n      // ... we correlate the id's between Konva/SmartObject\r\n      const comp = this.comps.find( (comp) => comp.id === e.target.id() );\r\n      // console.log(`xx Konva Scene Layer dragend: matching comp: `, comp);\r\n\r\n      // sync the modified x/y\r\n      comp.x = e.target.x();\r\n      comp.y = e.target.y();\r\n    });\r\n\r\n\r\n    //***\r\n    //*** enable transformations ... to all top-level konvaComps\r\n    //***\r\n\r\n    // monitor component selection via click events\r\n    // NOTE: a click event will not trigger on Layer but on the Stage object instead\r\n    //       ... see: https://konvajs.org/docs/events/Stage_Events.html\r\n    this.containingKonvaStage.on('click tap', (e) => {\r\n\r\n      // console.log(`xx TRANSFORM: target:\\n`, e.target);\r\n\r\n      // on void click: remove all transformers\r\n      if (e.target === this.containingKonvaStage) {\r\n        this.containingKonvaStage.find('Transformer').destroy();\r\n        this.konvaSceneLayer.draw();\r\n        return;\r\n      }\r\n\r\n      // remove old transformers\r\n      this.containingKonvaStage.find('Transformer').destroy();\r\n\r\n      // our real target it the top-level group (the konva representation of our component)\r\n      const konvaComp = ancestorOfLayer(e.target);\r\n\r\n      // create/manage new transformer\r\n      var transformer = new Konva.Transformer();\r\n      this.konvaSceneLayer.add(transformer);\r\n      transformer.attachTo(konvaComp);\r\n      this.konvaSceneLayer.draw();\r\n\r\n      // sync Konva changes to Object Model\r\n      konvaComp.on('transformend', (e) => { // ... NOTE: updates x/y/rotation/scaleX/scaleY ... NOT width/height at all\r\n        // locate our component matching the target Konva.Group\r\n        // ... we correlate the id's between Konva/SmartObject\r\n        const comp = this.comps.find( (comp) => comp.id === e.target.id() );\r\n        // console.log(`xx Konva Scene Layer transformend: x: ${e.target.x()}, y: ${e.target.y()}, rotation: ${e.target.rotation()}, scaleX: ${e.target.scaleX()}, scaleY: ${e.target.scaleY()},  ... matching comp: `, comp);\r\n\r\n        // sync the modified x/y/rotation/scaleX/scaleY\r\n        comp.x        = e.target.x();\r\n        comp.y        = e.target.y();\r\n        comp.rotation = e.target.rotation();\r\n        comp.scaleX   = e.target.scaleX();\r\n        comp.scaleY   = e.target.scaleY();\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Enable self's \"animate\" DispMode (used in top-level objects targeted by a tab).\r\n   */\r\n  enableAnimateMode() {\r\n    // yet to do\r\n  }\r\n\r\n  \r\n  /**\r\n   * Verify self has been mounted.\r\n   * @param {string} [method] - the method name on which behalf we are checking.\r\n   */\r\n  checkMounted(method) {\r\n    verify(this.konvaSceneLayer, `${this.diagClassName()}.${method}() can only be invoked after mounting.`);\r\n  }\r\n\r\n  /**\r\n   * Mount the visuals of this scene, binding the graphics to the\r\n   * underlying canvas.\r\n   *\r\n   * Prior to `mount()` execution, the visualize-it object\r\n   * representation is very lightweight.\r\n   *\r\n   * @param {Konva.Stage} containingKonvaStage - the container of\r\n   * this scene (a Konva.Stage).\r\n   *\r\n   * @param {HtmlElm} containingHtmlElm - The overall containing\r\n   * HTML element (needed for dynamic resizing in Collage).\r\n   */\r\n  mount(containingKonvaStage, containingHtmlElm) { \r\n\r\n    // retain our stage for selected event processing\r\n    this.containingKonvaStage = containingKonvaStage;\r\n\r\n    // NOTE: containingHtmlElm is currently NOT needed for Scene\r\n\r\n    // create our layer where our components will be mounted\r\n    this.konvaSceneLayer = new Konva.Layer({\r\n      id: this.id,\r\n      x:  this.x,\r\n      y:  this.y,\r\n    });\r\n\r\n    // mount our components into this layer\r\n    this.comps.forEach( (comp) => comp.mount(this.konvaSceneLayer) );\r\n\r\n    // wire our layer into the supplied containingKonvaStage\r\n    // ... NOTE: This must be added AFTER the layer is populated :-(\r\n    //           UNSURE WHY: seems like a Konva limitation :-(\r\n    containingKonvaStage.add(this.konvaSceneLayer)\r\n  }\r\n\r\n\r\n  /**\r\n   * Get/Set self's size ... {width, height}.\r\n   *\r\n   * NOTE: Because the pallet size is mastered in the scene, it can be\r\n   *       set here.  A view size is derived from it's contained scene(s).\r\n   *\r\n   * @param {Size} [size] - the optional size that when\r\n   * supplied will set self's size.\r\n   *\r\n   * @returns {Size|self} for getter: our current size,\r\n   * for setter: self (supporting chainable setters).\r\n   */\r\n  size(size) {\r\n    // NOTE: this method does NOT require mounting, because Scene masters the size!\r\n    if (size===undefined) {      // getter:\r\n      return this._size;\r\n    }\r\n    else {                       // setter:\r\n      this._size = {width: size.width, height: size.height}; // new copy for good measure\r\n      return this;               // return self (for chaining)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get/set our draggable scene flag.\r\n   *\r\n   * @param {boolean} [draggable] - the optional setting that when\r\n   * supplied will set the scene's draggability.\r\n   *\r\n   * @returns {boolean|self} for getter: our current draggable\r\n   * setting, for setter: self (supporting chainable setters).\r\n   */\r\n  // AI: OBSOLETE (based on current enableXxxMode() implementation)\r\n  draggable(draggable) {\r\n    this.checkMounted('draggable');\r\n    if (draggable===undefined) {               // getter:\r\n      return this.konvaSceneLayer.draggable(); // return boolean setting\r\n    }\r\n    else {                                       // setter:\r\n      this.konvaSceneLayer.draggable(draggable); // set internal object\r\n      return this;                               // return self (for chaining)\r\n    }\r\n  }\r\n\r\n}\r\nScene.unmangledName = 'Scene';\r\n","//***\r\n//*** Various Konva utils\r\n//***\r\n\r\n/**\r\n * Return the supplied node's ancestor that is in the top-level Layer.\r\n */\r\nexport function ancestorOfLayer(node) {\r\n  const parentNode = node.getParent();\r\n  return parentNode.getClassName() === 'Layer' ? node : ancestorOfLayer(parentNode);\r\n}\r\n","import SmartScene        from './SmartScene';\r\nimport Scene             from './Scene';\r\nimport verify            from 'util/verify';\r\nimport checkUnknownArgs  from 'util/checkUnknownArgs';\r\nimport {toast}           from 'util/notify';\r\n\r\n/**\r\n * Collage is a SmartScene derivation in which multiple Scenes are displayed/visualized.\r\n */\r\nexport default class Collage extends SmartScene {\r\n\r\n  /**\r\n   * Create a Collage.\r\n   *\r\n   * **Please Note** this constructor uses named parameters.\r\n   *\r\n   * @param {string} id - the unique identifier of this  collage.\r\n   * @param {string} [name=id] - The name of this collage (DEFAULT to id).\r\n   * @param {Scene[]} scenes - the scenes visualized by this collage.\r\n   */\r\n  constructor({id, name, scenes, ...unknownArgs}={}) {\r\n    super({id, name});\r\n\r\n    // validate Collage() constructor parameters\r\n    const check = verify.prefix(`${this.diagClassName()}(id:'${id}', name:'${name}') constructor parameter violation: `);\r\n\r\n    // ... id/name validated by base class\r\n\r\n    // ... scenes\r\n    check(scenes,                 'scenes is required');\r\n    check(Array.isArray(scenes),  'scenes must be an Scene[] array');\r\n    scenes.forEach( (scene, indx) => {\r\n      check(scene instanceof Scene, `scenes[${indx}] must be a Scene instance`);\r\n    });\r\n\r\n    // ... unknown arguments\r\n    checkUnknownArgs(check, unknownArgs, arguments);\r\n\r\n    // retain derivation-specific parameters in self\r\n    this.scenes = scenes;\r\n\r\n    // maintain our parentage\r\n    this.scenes.forEach( (scene) => scene.setParent(this) );\r\n  }\r\n\r\n  // support persistance by encoding needed props of self\r\n  getEncodingProps() {\r\n    return [...super.getEncodingProps(), ...['scenes']];\r\n  }\r\n\r\n  \r\n  /**\r\n   * Enable self's \"view\" DispMode (used in top-level objects targeted by a tab).\r\n   *\r\n   * NOTE: this is also invoked prior to other display modes, as a neutral reset :-)\r\n   */\r\n  enableViewMode() {\r\n    // clear everything from any of the other DispModes\r\n    // ... sequentially follow each item in the \"other\" DispModes\r\n    this.scenes.forEach( (scene) => scene.konvaSceneLayer.draggable(false) );\r\n    this.containingKonvaStage.off('dragend');\r\n  }\r\n\r\n  /**\r\n   * Enable self's \"edit\" DispMode (used in top-level objects targeted by a tab).\r\n   */\r\n  enableEditMode() {\r\n\r\n    // prevent edit mode when containing package cannot be persisted\r\n    // ... ex: when the package contains code\r\n    const pkg = this.getPackage();\r\n    if (!pkg.canPersist()) {\r\n      toast.warn({msg: `The \"${this.getName()}\" collage is NOT EDITABLE ` + \r\n                       `... normally collages can be edited, however it belongs to the \"${pkg.getPkgDesc()}\" package which ` +\r\n                       `contains code (therefore you would not be able to save your changes).`});\r\n      return;\r\n    }\r\n\r\n    // draggable: enable (propagate into each top-level scene)\r\n    this.scenes.forEach( (scene) => scene.konvaSceneLayer.draggable(true) );\r\n\r\n    // monitor events at the Konva Stage level (using Event Delegation and Propagation)\r\n    // ... dragend: monitor x/y changes - syncing KonvaLayer INTO our Scene SmartObject\r\n    this.containingKonvaStage.on('dragend', (e) => {\r\n      // console.log(`xx Konva Stage dragend: index: ${e.target.index}, id: ${e.target.id()}, name: ${e.target.name()} x: ${e.target.x()}, y: ${e.target.y()} ... e:\\n`, e);\r\n\r\n      // locate our scene matching the target Konva.Layer\r\n      // ... we correlate the id's between Konva/SmartObject\r\n      const scene = this.scenes.find( (scene) => scene.id === e.target.id() );\r\n      // console.log(`xx Konva Stage dragend: matching scene: `, scene);\r\n\r\n      // sync the modified x/y\r\n      scene.x = e.target.x();\r\n      scene.y = e.target.y();\r\n\r\n      // reset the stage size which is dynamically calculated!\r\n      const newSize = this.size();\r\n      // ... adjust the Stage\r\n      this.containingKonvaStage.size(newSize);\r\n      this.containingKonvaStage.draw();\r\n      // ... adjust the Stage's corollary HTML elm\r\n      this.containingHtmlElm.style.width  = `${newSize.width}px`;\r\n      this.containingHtmlElm.style.height = `${newSize.height}px`;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Enable self's \"animate\" DispMode (used in top-level objects targeted by a tab).\r\n   */\r\n  enableAnimateMode() {\r\n    // yet to do\r\n  }\r\n\r\n  /**\r\n   * Mount the visuals of this collage, binding the graphics to the\r\n   * underlying canvas.\r\n   *\r\n   * Prior to `mount()` execution, the visualize-it object\r\n   * representation is very lightweight.\r\n   *\r\n   * @param {Konva.Stage} containingKonvaStage - The container of\r\n   * this collage (a Konva.Stage).\r\n   *\r\n   * @param {HtmlElm} containingHtmlElm - The overall containing\r\n   * HTML element (needed for dynamic resizing in Collage).\r\n   */\r\n  mount(containingKonvaStage, containingHtmlElm) {\r\n    // retain containingKonvaStage for event handling\r\n    this.containingKonvaStage = containingKonvaStage;\r\n\r\n    // retain containingHtmlElm (needed to dynamically resize)\r\n    this.containingHtmlElm = containingHtmlElm;\r\n\r\n    // propagate this request to each of our scenes (one canvas per scene)\r\n    this.scenes.forEach( (scene) => scene.mount(containingKonvaStage) );\r\n  }\r\n\r\n\r\n  /**\r\n   * Get self's size ... {width, height}.\r\n   *\r\n   * NOTE: Because the collage size is derived from it's contained scenes, \r\n   *       you may only set the size within the Scene object (where it is mastered).\r\n   *\r\n   * @returns {Size} our current size.\r\n   */\r\n  size(size) {\r\n    // NOTE: this method does NOT require mounting, because it's contained scene's masters the size!\r\n    verify(size===undefined, `***ERROR*** ${this.diagClassName()}.size() can only be invoked as a getter (with no params) ... size is mastered in the scene, AND derived in the collage.`);\r\n\r\n    // compute our size accumulated from all our scenes\r\n    const viewSize = this.scenes.reduce( (accum, scene) => {\r\n      const sceneSize = scene.size();\r\n      accum.width  = Math.max(accum.width,  scene.x + sceneSize.width); \r\n      accum.height = Math.max(accum.height, scene.y + sceneSize.height);\r\n      return accum;\r\n    }, {width:0, height:0});\r\n    return viewSize;\r\n  }\r\n\r\n  /**\r\n   * Get/set our draggable scene flag.\r\n   *\r\n   * @param {boolean} [draggable] - the optional setting that when\r\n   * supplied will set the scene's draggability.\r\n   *\r\n   * @returns {boolean|self} for getter: our current draggable\r\n   * setting, for setter: self (supporting chainable setters).\r\n   */\r\n  // AI: OBSOLETE (based on current enableXxxMode() implementation)\r\n  draggable(draggable) {\r\n    // NOTE: checkMounted() is accomplished at the Scene level\r\n    if (draggable===undefined) {         // getter:\r\n      return this.scenes[0].draggable(); // return boolean setting of our first scene (assumes it is synced)\r\n    }\r\n    else {                               // setter: sets across all our scenes\r\n      this.scenes.forEach( (scene) => scene.draggable(draggable) );\r\n      return this;                       // return self (for chaining)\r\n    }\r\n  }\r\n\r\n}\r\nCollage.unmangledName = 'Collage';\r\n","import verify     from './verify';\r\nimport {isString} from 'util/typeCheck';\r\n\r\n/*--------------------------------------------------------------------------------\r\n   Simple logging utility with the following features:\r\n   - can be enabled/disabled at run-time\r\n   - all logging probes are prefixed\r\n   - a simple layer on top of console.log()\r\n\r\n   USAGE:\r\n     import {createLogger} from 'util/logger';\r\n     ...\r\n     const log = createLogger('*** My Prefix *** ').enable();\r\n\r\n     ... log('now is the time', myData); // emits: *** My Prefix *** now is the time\r\n\r\n   API:\r\n     log(msg [,obj]): void       ... conditionally log probe when enabled\r\n     log.force(msg [,obj]): void ... unconditionally log probe\r\n     log.isEnabled(): true/false ... is logging enabled or disabled\r\n     log.enable():  log          ... enable logging\r\n     log.disable(): log          ... disable logging\r\n   --------------------------------------------------------------------------------*/\r\n\r\nexport function createLogger(prefix) {\r\n\r\n  // validate parameters\r\n  const check = verify.prefix('createLogger() parameter violation: ');\r\n  check(prefix,           'prefix is required');\r\n  check(isString(prefix), 'prefix must be a string');\r\n\r\n  // our logger is disabled by default\r\n  let _enabled = false;\r\n\r\n  // create our new logger\r\n  const logger = function(msg, obj) { // our primary logging function\r\n    if (_enabled) {\r\n      logger.force(msg, obj);\r\n    }\r\n  };\r\n\r\n  // inject additional API\r\n\r\n  logger.force = (msg, obj) => {\r\n    msg = prefix + msg;\r\n    if (obj) {\r\n      console.log(msg, obj);\r\n    }\r\n    else {\r\n      console.log(msg);\r\n    }\r\n  };\r\n\r\n  logger.isEnabled = () => _enabled;\r\n\r\n  logger.enable = () => {\r\n    _enabled = true;\r\n    logger('enabling logging');\r\n    return logger;\r\n  };\r\n\r\n  logger.disable = () => {\r\n    logger('disabling logging');\r\n    _enabled = false;\r\n    return logger;\r\n  };\r\n\r\n  // thats all folks\r\n  return logger;\r\n}\r\n","import verify          from 'util/verify';\r\nimport {isClass,\r\n        isString}      from 'util/typeCheck';\r\nimport {createLogger}  from 'util/logger';\r\n\r\n// our internal diagnostic logger (normally disabled)\r\nconst log = createLogger('***DIAG*** SmartClassRef:').disable();\r\n\r\n/**\r\n * SmartClassRef is a meta object that accommodates type/class\r\n * information for ALL smartObjects, unifying both real classes and\r\n * pseudo classes!\r\n *\r\n * SmartClassRef meta objects can represent either:\r\n *\r\n *  - a real class ... of type SmartModel whose constructor supports\r\n *    namedProps,\r\n * \r\n *  - or a pseudoClass ... an object instance that logically\r\n *    represents a class.  These are resource-based objects that can\r\n *    be dynamically edited (through the graphical editor), and yet\r\n *    can be \"instantiated\" as items of other objects!  Please refer\r\n *    to PseudoClass.\r\n *\r\n * A `smartClassRef` property is dynamically attached to all classes\r\n * (both real and pseudoClass) by the SmartPkg package manager.\r\n *\r\n * IMPORTANT: This class verifies the existence of class.unmangledName!\r\n * - class name is crucial for our persistence (hydration invokes\r\n *   constructor matching registered classes)\r\n * - the standard class.name is mangled in our production build (ex:\r\n *   yielding 't' for 'SmartComp')\r\n * - this is a central spot that will highlight issues very early\r\n */\r\nexport default class SmartClassRef {\r\n\r\n  /**\r\n   * Create a SmartClassRef.\r\n   *\r\n   * @param {classRef} classRef - the class on which behalf we operate\r\n   * (either a real class or a pseudoClass).\r\n   *\r\n   * @param {string} pkgName - the package name this class belongs to.\r\n   */\r\n  constructor(classRef, pkgName) {\r\n\r\n    // validate parameters\r\n    const check = verify.prefix('SmartClassRef() constructor parameter violation: ');\r\n\r\n    // ... classRef (more validation below)\r\n    check(classRef,          'classRef is required');\r\n\r\n    // ... pkgName\r\n    check(pkgName,           'pkgName is required');\r\n    check(isString(pkgName), 'pkgName must be a string');\r\n\r\n\r\n    // retain information about the supplied classRef\r\n    // ... a realClass\r\n    if (isClass(classRef)) {\r\n      this.realClass = classRef;\r\n\r\n      // verify there is an unmangledName property (see IMPORTANT above)\r\n      // NOTE: MUST USE hasOwnProperty() because static class references\r\n      //       will walk the hierarchy chain (as of ES6 classes)\r\n      //       We MUST insure this concrete class has defined it's own\r\n      //       unique unmangledName!!\r\n      check(classRef.hasOwnProperty('unmangledName'), `real class ${classRef.name} MUST have an \"unmangledName\" property (supporting persistence in obfuscated production build)`);\r\n\r\n    }\r\n    // ... a pseudoClass MASTER (i.e. a logical type)\r\n    else if (classRef.pseudoClass && classRef.pseudoClass.isType()) {\r\n      this.pseudoClassContainer = classRef;\r\n    }\r\n    else {\r\n      check(false, 'classRef must be a real class -or- pseudoClass');\r\n    }\r\n\r\n    // retain the supplied pkgName\r\n    this.pkgName = pkgName;\r\n  }\r\n\r\n\r\n  // NOT NEEDED: The whole idea of this class is to remove conditional logic!\r\n  // /**\r\n  //  * Return an indicator as to whether self is a real class\r\n  //  *\r\n  //  * @returns {boolean} true: a realClass, false: a pseudoClass\r\n  //  */\r\n  // isClass() {\r\n  //   return this.realClass ? true : false;\r\n  // }\r\n\r\n  // NOT NEEDED: The whole idea of this class is to remove conditional logic!\r\n  // /**\r\n  //  * Return an indicator as to whether self is a pseudo class\r\n  //  *\r\n  //  * @returns {boolean} true: a pseudoClass, false: a realClass\r\n  //  */\r\n  // isPseudoClass() {\r\n  //   return this.pseudoClassContainer ? true : false;\r\n  // }\r\n\r\n\r\n  /**\r\n   * Return the class name of self.\r\n   * \r\n   * The class name is interpreted for BOTH real classes and\r\n   * pseudoClasses.\r\n   *\r\n   * For real classes, the name is never mangled, from an\r\n   * obfuscated production build.\r\n   *\r\n   * @returns {string} the class name.\r\n   */\r\n  getClassName() {\r\n    // interpret a pseudoClass type\r\n    // ... self is a pseudoClass MASTER (i.e. a logical type)\r\n    if (this.pseudoClassContainer) {\r\n      return this.pseudoClassContainer.id;\r\n    }\r\n\r\n    // interpret our real class name\r\n    return this.realClass.unmangledName || this.realClass.name;\r\n  }\r\n\r\n\r\n  /**\r\n   * Return the package name (SmartPkg) from which this classRef is\r\n   * managed/distributed.\r\n   *\r\n   * @returns {string} the class package name.\r\n   */\r\n  getClassPkgName() {\r\n    return this.pkgName;\r\n  }\r\n\r\n\r\n  /**\r\n   * Return the fully qualified class name of self, including the\r\n   * package and class name ... 'com.acme/Pump1'.\r\n   *\r\n   * @returns {string} self's fully qualified 'pkgName/className'\r\n   */\r\n  getFullClassName() {\r\n    return `${this.getClassPkgName()}/${this.getClassName()}`;\r\n  }\r\n\r\n\r\n  /**\r\n   * A value-added constructor that creates smartObjects of this type.\r\n   *\r\n   * These newly instantiated objects represent SmartModel\r\n   * derivations, whose constructors supports namedParams.\r\n   *\r\n   * @param {ObjectLiteral} namedParams - The named properties used to\r\n   * passed into self's constructor.\r\n   *\r\n   * @returns {smartObject} a newly instantiated class-based object of\r\n   * this type, initialized with `namedParams`.\r\n   */\r\n  createSmartObject(namedParams) {\r\n\r\n    let newObj = null;\r\n    let msgQualifier = '';\r\n\r\n    //***\r\n    //*** handle real classes\r\n    //***\r\n\r\n    if (this.realClass) {\r\n      msgQualifier = 'real';\r\n      newObj = new this.realClass(namedParams);\r\n    }\r\n\r\n    //***\r\n    //*** handle pseudo classes\r\n    //***\r\n\r\n    else {\r\n      msgQualifier = 'pseudo';\r\n\r\n      const pseudoClassContainer = this.pseudoClassContainer;\r\n\r\n      // clone the pseudoClass (with depth), overriding supplied namedParams\r\n      newObj = pseudoClassContainer.smartClone(namedParams);\r\n\r\n      // AI: some of the following demarcations may have some \"logical\" duplication in it ... analyze this when the dust settles\r\n\r\n      // mark the cloned object as an instance (NOT a type)\r\n      newObj.pseudoClass.id   = pseudoClassContainer.id;\r\n      newObj.pseudoClass.name = `a pseudoClass instance of type: '${pseudoClassContainer.id}'`; // for good measure\r\n\r\n      // retain the pseudoClassMaster\r\n      // ... used to locate the pseudoClass from which an object was created :-)\r\n      // ... see: SmartModel.getClassRef()\r\n      newObj.pseudoClass.pseudoClassMaster = pseudoClassContainer;\r\n    }\r\n\r\n    log(`createSmartObject() created new object from ${msgQualifier} class: '${this.getFullClassName()}' ... using namedParams: `, {namedParams, newObj});\r\n    return newObj;\r\n  }\r\n\r\n}\r\n","import SmartModel        from './SmartModel';\r\nimport SmartClassRef     from './SmartClassRef';\r\nimport PseudoClass       from './PseudoClass';\r\nimport {isPlainObject,\r\n        isClass}         from 'util/typeCheck';\r\nimport verify            from 'util/verify';\r\nimport checkUnknownArgs  from 'util/checkUnknownArgs';\r\n\r\n/**\r\n * SmartPkg models visualize-it packages.\r\n *\r\n * SmartPkgs:\r\n *   - are cataloged by pkgManager\r\n *     ... the basis resolving classRefs in our persistence model\r\n *   - and optionally viewed in the LeftNav\r\n *     ... the basis of the builder app management (viewing/editing\r\n *         entries, including entries in other entries, etc.)\r\n *     ... LeftNav exposure is optional because some packages are NOT visual\r\n *         (such as \"core\") ... just needed for pkgManager promotion\r\n *\r\n * SmartPkg is a concrete class that can model ANY visualize-it package:\r\n *   - a component package (holding component definitions)\r\n *   - a system package (holding scenes and collages)\r\n *   - even a hybrid package (combining both component and system resources)\r\n *\r\n * A SmartPkg can represent EITHER:\r\n *   - code-based packages (containing class references)\r\n *     * NOT editable (unless we decide to dynamically manage and persist code)\r\n *     * NOT persistable ... save/retrieve (ditto)\r\n *   - resource-based packages (with NO class references)\r\n *     * editable\r\n *     * persistable ... save/retrieve\r\n *\r\n * Entries from one package can have dependencies on other external\r\n * packages (for example, a \"system\" package may contain component\r\n * instances from classes defined in a \"component\" package).\r\n *\r\n * All SmartPkgs have a name (pkgName):\r\n *   - the name qualifies the package through which classRefs are distributed\r\n *     * so the pkgName belongs to classRefs ONLY, NOT entries\r\n *       ... because entries are NOT shared across packages\r\n *     * SmartPkg will auto-inject it's package name in all classRefs\r\n *       it contains!\r\n *       - this allows our persistence process to record BOTH the\r\n *         pkgName and className from which each object is\r\n *         instantiated\r\n *         ... allowing it to be re-hydrated (because we can locate the\r\n *             class - via pkgManager)\r\n *   - object instances contained in a package can be based on classes\r\n *     from external packages (i.e. dependent packages)\r\n *     ... this point is more related to persistence characteristic\r\n *         (not so much dealing with SmartPkg itself)\r\n *     * typically top-level objects are from the core package, which\r\n *       is globally available (however that is a minor point)\r\n *     * in addition, objects can be instances of classes defined\r\n *       within the same package (as you would expect)\r\n *   - SO IN SUMMARY: the distinction between \"classRef\" and \"object instance\":\r\n *     * \"instances\" ALWAYS belong to the \"self-contained\" package\r\n *     * \"instances\" can be created from types that belong to either self's package or \"other\" packages\r\n *\r\n * SmartPkg entries are defined in an object structure (with depth)\r\n * that represents the visual hierarchy by which they are promoted.\r\n *   - entries utilize an object structure (with depth)\r\n *   - any client-defined structure is supported (i.e. a collection of\r\n *     whatever with arbitrary nesting of named nodes)\r\n *   - named nodes (contained in plain objects) represent a logical directory\r\n *     * where the name is a displayed human readable node\r\n *     * and can be nested (supporting sub-structure depth)\r\n *   - arrays represent resource items (or nested named nodes)\r\n *     * entries can be:\r\n *       1. smartObject to view/use\r\n *          ```\r\n *          can be:\r\n *          - Classes ... SingleValve, TwoWayValve, etc. (NOT SUPPORTED BY RESOURCE-BASED PKG)\r\n *          - SmartModel instance obj ... Collage\r\n *          - SmartModel pseudoClass\r\n *            * pseudoClass Master ...... DynamicComp, Scene, \r\n *            * pseudoClass INSTANCE .... comp instances IN Scene -or- scene instances in Collage\r\n *          ```\r\n *       2. plain object representing nested sub-entries mixed into the\r\n *          entries array\r\n *\r\n * Here is a sample `entries`:\r\n * ```js\r\n * entries: {\r\n *   components: {\r\n *     valves: [\r\n *       // ... example of class (i.e. a class function) ... NOT supported by a resource-based pkg\r\n *       SingleValve,\r\n *       TwoWayValve,\r\n *\r\n *       // ... example of Pseudo Class MASTER (a DynamicComp(), dynamically editable)\r\n *       DynamicComp({withPseudoClassName, andOthers}),\r\n *     ],\r\n *     pumps: [\r\n *       PowerPump,\r\n *       { // ... nested sub-entries mixed into the entries array\r\n *         \"Pumps Cat 2\": [\r\n *           SubPump1,\r\n *           SubPump2,\r\n *         ],\r\n *       },\r\n *       SumpPump,\r\n *     ],\r\n *   },\r\n *   scenes: [\r\n *     // ... a pseudoClass MASTER (can be edited: the comps add/remove/position/transform)\r\n *     Scene(...comps),\r\n *     Scene(...comps),\r\n *     ...\r\n *   ],\r\n *   collages: [\r\n *     // ... collage instance that holds scene instances (pseudoClass INSTANCEs)\r\n *     //      - VERY TRUE: scene instances will hold their unique x/y offsets\r\n *     //      - Collage MUST validate that scene instances are used\r\n *     //        ?? TODO: make this so (even though it is tightly controlled, wouldn't hurt to validate it)\r\n *     //      - IMPORTANT: to resolve this, MUST FIRST resolve Scene pseudoClass MASTER\r\n *     //        ... because it is referenced in the same pkg!\r\n *     Collage(...scenes)\r\n *     Collage(...scenes)\r\n *     ...\r\n *   ],\r\n * }\r\n * ```\r\n *\r\n * SmartPkg entries are promoted through two internal catalogs,\r\n * providing easy access independent of the visual hierarchy (i.e. the\r\n * visual structure with depth).  The two catalogs are:\r\n * \r\n * ```\r\n *  + getClassRef(className): SmartClassRef ... used by pkgManager\r\n *  + getEntry(entryId):      entry         ... used by tabManager (currently NOT used)\r\n * ```\r\n */\r\nexport default class SmartPkg extends SmartModel {\r\n\r\n  /**\r\n   * Create a SmartPkg.\r\n   *\r\n   * **Please Note** this constructor uses named parameters.\r\n   *\r\n   * @param {string} id - the unique identifier of this SmartPkg\r\n   * (logically the package name).  Because this must be fully unique\r\n   * across all other in-memory packages, it is recommended to use a\r\n   * \"java like\" package name (ex: com.astx.acme).\r\n   * @param {string} [name=id] - The SmartPkg name (logically the package desc).\r\n   * @param {Object} [entries] - the optional entries held in self (see class notes).\r\n   */\r\n  constructor({id, name, entries={}, ...unknownArgs}={}) {\r\n    super({id, name});\r\n\r\n    // validate SmartPkg() constructor parameters\r\n    const check = verify.prefix(`${this.diagClassName()}(id:'${id}', name:'${name}') constructor parameter violation: `);\r\n\r\n    // ... id/name validated by base class\r\n\r\n    // ... entries\r\n    check(entries,                 'entries is required');\r\n    check(isPlainObject(entries),  'entries must be a plain object (with depth)');\r\n\r\n    // ... unknown arguments\r\n    checkUnknownArgs(check, unknownArgs, arguments);\r\n\r\n    // retain derivation-specific parameters in self\r\n    this.entries = entries;\r\n\r\n    // remaining logic\r\n    // ... hook into the standard SmartModel.constructorConfig()\r\n    //     so this will be accomplished in pseudo construction too!\r\n    // ?? DO THIS -and- call it in our pseudo construction\r\n\r\n    // initialize our catalogs\r\n    this.initializeCatalogs(this.entries);\r\n\r\n    // introduce the value-added meta API to all our classes (including package registration)\r\n    this.adornContainedClasses();\r\n  }\r\n\r\n  // support persistance by encoding needed props of self\r\n  getEncodingProps() {\r\n    return [...super.getEncodingProps(), ...['entries']];\r\n  }\r\n\r\n  /**\r\n   * Return self's package name (ex: 'com.astx.acme').\r\n   * NOTE: This is derived from self's id.\r\n   */\r\n  getPkgName() {\r\n    return this.id;\r\n  }\r\n\r\n  /**\r\n   * Return self's package description (ex: 'ACME System').\r\n   * NOTE: This is derived from self's name.\r\n   */\r\n  getPkgDesc() {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Return self's pkgResourcePath (if any).\r\n   * \r\n   * When a SmartPkg is persisted (i.e. pulled from, or saved to a\r\n   * file/url), it will contain a pkgResourcePath.\r\n   * - this merely identifies it's persistent form and provides a\r\n   *   convenient means by which changes can be saved\r\n   * \r\n   * NOTE: The `pkgResourcePath` attribute is NOT persisted, rather\r\n   *       it is retained as a result of an open/save operation\r\n   *       (see: pkgPersist.js open/save operators).\r\n   *\r\n   * @returns {PkgResourcePath} the pkgResourcePath (if any),\r\n   * undefined for none.\r\n   */\r\n  getPkgResourcePath() {\r\n    return this.pkgResourcePath;\r\n  }\r\n\r\n  /**\r\n   * Return an indicator as to whether this package can be persisted.\r\n   * \r\n   * NOTE: Packages that contain code cannot be persisted.\r\n   *\r\n   * @returns {boolean} true: can persist, false otherwise.\r\n   */\r\n  canPersist() {\r\n    return !this.entriesContainCode;\r\n  }\r\n\r\n  /**\r\n   * Set self's pkgResourcePath (see notes in getPkgResourcePath()).\r\n   *\r\n   * @param {PkgResourcePath} pkgResourcePath - the resource path\r\n   * where self is persisted.\r\n   */\r\n  setPkgResourcePath(pkgResourcePath) {\r\n    this.pkgResourcePath = pkgResourcePath;\r\n  }\r\n\r\n  /**\r\n   * An internal method that recurses through self's entries,\r\n   * initializing our two catalogs.\r\n   *\r\n   * @param {Object} entry - the current entry node being processed.\r\n   */\r\n  initializeCatalogs(entry) {\r\n\r\n    // reset our catalogs on the top-level invocation\r\n    if (entry === this.entries) {\r\n      this._classRefCatalog = {};\r\n      this._entryCatalog    = {};\r\n    }\r\n\r\n    // prime our indicator as to whether our content contains code\r\n    // ... used in determining if this package can be persisted\r\n    //     (see: `canPersist()`).\r\n    this.entriesContainCode = false; // ... start out assuming NO code\r\n\r\n    // recurse over entry\r\n    // ... for plain objects, each member is a directory node\r\n    if (isPlainObject(entry)) {\r\n      // pass through through all directory nodes (object members),\r\n      // ... and recurse into each\r\n      for (const dirName in entry) {\r\n        const dirContent = entry[dirName];\r\n        this.initializeCatalogs(dirContent);\r\n      }\r\n    }\r\n    // ... for array entry,\r\n    else if (Array.isArray(entry)) {\r\n      entry.forEach( (arrItem) => {\r\n\r\n        // normally this is a smartObj\r\n        if (arrItem instanceof SmartModel) {\r\n          const smartObj = arrItem;\r\n\r\n          // catalog any pseudoClasses in our _classRefCatalog\r\n          if (PseudoClass.isPseudoClassMaster(smartObj)) {\r\n            const className = PseudoClass.getClassName(smartObj);\r\n            this._classRefCatalog[className] = smartObj;\r\n          }\r\n\r\n          // catalog all entries in our _entryCatalog\r\n          this._entryCatalog[smartObj.id] = smartObj;\r\n\r\n          // maintain our parentage\r\n          smartObj.setParent(this);\r\n        }\r\n\r\n        // can be a real class reference\r\n        else if (isClass(arrItem)) {\r\n          const realClass = arrItem;\r\n\r\n          // mark our package as containing code\r\n          this.entriesContainCode = true;\r\n\r\n          // catalog classes in our _classRefCatalog\r\n          const className = PseudoClass.getClassName(realClass);\r\n          this._classRefCatalog[className] = realClass;\r\n        }\r\n\r\n        // can be a nested sub-directory (mixed in with our tab activation entries)\r\n        else if (isPlainObject(arrItem)) {\r\n          this.initializeCatalogs(arrItem);\r\n        }\r\n\r\n        // other items are NOT supported (should not happen - defensive only)\r\n        else {\r\n          const errMsg = '***ERROR*** SmartPkg.initializeCatalogs() found UNSUPPORTED array entry ... must be a smartObj or class or plain nested directory object ... see logs for entry';\r\n          console.error(errMsg, {arrItem});\r\n          throw new Error(errMsg);\r\n        }\r\n      });\r\n    }\r\n\r\n    // ... other entries are NOT supported (should not happen - defensive only)\r\n    else {\r\n      const errMsg = '***ERROR*** SmartPkg.initializeCatalogs() found UNSUPPORTED entry ... must be a plain directory object or an array of smartObjs ... see logs for entry';\r\n      console.error(errMsg, {entry});\r\n      throw new Error(errMsg);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Introduce the `.smartClassRef` on all our classes, providing\r\n   * value-added utility that unifies the meta API for both real\r\n   * classes and pseudoClasses.\r\n   *\r\n   * It also ties this package to the each class for the first time\r\n   * (registering self's package name)!\r\n   */\r\n  adornContainedClasses() {\r\n    Object.values(this._classRefCatalog).forEach( (clazz) => {\r\n      clazz.smartClassRef = new SmartClassRef(clazz, this.getPkgName());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return self's classRef matching the supplied `className` (undefined for\r\n   * not-found).\r\n   *\r\n   * NOTE: This method is a key aspect that makes pkgManager work.\r\n   *\r\n   * @param {string} className - the class name of the classRef to return.\r\n   *\r\n   * @returns {SmartClassRef} the classRef matching the supplied `className`\r\n   * (undefined for not-found).\r\n   */\r\n  getClassRef(className) {\r\n    // NOTE: To avoid name clash with SmartModel.getClassRef(), \r\n    //       an unrelated method to ours:\r\n    //       - we redirect to it based on the distinct param signature!!\r\n    //       - I really wanted to use this \"getClassRef\" in both cases\r\n    //       - This is analogous to \"Static Polymorphism\" in Java/C++,\r\n    //         where the entire method signature is employed in it's\r\n    //         polymorphic behavior :-)\r\n    if (arguments.length === 0) {\r\n      return super.getClassRef();\r\n    }\r\n\r\n    // this methods real implementation :-)\r\n    return this._classRefCatalog[className].smartClassRef;\r\n  }\r\n\r\n  /**\r\n   * Return the entry matching the supplied `entryId` (undefined for\r\n   * not-found).\r\n   *\r\n   * NOTE: This method is a key aspect that integrates with the\r\n   *       visuals (displayed in the tab manager).\r\n   *       HOWEVER however it is currently not needed.\r\n   *       ... as of 2/16/2020, this method NOT being used.\r\n   *\r\n   * @param {string} entryId - the entry ID of the entry to return.\r\n   *\r\n   * @returns {entry} the entry matching the supplied `entryId`,\r\n   * undefined for not-found.\r\n   */\r\n  getEntry(entryId) {\r\n    return this._entryCatalog[entryId];\r\n  }\r\n\r\n  /**\r\n   * A static method that reconstitutes SmartPkg objects from\r\n   * smartJSON.\r\n   *\r\n   * NOTE: This is specialized logic (from SmartModel.fromSmartJSON()),\r\n   *       because it must FIRST resolve pseudoClass MASTER\r\n   *       definitions, in support of self-referencing pseudoClasses\r\n   *       (ex: collage referencing scene instances)\r\n   * \r\n   * @param {JSON} smartJSON - the smartJSON structure representing\r\n   * the SmartPkg object to rehydrate.\r\n   *\r\n   * @returns {SmartPkg} a newly instantiated SmartPkg object from the\r\n   * supplied smartJSON.\r\n   *\r\n   * @throws {Error} an Error is thrown in various scenarios\r\n   * (unresolved class references, invalid params, etc.).\r\n   */\r\n  // ?? when complete, determine if this logic can (or should) be implemented in SmartModel\r\n  static fromSmartJSON(smartJSON) {\r\n\r\n    // validate supplied parameters\r\n    const check = verify.prefix('SmartPkg.fromSmartJSON(smartJSON) parameter violation: ');\r\n\r\n    // ... smartJSON\r\n    check(smartJSON,                 'smartJSON is required');\r\n    check(isPlainObject(smartJSON),  'smartJSON must be a JSON object');\r\n    check(smartJSON.smartType === 'SmartPkg',\r\n          `smartJSON does NOT represent a SmartPkg object, rather a ${smartJSON.smartType} object.`);\r\n\r\n    //***\r\n    //*** PHASE-1: pre-process the smartJSON to resolve pseudoClass MASTER definitions\r\n    //*** ... in support of self-referencing pseudoClasses\r\n    //***     (ex: collage referencing scene instances)\r\n    //***\r\n\r\n    // NOTE: We currently mutate smartJSON with real objects (resolving pseudoClass MASTER TYPEs).\r\n    //       While this should work, may want to consider making a copy.\r\n\r\n    // the catalog of pseudoClass MASTERs (supporting the extraClassResolver)\r\n    const pseudoClassMasters = {};\r\n\r\n    // retain the pkgName being resolved (used in our extraClassResolver)\r\n    // ... NOTE: for SmartPkg JSON, the top-level id IS the package name\r\n    //           see: getPkgName()\r\n    const pkgNameBeingResolved = smartJSON.id;\r\n\r\n    // our recursive function that performs the pre-processing\r\n    function resolvePseudoClassMasters(jsonEntry) {\r\n\r\n      // entry is a plain JSON object\r\n      if (isPlainObject(jsonEntry)) {\r\n\r\n        // entry is a smartObject\r\n        if (jsonEntry.smartType) {\r\n\r\n          // hydrate our pseudoClass MASTERs early\r\n          // ... IMPORTANT: this is the reason we are pre-processing!\r\n          // ... NOTE: All our pseudoClass MASTER will appear in the root of any entries directory!\r\n          //           In other words, no need to drill any further deep!\r\n          if (jsonEntry.isPseudoClassMaster) {\r\n\r\n            // morph into a real object\r\n            const resolvedObj = SmartModel.fromSmartJSON(jsonEntry); // ... no need for extraClassResolver (pseudoClass Masters resolve via core classes)\r\n\r\n            // adorn the .smartClassRef early (normally done by SmartPkg at the end of it's construction)\r\n            resolvedObj.smartClassRef = new SmartClassRef(resolvedObj, pkgNameBeingResolved);\r\n\r\n            // catalog in pseudoClassMasters\r\n            pseudoClassMasters[resolvedObj.id] = resolvedObj;\r\n\r\n\r\n            // pass it through\r\n            // ... see note on \"mutate smartJSON with real objects\" (above)\r\n            return resolvedObj;\r\n          }\r\n          \r\n          // pass ALL OTHER smartObjects through (JSON as-is)\r\n          // ... things like:\r\n          //     - pseudoClass INSTANCEs\r\n          //     - other SmartClasses (should NEVER happen in our entries structure\r\n          // ... this will be processed in PHASE-2\r\n          else {\r\n            return jsonEntry;\r\n          }\r\n        }\r\n\r\n        // entry is a plain JSON object\r\n        else {\r\n          // recursively pass through through all object members\r\n          for (const key in jsonEntry) {\r\n            const oldVal = jsonEntry[key];\r\n            const newVal = resolvePseudoClassMasters(oldVal);\r\n            jsonEntry[key] = newVal; // potential mutation\r\n          }\r\n          return jsonEntry;\r\n        }\r\n      }\r\n\r\n      // entry is an array\r\n      else if (Array.isArray(jsonEntry)) {\r\n        // recursively pass through through all array items\r\n        for (let i=0; i<jsonEntry.length; i++) {\r\n          const oldVal = jsonEntry[i];\r\n          const newVal = resolvePseudoClassMasters(oldVal);\r\n          jsonEntry[i] = newVal; // potential mutation\r\n        }\r\n        return jsonEntry;\r\n      }\r\n\r\n      // entry is a JavaScript class\r\n      // ... should NOT find this in resource-based pkgs (simply defensive)\r\n      else if (isClass(jsonEntry)) {\r\n        // pass it through\r\n        console.warn('SmartPkg.fromSmartJSON(smartJson).resolvePseudoClassMasters(jsonEntry) PHASE-1: NOT expecting to pass through (class) ... ', {jsonEntry, smartJSON});\r\n        return jsonEntry;\r\n\r\n      }\r\n\r\n      // handle anything else\r\n      // ... primitives\r\n      // ... should NOT happen within our entries structure\r\n      else {\r\n        // pass it through\r\n        console.warn('SmartPkg.fromSmartJSON(smartJson).resolvePseudoClassMasters(jsonEntry) PHASE-1: NOT expecting to pass through (primitive) ... ', {jsonEntry, smartJSON});\r\n        return jsonEntry;\r\n      }\r\n\r\n    }\r\n\r\n    // resolve the pseudoClass MASTER definitions (within the smartJSON)\r\n    resolvePseudoClassMasters(smartJSON.entries);\r\n    \r\n\r\n    //***\r\n    //*** PHASE-2: hydrate the entire object\r\n    //*** ... now that we have resolved the pseudoClass MASTER definitions\r\n    //***\r\n\r\n    // utilize an extraClassResolver that can resolve self-referencing pseudoClasses\r\n    // ... ex: collage referencing scene instances\r\n    function extraClassResolver(pkgName, className) {\r\n      const clazz = (pkgName === pkgNameBeingResolved) ? pseudoClassMasters[className] : undefined;\r\n      //console.log(`xx TEMP ... in extraClassResolver(pkgName:'${pkgName}', className:'${className}') ... comparing pkgNameBeingResolved:'${pkgNameBeingResolved}'` +\r\n      //            ` >>> ${clazz ? 'FOUND IT' : 'NOT FOUND'} ... pseudoClassMasters: `, pseudoClassMasters);\r\n\r\n      return clazz ? clazz.smartClassRef : undefined;\r\n    }\r\n\r\n    // use the normal SmartModel.fromSmartJSON() to do this work\r\n    // ... this passes through any objects that are already hydrated in our smartJSON\r\n    try {\r\n      const hydratedObj = SmartModel.fromSmartJSON(smartJSON, extraClassResolver);\r\n      return hydratedObj;\r\n    }\r\n    catch(err) {\r\n      // add additional context to reveal any errors resolving THIS SmartPkg\r\n      throw err.defineAttemptingToMsg(`hydrate SmartPkg '${pkgNameBeingResolved}'`);\r\n    }\r\n  }\r\n\r\n}\r\nSmartPkg.unmangledName = 'SmartPkg';\r\n","import SmartModel        from './SmartModel';\r\nimport SmartScene        from './SmartScene';\r\nimport Konva             from 'konva';\r\nimport verify            from 'util/verify';\r\nimport checkUnknownArgs  from 'util/checkUnknownArgs';\r\nimport {createLogger}    from 'util/logger';\r\n\r\n// our internal diagnostic logger (normally disabled, but keep enabled for a while)\r\nconst log = createLogger('***DIAG*** <SmartView> ... ').enable();\r\n\r\n/**\r\n * SmartView is a viewport in which scene(s) are displayed/visualized.\r\n * \r\n * Derivations of the contained SmartScene will handle the specifics\r\n * of visualizing a single scene (Scene obj) or multiple scenes\r\n * (Collage obj).\r\n * \r\n * In all cases, this visualization can be \"displayed\":\r\n *   - in-line:  within the \"contained\" HTML DOM container\r\n *   - external: using an external browser window\r\n * TODO: this MAY BE more of a run-time consideration (rather than\r\n *       specified/retained by constructor params driven by our editor)\r\n */\r\nexport default class SmartView extends SmartModel {\r\n\r\n  /**\r\n   * Create a SmartView.\r\n   *\r\n   * **Please Note** this constructor uses named parameters.\r\n   *\r\n   * @param {string} id - the unique identifier of this view.\r\n   * @param {string} [name=id] - the human interpretable name of this\r\n   * view (DEFAULT to id). // ?? UNSURE if we want to DEFAULT this way\r\n   * @param {SmartScene} scene - the scene visualized in this view\r\n   * (can be a single scene (Scene obj) or multiple scenes (Collage\r\n   * obj).\r\n   */\r\n  constructor({id, name, scene, ...unknownArgs}={}) {\r\n\r\n    super({id, name});\r\n\r\n    // validate SmartView() constructor parameters\r\n    const check = verify.prefix(`${this.diagClassName()}(id:'${id}', name:'${name}') constructor parameter violation: `);\r\n    \r\n    // ... id/name validated by base class\r\n\r\n    // ... scene\r\n    check(scene,                       'scene is required');\r\n    check(scene instanceof SmartScene, 'scene must be a SmartScene instance');\r\n\r\n    // ... unknown arguments\r\n    checkUnknownArgs(check, unknownArgs, arguments);\r\n    \r\n    // retain parameters in self\r\n    this.scene = scene;\r\n  }\r\n\r\n  // support persistance by encoding needed props of self\r\n  getEncodingProps() {\r\n    return [...super.getEncodingProps(), ...['scene']];\r\n  }\r\n\r\n  /**\r\n   * Verify self has been mounted.\r\n   * @param {string} [method] - the method name on which behalf we are checking.\r\n   */\r\n  checkMounted(method) {\r\n    verify(this.konvaStage, `${this.diagClassName()}.${method}() can only be invoked after mounting.`);\r\n  }\r\n\r\n  /**\r\n   * Get self's size ... {width, height}.\r\n   *\r\n   * NOTE: Because view size is derived from it's contained scene(s), \r\n   *       you may only set the size within the scene object (where it is mastered).\r\n   *\r\n   * @returns {Size} our current size.\r\n   */\r\n  size(size) {\r\n    // NOTE: this method does NOT require mounting, because it's contained scene masters the size!\r\n    verify(size===undefined, `***ERROR*** ${this.diagClassName()}.size() can only be invoked as a getter (with no params) ... size is mastered in the scene, AND derived in the view.`);\r\n    return this.scene.size(); // return current size (from our contained scene)\r\n  }\r\n\r\n\r\n  /**\r\n   * Get/set the draggable flag of our contained scene.\r\n   *\r\n   * @param {boolean} [draggable] - the optional setting that when\r\n   * supplied will set the scene's draggability.\r\n   *\r\n   * @returns {boolean|self} for getter: the current draggable\r\n   * setting of our contained scene, for setter: self (supporting\r\n   * chainable setters).\r\n   */\r\n  // AI: OBSOLETE (based on current enableXxxMode() implementation)\r\n  draggableScene(draggable) {\r\n    // NOTE: checkMounted() is accomplished at the Scene level\r\n    if (draggable===undefined) {     // getter:\r\n      return this.scene.draggable(); // return boolean setting of our scene\r\n    }\r\n    else {                             // setter:\r\n      this.scene.draggable(draggable); //   sets our scene\r\n      return this;                     // return self (for chaining)\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Mount the visuals of this view, binding the graphics to the\r\n   * underlying canvas.\r\n   *\r\n   * Prior to `mount()` execution, the visualize-it object\r\n   * representation is very lightweight.\r\n   *\r\n   * @param {HtmlElm} containingHtmlElm - The container of this view\r\n   * (an HTML Element).\r\n   */\r\n  mount(containingHtmlElm) {\r\n    log(`mounting SmartView id: ${this.id}`);\r\n    \r\n    // create our stage where our scene will be mounted\r\n    const {width, height} = this.size();\r\n    this.konvaStage = new Konva.Stage({\r\n      container: containingHtmlElm,\r\n      x:         0, // we assume an offset at the origin\r\n      y:         0,\r\n      width,\r\n      height,\r\n    });\r\n    \r\n    // mount our scene into this stage\r\n    this.scene.mount(this.konvaStage, containingHtmlElm); // ... containingHtmlElm needed to dynamically resize collage\r\n\r\n  }\r\n}\r\nSmartView.unmangledName = 'SmartView';\r\n","import Collage     from './Collage';\r\nimport PseudoClass from './PseudoClass';\r\nimport Scene       from './Scene';\r\nimport SmartPkg    from './SmartPkg';\r\nimport SmartView   from './SmartView';\r\nimport pkgManager  from './pkgManager';\r\n\r\n// register a silent package that resolves the core classes\r\n// ... needed for resource-based rehydration (i.e. persistance)\r\n// ... only core \"concrete\" classes that live in SmartPkgs are registered!\r\n//     - the advantage of NOT registering abstract classes is:\r\n//         it further highlights missing \"unmangledName\" class registrations,\r\n//         manifest in a persistance rehydration attempt to instantiate \r\n//         a \"non registered\" SmartModel (as an example)\r\npkgManager.registerPkg( new SmartPkg({\r\n  id:   'core',\r\n  name: 'core classes',\r\n  entries: {\r\n    core: [\r\n      Collage,\r\n//    PkgManager,       NOT: a service object NOT part of our persistent object model\r\n      PseudoClass,\r\n      Scene,\r\n//    SmartComp,        NOT: an abstract class (see docs above)\r\n//    SmartModel        NOT: an abstract class (see docs above)\r\n      SmartPkg,      // the root of our persistent model\r\n//    SmartScene,       NOT: an abstract class (see docs above)\r\n      SmartView,\r\n    ],\r\n  },\r\n}) );\r\n","// various featureFlags used throughout the application\r\nexport default {\r\n\r\n  // should app use WIFI?\r\n  // ... regulates various services (real/mocked)\r\n  useWIFI: false,\r\n\r\n  // should app emit diagnostic logs?\r\n  //  - false:     no logs\r\n  //  - true:      generate 'non verbose' logs (e.g. actions will NOT include redux state)\r\n  //  - 'verbose': generate 'verbose'     logs (e.g. actions WILL     include redux state)\r\n  log:     false,\r\n\r\n  // should app enable diagnostic sandbox controls?\r\n  sandbox: true,\r\n};\r\n","import Konva             from 'konva';\r\nimport SmartModel        from './SmartModel';\r\nimport verify            from 'util/verify';\r\nimport checkUnknownArgs  from 'util/checkUnknownArgs';\r\nimport {isNumber}        from 'util/typeCheck';\r\nimport DispMode          from './DispMode';\r\n\r\n/**\r\n * SmartComp is the abstract base class for all visualize-it\r\n * components.\r\n *\r\n * These are graphical representations of components found in a system:\r\n *\r\n *  - they bind to a data model (for visual affects and animation)\r\n *\r\n *  - their graphics are atomically managed (selection and transformation)\r\n *    ... using a single rooted Konva.Group\r\n *\r\n *  - NOTE: SmartComp is abstract requiring derivation (for code-based compPkgs)\r\n *          HOWEVER: there is a concrete derivation that supports \r\n *                   dynamic-based resource-loaded compPkgs\r\n *                   (maintained by the visualize-it component editor)\r\n *  \r\n *                 SmartComp        ... abstract\r\n *             isA  ├── DynamicComp ... a concrete derivation for dynamic-based resource-loaded compPkgs\r\n *                  │                   ... managed by the visualize-it component editor\r\n *                  └── others      ... for code-based compPkgs\r\n */\r\nexport default class SmartComp extends SmartModel {\r\n\r\n  /**\r\n   * Create a SmartComp.\r\n   *\r\n   * **Please Note** this constructor uses named parameters.\r\n   *\r\n   * @param {string} id - the unique identifier of this component.\r\n   * @param {string} [name=id] - the human interpretable name of this\r\n   * component (DEFAULT to id). // ?? UNSURE if we want to DEFAULT this way\r\n   *\r\n   * @param {number} [x=0] - the optional x offset within it's container (used in transformations of Scene container)\r\n   * @param {number} [y=0] - the optional y offset within it's container (used in transformations of Scene container)\r\n   * @param {number} [rotation=0] - the optional rotation within it's container (used in transformations of Scene container)\r\n   * @param {number} [scaleX=0] - the optional scaleX within it's container (used in transformations of Scene container)\r\n   * @param {number} [scaleY=0] - the optional scaleY within it's container (used in transformations of Scene container)\r\n   */\r\n  constructor({id, name, x=0, y=0, rotation=0, scaleX=1, scaleY=1, ...unknownArgs}={}) {\r\n    super({id, name});\r\n\r\n    // validate SmartComp() constructor parameters\r\n    const check = verify.prefix('SmartComp() constructor parameter violation: ');\r\n    // ... id/name validated by base class\r\n    // ... x\r\n    check(isNumber(x), `x must be a number (when supplied), NOT: ${x}`);\r\n    // ... y\r\n    check(isNumber(y), `y must be a number (when supplied), NOT: ${y}`);\r\n    // ... rotation\r\n    check(isNumber(rotation), `rotation must be a number (when supplied), NOT: ${rotation}`);\r\n    // ... scaleX\r\n    check(isNumber(scaleX), `scaleX must be a number (when supplied), NOT: ${scaleX}`);\r\n    // ... scaleY\r\n    check(isNumber(scaleY), `scaleY must be a number (when supplied), NOT: ${scaleY}`);\r\n    // ... unknown arguments\r\n    checkUnknownArgs(check, unknownArgs, arguments);\r\n\r\n    // retain parameters in self\r\n    this.x        = x;\r\n    this.y        = y;\r\n    this.rotation = rotation;\r\n    this.scaleX   = scaleX;\r\n    this.scaleY   = scaleY;\r\n  }\r\n\r\n  // support persistance by encoding needed props of self\r\n  getEncodingProps() {\r\n    return [...super.getEncodingProps(), ...['x', 'y', 'rotation', 'scaleX', 'scaleY']];\r\n  }\r\n\r\n  /**\r\n   * Return an indicator as to whether self supports the supplied `dispMode`.\r\n   *\r\n   * @param {DispMode} dispMode - the display mode to evaluate.\r\n   *\r\n   * @throws {boolean} true: can handle, false: not supported.\r\n   */\r\n  canHandleDispMode(dispMode) {\r\n    return dispMode !== DispMode.edit; // by default, SmartComps cannot be edited\r\n  }\r\n\r\n  /**\r\n   * Enable self's \"view\" DispMode (used in top-level objects targeted by a tab).\r\n   *\r\n   * NOTE: this is also invoked prior to other display modes, as a neutral reset :-)\r\n   */\r\n  enableViewMode() {\r\n    // L8TR: do something when animate is supported\r\n  }\r\n\r\n  /**\r\n   * Enable self's \"animate\" DispMode (used in top-level objects targeted by a tab).\r\n   */\r\n  enableAnimateMode() {\r\n    // L8TR: do something when animate is supported\r\n  }\r\n\r\n  /**\r\n   * Mount the visuals of this component, binding the graphics to the\r\n   * underlying canvas.\r\n   *\r\n   * Prior to `mount()` execution, the visualize-it object\r\n   * representation is very lightweight.\r\n   *\r\n   * @param {Konva.Layer} containingKonvaLayer - The container of\r\n   * this component (a Konva.Layer).\r\n   */\r\n  mount(containingKonvaLayer) {\r\n    // create our top-level group containing our component sub-shapes\r\n    // ... this is an expected setup to allow components to be treated as an atomic unit\r\n    this.compGroup = new Konva.Group({\r\n      id: this.id,\r\n      x:  this.x,\r\n      y:  this.y,\r\n      rotation: this.rotation,\r\n      scaleX:   this.scaleX,\r\n      scaleY:   this.scaleY,\r\n    });\r\n    containingKonvaLayer.add(this.compGroup);\r\n  }\r\n\r\n}\r\nSmartComp.unmangledName = 'SmartComp';\r\n","import Konva          from 'konva';\r\nimport SmartComp      from 'core/SmartComp';\r\nimport SmartPkg       from 'core/SmartPkg';\r\nimport pkgManager     from 'core/pkgManager';\r\n\r\nclass Valve1 extends SmartComp {\r\n\r\n  // eslint: no-useless-constructor\r\n  // constructor(namedParams) {\r\n  //   super(namedParams);\r\n  // }\r\n\r\n  // NOTE: this component demonstrates multi shapes grouped in a compGroup\r\n  mount(containingKonvaLayer) {\r\n    super.mount(containingKonvaLayer); // defines: this.compGroup\r\n\r\n    const shape1 = new Konva.Rect({\r\n      x: 10, // sub-shape location\r\n      width: 100,\r\n      height: 50,\r\n      fill: 'green',\r\n      stroke: 'black',\r\n      strokeWidth: 5,\r\n    });\r\n    this.compGroup.add(shape1);\r\n\r\n    const connector1 = new Konva.Circle({\r\n      x: 5+2.5, // consider x/strokeWidth (above)\r\n      y: 25,\r\n      radius: 5,\r\n      fill: 'black',\r\n      stroke: 'black',\r\n      strokeWidth: 5,\r\n    });\r\n    this.compGroup.add(connector1);\r\n\r\n    const connector2 = new Konva.Circle({\r\n      x: 5+100+5, // consider x/width/strokeWidth (above)\r\n      y: 25,\r\n      radius: 5,\r\n      fill: 'black',\r\n      stroke: 'black',\r\n      strokeWidth: 5,\r\n    });\r\n    this.compGroup.add(connector2);\r\n\r\n    // setup a sub-group JUST to insure (test) our algorithms can find/use the top-level group\r\n    const subGroup = new Konva.Group({\r\n      x: 0, // NOTE: cannot be based on this.x, RATHER a constant\r\n      y: 0, //       BECAUSE this.compGroup reflects the transformation parameters (so we can't apply the transformations multiple times)\r\n    });\r\n    this.compGroup.add(subGroup);\r\n\r\n    const subCircle = new Konva.Circle({\r\n      x: 10+(100/2), // WHY no strokeWidth: +2.5\r\n      y: 0+(50/2),   // WHY no strokeWidth: +2.5\r\n      radius: 10,\r\n      fill: 'red',\r\n      stroke: 'red',\r\n      strokeWidth: 1,\r\n    });\r\n    subGroup.add(subCircle);\r\n  }\r\n}\r\nValve1.unmangledName = 'Valve1';\r\n\r\nclass Valve2 extends SmartComp {\r\n\r\n  // eslint: no-useless-constructor\r\n  // constructor(namedParams) {\r\n  //   super(namedParams);\r\n  // }\r\n\r\n  mount(containingKonvaLayer) {\r\n    super.mount(containingKonvaLayer); // defines: this.compGroup\r\n\r\n    const shape = new Konva.Rect({\r\n      width: 100,\r\n      height: 50,\r\n      fill: 'red',\r\n      shadowBlur: 10,\r\n      cornerRadius: 10\r\n    });\r\n    this.compGroup.add(shape);\r\n  }\r\n}\r\nValve2.unmangledName = 'Valve2';\r\n\r\nclass Valve3 extends SmartComp {\r\n\r\n  // eslint: no-useless-constructor\r\n  // constructor(namedParams) {\r\n  //   super(namedParams);\r\n  // }\r\n\r\n  mount(containingKonvaLayer) {\r\n    super.mount(containingKonvaLayer); // defines: this.compGroup\r\n\r\n    const shape = new Konva.Rect({\r\n      width:  100,\r\n      height: 100,\r\n      fill: 'blue',\r\n      cornerRadius: [0, 10, 20, 30]\r\n    });\r\n    this.compGroup.add(shape);\r\n  }\r\n}\r\nValve3.unmangledName = 'Valve3';\r\n\r\n// our sandbox code-based component package\r\n// ... registered in our sandbox feature appInit()\r\nconst generalCompsPkg = new SmartPkg({\r\n  id:   'generalComps',\r\n  name: 'SandBox Comps',\r\n  entries: {\r\n    \"Class Comps\": [\r\n      Valve1,\r\n      Valve2,\r\n      Valve3,\r\n    ],\r\n  },\r\n});\r\n\r\n// register these components, supporting persistent file resolution\r\npkgManager.registerPkg(generalCompsPkg);\r\n","import Collage        from 'core/Collage';\r\nimport Scene          from 'core/Scene';\r\nimport SmartClassRef  from 'core/SmartClassRef';\r\nimport SmartPkg       from 'core/SmartPkg';\r\nimport pkgManager     from 'core/pkgManager';\r\nimport {createLogger} from 'util/logger';\r\nimport                     './generalComps'; // unnamed import activating it's package registration\r\n\r\nconst log = createLogger('***DIAG*** konvaSandboxSmartPkg ... ').disable(); // enable this to see JSON in logs\r\n\r\nconst Valve1 = pkgManager.getClassRef('generalComps', 'Valve1');\r\nconst Valve2 = pkgManager.getClassRef('generalComps', 'Valve2');\r\nconst Valve3 = pkgManager.getClassRef('generalComps', 'Valve3');\r\n\r\n\r\n//************************************************************************************\r\n//*** Scene: scene1\r\n//************************************************************************************\r\n\r\nconst scene1 = new Scene({\r\n  id: 'scene1',\r\n  comps: [\r\n    Valve1.createSmartObject({id: 'myValve1', x:  20, y:  20}),\r\n    Valve2.createSmartObject({id: 'myValve2', x: 150, y:  40}),\r\n    Valve3.createSmartObject({id: 'myValve3', x:  50, y: 120}),\r\n  ],\r\n  width:  280, // ... see this setting pass through our process\r\n  height: 240,\r\n});\r\n\r\n\r\n//************************************************************************************\r\n//*** Scene: scene2\r\n//************************************************************************************\r\n\r\nconst scene2 = new Scene({\r\n  id: 'scene2',\r\n  comps: [\r\n    Valve1.createSmartObject({id: 'myValve1', x:  20, y:  20}),\r\n    Valve2.createSmartObject({id: 'myValve2', x: 150, y:  40}),\r\n  ],\r\n  width:  280, // ... see this setting pass through our process\r\n  height: 125,\r\n});\r\n\r\n\r\n//**********************************************************\r\n//*** Collage: collage1\r\n//**********************************************************\r\n\r\n// create an instance of type scene1 (to live in our collage)\r\n//const scene1ClassRef = pkgManager.getClassRef('sceneView1', 'scene1'); // NORMALLY HOW DONE - HOWEVER we don't have a pkg yet\r\nconst scene1ClassRef = new SmartClassRef(scene1, 'DUMMY-PKG-NAME');      // DO THIS INSTEAD ... NOTE: this DUMMY-PKG-NAME is NOT propagated into any persistence!\r\nconst scene1Copy     = scene1ClassRef.createSmartObject({\r\n  id: 'scene1Copy',\r\n  // comps: [ // KOOL: do NOT need comps ... they are created (cloned) from the scene1 pseudoClass!\r\n  //          new Valve1({id: 'myValve1'}),\r\n  //          new Valve2({id: 'myValve2'}),\r\n  //          new Valve3({id: 'myValve3'}),\r\n  // ],\r\n  x:0,\r\n  y:0,\r\n  width:  300, // ... see this setting pass through our process\r\n  height: 250,\r\n});\r\n\r\n// create an instance of type scene2 (to live in our collage)\r\n//const scene2ClassRef = pkgManager.getClassRef('sceneView2', 'scene2'); // NORMALLY HOW DONE - HOWEVER we don't have a pkg yet\r\nconst scene2ClassRef = new SmartClassRef(scene2, 'DUMMY-PKG-NAME');      // DO THIS INSTEAD ... NOTE: this DUMMY-PKG-NAME is NOT propagated into any persistence!\r\nconst scene2Copy     = scene2ClassRef.createSmartObject({\r\n  id: 'scene2Copy',\r\n  // comps: [ // KOOL: do NOT need comps ... they are created (cloned) from the scene2 pseudoClass!\r\n  //   new Valve1({id: 'myValve1'}),\r\n  //   new Valve2({id: 'myValve2'}),\r\n  //   // new Valve3({id: 'myValve3'}), // omit JUST to make it different\r\n  // ],\r\n  x:300,\r\n  y:250,\r\n  width:  300, // ... see this setting pass through our process\r\n  height: 250,\r\n});\r\n\r\n// our Collage\r\nconst collage1 = new Collage({id: 'collage1', name: 'Collage 1', scenes: [scene1Copy, scene2Copy]});\r\n\r\n\r\n//******************************************************************************\r\n//*** konvaSandboxSmartPkg: our FIRST smartPkg!!\r\n//******************************************************************************\r\n\r\nconst konvaSandboxSmartPkg = new SmartPkg({\r\n  id:   'com.astx.KONVA',\r\n  name: 'Konva Sandbox I',\r\n  entries: {\r\n    scenes: [\r\n      scene1,\r\n      { // ... nested sub-entries mixed in with our tabs\r\n        \"More Depth\": [\r\n          scene2,\r\n        ],\r\n      },\r\n    ],\r\n    collages: [\r\n      collage1,\r\n    ],\r\n  },\r\n});\r\n\r\npkgManager.registerPkg(konvaSandboxSmartPkg);\r\n\r\n\r\n//******************************************************************************\r\n//*** CRUDE TEST: Exercise JSON persistance to insure NO runtime errors :-)\r\n//******************************************************************************\r\n\r\n// You can use the logged JSON to prime-the-pump, manually placing in a visualize-it file, and loading it in the system\r\n// 1. enable the log control (at the top of this file) to see the JSON in our logs\r\n// 2. mouse the JSON string (found in logs)\r\n// 3. into a file (ex: C:\\Users\\kevin\\Dropbox\\Camera Uploads\\visualize-it\\myFirst.vit)\r\n// 4. load the package from that file (via the visualize-it file menu)\r\n\r\nconst savedId   = konvaSandboxSmartPkg.id;  // temporarily rename, so we can load the JSON (i.e. NOT a duplicate from what is already in LeftNav)\r\nconst savedName = konvaSandboxSmartPkg.name;\r\nkonvaSandboxSmartPkg.id   = savedId   + '2'; // ... \"com.astx.KONVA2\"\r\nkonvaSandboxSmartPkg.name = savedName + 'I'; // ... \"Konva Sandbox II\"\r\n\r\nlog(`PERSISTENT TEST: JSONIZE smartPkg: `, {konvaSandboxSmartPkg});\r\nconst smartJSON = konvaSandboxSmartPkg.toSmartJSON();\r\nlog(`PERSISTENT TEST: HERE is the json: `, {smartJSON, str: JSON.stringify(smartJSON) });\r\nconst rehydratedSmartPkg = SmartPkg.fromSmartJSON(smartJSON);\r\nlog(`PERSISTENT TEST: HERE is the RE-HYDRATED smartPkg: `, {rehydratedSmartPkg});\r\n\r\nkonvaSandboxSmartPkg.id   = savedId; // reset the temporary name changes\r\nkonvaSandboxSmartPkg.name = savedName;\r\n","import {createFeature}  from 'feature-u';\r\nimport featureFlags     from 'featureFlags'\r\nimport {leftNavManager} from 'features';\r\nimport pkgManager       from 'core/pkgManager';\r\nimport                  './konvaSandbox/konvaSandboxSmartPkg'; // unnamed import activating it's package registration\r\n\r\nconst generalCompsPkg      = pkgManager.getPackage('generalComps');\r\nconst konvaSandboxSmartPkg = pkgManager.getPackage('com.astx.KONVA');\r\n\r\n// feature: sandbox\r\n//          sandbox to play with konva.js\r\nexport default createFeature({\r\n  name:    'sandbox',\r\n\r\n  enabled: featureFlags.sandbox,\r\n\r\n  // register sandbox LeftNav packages\r\n  appInit({showStatus, fassets, getState, dispatch}) {\r\n\r\n    // our sandbox code-based component package\r\n    leftNavManager.addLeftNav(generalCompsPkg);\r\n\r\n    // our sandbox resource-based system package\r\n    leftNavManager.addLeftNav(konvaSandboxSmartPkg);\r\n  },\r\n});\r\n","import verify          from 'util/verify';\r\nimport {isString,\r\n        isPlainObject} from 'util/typeCheck';\r\n\r\n\r\n/**\r\n * Encode the supplied ref into a string representation.\r\n *\r\n * - supporting an optional safeguard (obfuscate content making it\r\n *   obscure to public visibility)\r\n *\r\n * - employing embedded-recognition so the process can be reversed using\r\n *   self-recognition\r\n *\r\n * TERMINOLOGY:\r\n *\r\n * - encode:  package content into a string representation (which can\r\n *            be reversed) ... ex: obj2str\r\n *\r\n * - decode:  reverse the process of encode()\r\n *\r\n * - safeguard: obfuscate content so as to make it obscure to public\r\n *              visibility\r\n *              NOTE: this is a \"lighter weight\" process than full\r\n *                    encryption\r\n *\r\n * - embedded-recognition: the ability to recognize and reverse the\r\n *                         process of either encoding and/or\r\n *                         safeguarding, producing the original\r\n *                         ref (that was originally encoded)\r\n *\r\n * @param {string|jsonObj} ref the reference to encode\r\n * @param {boolean} [safeguard=false] an indicator as to whether the\r\n * result should be obfuscated (true) or not (false - the DEFAULT).\r\n * \r\n * @return {string} an encoded representation of the supplied ref.\r\n */\r\nexport function encode(ref, safeguard=false) {\r\n\r\n  // validate our parameters\r\n  const check = verify.prefix('encode(ref) parameter violation: ');\r\n\r\n  // ... ref\r\n  check(ref,                                 'ref is required');\r\n  check(isString(ref) || isPlainObject(ref), 'ref must be a string -or- an object literal. NOT: ', ref);\r\n\r\n  // ... safeguard\r\n  check(safeguard===true || safeguard===false, 'safeguard must be a boolean (true/false), NOT: ', safeguard);\r\n\r\n  // encode the supplied ref into a string representation\r\n  let encoding = ref;            // ... by default, a string is left un-touched\r\n  if (isPlainObject(encoding)) { // ... encode objects\r\n    encoding = demarkObjEncoding + JSON.stringify(encoding);\r\n  }\r\n\r\n  // safeguard, when requested\r\n  if (safeguard) {\r\n    encoding = demarkSafeguard + obfuscate(encoding);\r\n  }\r\n\r\n  // thats all folks :-)\r\n  return encoding;\r\n}\r\n\r\n\r\n/**\r\n * Decode the supplied ref, reversing the process of `encode()`.\r\n * \r\n * NOTE: `decode()` can be invoked on a non-encoded ref, in which case\r\n *       it will simply pass-through the un-encoded ref.  This is a\r\n *       convenience, and is made possible by embedded-recognition.\r\n * \r\n * @param {any} ref the reference object to decode ... either the\r\n * output of `encode()` (a recognized encoded string), or any other\r\n * reference (simply passed-through).\r\n * \r\n * @return {any} the decoded representation of the supplied ref.\r\n */\r\nexport function decode(ref) {\r\n\r\n  // validate our parameters\r\n  const check = verify.prefix('decode(ref) parameter violation: ');\r\n\r\n  // ... ref\r\n  check(ref, 'ref is required');\r\n\r\n  // simply pass-through any non-strig ref\r\n  if (!isString(ref)) {\r\n    return ref;\r\n  }\r\n\r\n  // KEY: at this point we know ref is a string :-)\r\n  let result = ref;\r\n\r\n  // unwind any safeguards\r\n  if (result.indexOf(demarkSafeguard) === 0) {\r\n    result = result.substring(demarkSafeguard.length);\r\n    result = deobfuscate(result);\r\n  }\r\n\r\n  // unwind any encodings\r\n  if (result.indexOf(demarkObjEncoding) === 0) {\r\n    result = result.substring(demarkObjEncoding.length);\r\n    result = JSON.parse(result);\r\n  }\r\n\r\n  // thats all folks :-)\r\n  return result;\r\n}\r\n\r\n// embedded-recognition keywords\r\nconst demarkObjEncoding = 'obj2str:';\r\nconst demarkSafeguard   = 'afesa'; // ... use a obsecure phrase, so as to NOT \"stand out\"\r\n                                   //     - pig Latin for \"safe\"\r\n                                   //     - preventing it from being uniquely identified\r\n                                   //       and harvested within a global deployment\r\n\r\n\r\nfunction obfuscate(str) {\r\n  if (!window.btoa) {\r\n    throw new Error('*** ERROR *** encode(): ENCODING NOT supported by this browser (btoa).');\r\n  }\r\n  const encoding = window.btoa(str);\r\n  return encoding;\r\n}\r\n\r\nfunction deobfuscate(str) {\r\n  if (!window.atob) {\r\n    throw new Error('*** ERROR *** encode(): DECODING NOT supported by this browser (atob).');\r\n  }\r\n  const clearTxt = window.atob(str);\r\n  return clearTxt;\r\n}\r\n","import firebase  from 'firebase/app';\r\nimport {decode}  from 'util/encoder';\r\n\r\n// initialize the Google Firebase service\r\n// ... a feature-u app-life-cycle-hook\r\nexport default async function initializeFirebase({showStatus, fassets, getState, dispatch}) {\r\n\r\n  // inform user what we are doing\r\n  showStatus('Initializing Firebase');\r\n  \r\n  // fetch our FireBase App Configuration from our own deployment site: `public/fbac`\r\n  const resp = await fetch('fbac'); // NOTE: relative path support server deployment in sub-directory\r\n  \r\n  // console.log(`xx resp.ok: ${resp.ok}, resp.status: ${resp.status} ... resp: `, resp);\r\n  if (!resp.ok) {\r\n    // NOTE: Due to routing considerations, a non-existent resource is allowed,\r\n    //       AND returns the entire content of index.html\r\n    //       IN OTHER WORDS: this condition is NEVER EXECUTED (i.e. resp.ok is ALWAYS true)\r\n    //       ... (see check below)\r\n    throw new Error(`**ERROR** Accessing /fbac resource was REJECTED with status: ${resp.status}`);\r\n  }\r\n  \r\n  // convert response to text\r\n  const txt = await resp.text();\r\n  \r\n  // check for non-existent resource (see NOTE above)\r\n  if (txt.includes('<html')) {\r\n    // NOTE: this is the only real error we will ever emit\r\n    throw new Error(`**ERROR** Non Existent Resource: /fbac`);\r\n  }\r\n  \r\n  // decode our credentials\r\n  // console.log(`xx /fbac resource content: '${txt}'`);\r\n  const firebaseAppConfig = decode(txt);\r\n  // console.log('xx firebaseAppConfig: ', firebaseAppConfig);\r\n  \r\n  // process our credentials\r\n  // NOTE: THE initializeApp() invocation generates absolutely NO error condition\r\n  //       - for example if the API key is invalid it executes through (even with a try/catch), \r\n  //         and we receive runtime errors when attempting to use the service (ex: login screen)\r\n  //         ... Error: Your API key is invalid, please check you have copied it correctly.\r\n  await firebase.initializeApp(firebaseAppConfig);\r\n}\r\n","import {createFeature}     from 'feature-u';\r\nimport featureFlags        from 'featureFlags';\r\nimport initializeFirebase  from './initializeFirebase';\r\n\r\n// feature: initFirebase\r\n//          initialize the Google Firebase service (when needed)\r\nexport default createFeature({\r\n  name: 'initFirebase',\r\n\r\n  // firebase is only required when we are using real services (i.e. when WIFI enabled)\r\n  enabled: featureFlags.useWIFI,\r\n\r\n  appInit: initializeFirebase,\r\n});\r\n","import {generateActions} from 'action-u';\r\nimport _baseUI           from './featureName';\r\n\r\nexport default generateActions.root({\r\n  [_baseUI]: { // prefix all actions with our feature name, guaranteeing they unique app-wide!\r\n\r\n    toggleUITheme: { // actions.toggleUITheme(): Action\r\n                     // > toggle the UI Theme ('light'/'dark')\r\n                     actionMeta: {},\r\n    },\r\n\r\n    setResponsiveMode: {  // actions.setResponsiveMode(responsiveMode): Action\r\n                          // > change the responsiveMode to the supplied value ('md'/'lg'/'off')\r\n                          actionMeta: {\r\n                            traits: ['responsiveMode'],\r\n                          },\r\n    },\r\n\r\n    changeView: {  // actions.changeView(viewName): Action\r\n                   // > change the curView to the supplied viewName\r\n                   actionMeta: {\r\n                     traits: ['viewName'],\r\n                   },\r\n    },\r\n\r\n    addLeftNavItem: { // actions.addLeftNavItem(leftNavKey, LeftNavComp): Action\r\n                      // > add a new LeftNav menu item to the LeftNav (ordered by leftNavKey)\r\n                      actionMeta: {\r\n                        traits: ['leftNavKey', 'LeftNavComp'],\r\n                      },\r\n    },\r\n\r\n    removeLeftNavItem: { // actions.removeLeftNavItem(leftNavKey): Action\r\n                         // > removed the supplied LeftNav menu item\r\n                         actionMeta: {\r\n                           traits: ['leftNavKey'],\r\n                         },\r\n    },\r\n\r\n  },\r\n});\r\n","/**\r\n * Expose our featureName through a mini-meta module that is\r\n * \"importable\" in all use-cases (a single-source-of-truth).\r\n */\r\nexport default 'baseUI';\r\n","/**\r\n * A \"no op\" function that does absolutely nothing (think IEFBR14 :-)\r\n */\r\nexport default function noOp() {\r\n}\r\n","import verify          from 'util/verify';\r\nimport {isString,\r\n        isPlainObject} from 'util/typeCheck';\r\nimport noOp            from 'util/noOp';\r\nimport {encode,\r\n        decode}        from 'util/encoder';\r\n\r\n/**\r\n * Store the supplied entry in local device storage.\r\n *\r\n * @param {string} key the unique key that catalogs this entry.\r\n * @param {string|jsonObj} ref the reference to store.\r\n * @param {boolean} [safeguard=false] an indicator as to whether the\r\n * entry should be obfuscated (true) or not (false - the DEFAULT).\r\n */\r\nexport function storeItem(key, ref, safeguard=false) {\r\n\r\n  // validate our parameters\r\n  const check = verify.prefix('storeItem() parameter violation: ');\r\n\r\n  // ... key\r\n  check(key,           'key is required');\r\n  check(isString(key), 'key must be a string, NOT: ', key);\r\n\r\n  // ... ref\r\n  check(ref,                                 'ref is required');\r\n  check(isString(ref) || isPlainObject(ref), 'ref must be a string -or- an object literal, NOT: ', ref);\r\n\r\n  // ... safeguard\r\n  check(safeguard===true || safeguard===false, 'safeguard must be a boolean (true/false), NOT: ', safeguard);\r\n\r\n  // encode the supplied ref into a string representation\r\n  // SUPPORTING:\r\n  //   - object encoding (to a string representation)\r\n  //     NOTE: plain strings are NOT altered in this operation\r\n  //   - safeguard (obfuscation)\r\n  const value = encode(ref, safeguard);\r\n\r\n  // store the entry into our deviceStorage\r\n  deviceStorage.setItem(key, value);\r\n}\r\n\r\n\r\n/**\r\n * Fetch the stored entry from local device storage.\r\n *\r\n * @param {string} key the unique key that catalogs this entry.\r\n * \r\n * @return {any} the entry stored from the supplied key (null for\r\n * none), implicitly unpacked to the original ref (supplied to\r\n * `storeItem()`).\r\n */\r\nexport function fetchItem(key) {\r\n\r\n  // validate our parameters\r\n  const check = verify.prefix('fetchItem() parameter violation: ');\r\n\r\n  // ... key\r\n  check(key,           'key is required');\r\n  check(isString(key), 'key must be a string, NOT: ', key);\r\n\r\n  // retrieve the entry from our deviceStorage\r\n  const value = deviceStorage.getItem(key);\r\n\r\n  // no-op for non-existent entries\r\n  if (!value) {\r\n    return null;\r\n  }\r\n\r\n  // decode the entry, unpacking it into the original form (ref)\r\n  const ref = decode(value);\r\n\r\n  // that's all folks :-)\r\n  return ref;\r\n}\r\n\r\n\r\n\r\n/**\r\n * Remove the stored entry from local device storage.\r\n *\r\n * @param {string} key the unique key of the entry to remove.\r\n */\r\nexport function removeItem(key) {\r\n\r\n  // validate our parameters\r\n  const check = verify.prefix('removeItem() parameter violation: ');\r\n\r\n  // ... key\r\n  check(key,           'key is required');\r\n  check(isString(key), 'key must be a string, NOT: ', key);\r\n\r\n  // remove the entry from our local device storage\r\n  deviceStorage.removeItem(key);\r\n}\r\n\r\n\r\n\r\n\r\n//***\r\n//*** Abstract the Web Storage API (gracefully no-oping for unsupported browsers)\r\n//***\r\n//***  NOTE 1: This API is synchronous!\r\n//***  NOTE 2: Apparently this API is available on both http (non SSL) as well as https (SSL).\r\n//***\r\n\r\n// feature detection\r\n// ... NOTE: can't just assert window.localStorage exists\r\n//           see: https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Feature-detecting_localStorage\r\nconst _localStorageAvailable = storageAvailable('localStorage');\r\nfunction storageAvailable(type) {\r\n  let storage;\r\n  try {\r\n    storage = window[type];\r\n    let x = '__storage_test__';\r\n    storage.setItem(x, x);\r\n    storage.removeItem(x);\r\n    return true;\r\n  }\r\n  catch(e) {\r\n    return e instanceof DOMException && (\r\n      // everything except Firefox\r\n      e.code === 22 ||\r\n      // Firefox\r\n      e.code === 1014 ||\r\n      // test name field too, because code might not be present\r\n      // everything except Firefox\r\n      e.name === 'QuotaExceededError' ||\r\n      // Firefox\r\n      e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\r\n           // acknowledge QuotaExceededError only if there's something already stored\r\n           (storage && storage.length !== 0);\r\n  }\r\n}\r\n\r\n// log warning when deviceStorage is NOT in affect\r\nif (!_localStorageAvailable) {\r\n  console.warn('***WARNING*** deviceStorage module ... localStorage (Web Storage API) is NOT available in this browser ... all deviceStorage usage will silently no-op!!');\r\n}\r\n\r\n// our localStorage pass-through that gracefully no-ops for unsupported browsers\r\nconst deviceStorage = _localStorageAvailable ? {\r\n  setItem:    (keyName, keyValue) => window.localStorage.setItem(keyName, keyValue),\r\n  getItem:    (keyName)           => window.localStorage.getItem(keyName),\r\n  removeItem: (keyName)           => window.localStorage.removeItem(keyName),\r\n} : {\r\n  setItem:    noOp,\r\n  getItem:    noOp,\r\n  removeItem: noOp,\r\n};\r\n\r\n// TEMP crude test of deviceStorage ... invoke these separately!\r\n// deviceStorage.setItem('WowZeeKey', 'WowZeeValue');\r\n// console.log(`test deviceStorage ... '${deviceStorage.getItem('WowZeeKey')}'`);\r\n","import {storeItem,\r\n        fetchItem,\r\n        removeItem}   from 'util/deviceStorage';\r\n\r\n/**\r\n * Store uiTheme on local device.\r\n * \r\n * @param {string} uiTheme the UI Theme to store.\r\n */\r\nexport function storeUITheme(uiTheme) {\r\n  storeItem(uiThemeKey, uiTheme);\r\n}\r\n\r\n/**\r\n * Fetch uiTheme stored on local device (if any).\r\n * \r\n * @return {string} the persisted UI Theme (null for none).\r\n */\r\nexport function fetchUITheme() {\r\n  return fetchItem(uiThemeKey);\r\n}\r\n\r\n/**\r\n * Remove uiTheme from local device.\r\n */\r\nexport function removeUITheme() {\r\n  removeItem(uiThemeKey);\r\n}\r\n\r\nconst uiThemeKey = 'uiTheme';\r\n","import {storeItem,\r\n        fetchItem,\r\n        removeItem}   from 'util/deviceStorage';\r\n\r\n/**\r\n * Store the responsiveMode on local device.\r\n * \r\n * @param {string} responsiveMode the \"responsive mode\" to store.\r\n */\r\nexport function storeResponsiveMode(responsiveMode) {\r\n  storeItem(responsiveModeKey, responsiveMode);\r\n}\r\n\r\n/**\r\n * Fetch responsiveMode stored on local device (if any).\r\n * \r\n * @return {string} the persisted \"responsive mode\" (null for none).\r\n */\r\nexport function fetchResponsiveMode() {\r\n  return fetchItem(responsiveModeKey);\r\n}\r\n\r\n/**\r\n * Remove responsiveMode from local device.\r\n */\r\nexport function removeResponsiveMode() {\r\n  removeItem(responsiveModeKey);\r\n}\r\n\r\nconst responsiveModeKey = 'responsiveMode';\r\n","import {expandWithFassets}    from 'feature-u';\r\nimport {combineReducers}      from 'redux';\r\nimport {reducerHash}          from 'astx-redux-util';\r\nimport {slicedReducer}        from 'feature-redux';\r\nimport _baseUI                from './featureName';\r\nimport _baseUIAct             from './actions';\r\nimport {fetchUITheme}         from './uiThemeStorage';\r\nimport {fetchResponsiveMode}  from './responsiveModeStorage';\r\nimport {createSelector}       from 'reselect';\r\nimport {fnRefEncode,\r\n        fnRefDecode}          from 'util/reduxFnRef';\r\n\r\n\r\n// ***\r\n// *** Our feature reducer, managing our state.\r\n// ***\r\n\r\nconst reducer = slicedReducer(_baseUI, expandWithFassets( (fassets) => combineReducers({\r\n\r\n  // uiTheme: 'light'/'dark'\r\n  uiTheme: reducerHash({\r\n    [_baseUIAct.toggleUITheme]: (state, action) => state==='dark' ? 'light' : 'dark',\r\n  }, fetchUITheme() ), // initialState (default to a persistent state)\r\n\r\n  // responsiveMode: 'md'/'lg'/'off'\r\n  responsiveMode: reducerHash({\r\n    [_baseUIAct.setResponsiveMode]: (state, action) => action.responsiveMode,\r\n  }, fetchResponsiveMode() || 'sm' ), // initialState (from device storage, default to small (a tablet))\r\n\r\n  // the current view\r\n  curView: reducerHash({ // TODO: suspect curView is OBSOLETE for visualize-it ... we are using the dynamic Tab Manager\r\n    [_baseUIAct.changeView]:   (state, action) => action.viewName,\r\n//  AI: DECIDE_AUTH_USER_NEEDED\r\n//  [fassets.actions.signOut]: (state, action) => 'eateries', // AI: Inappropriate app knowledge dependency (really part of an @@INIT app payload) ... AI: streamline in \"INITIALIZATION\" journal entry\r\n  }, 'uninitialized'), // initialState\r\n\r\n  // leftNavItems: {leftNavKey1: LeftNavComp1, leftNavKey2: LeftNavComp2, ...}\r\n  leftNavItems: reducerHash({\r\n    [_baseUIAct.addLeftNavItem]:    (state, action) => ({...state, ...{[action.leftNavKey]: fnRefEncode(action.LeftNavComp)}}),\r\n    [_baseUIAct.removeLeftNavItem]: (state, action) => {\r\n      const {[action.leftNavKey]: omit, ...remainder} = state;\r\n      return remainder;\r\n    },\r\n  }, {}), // initialState\r\n\r\n}) ) );\r\n\r\nexport default reducer;\r\n\r\n\r\n// ***\r\n// *** Various Selectors\r\n// ***\r\n\r\n/** Our feature state root (via slicedReducer as a single-source-of-truth) */\r\nconst getFeatureState           = (appState) => reducer.getSlicedState(appState);\r\nconst gfs = getFeatureState;      // ... concise alias (used internally)\r\n\r\n                                  /** UI Theme: 'light'/'dark' */\r\nexport const getUITheme         = (appState) => gfs(appState).uiTheme || 'light'; // default to 'light' (on first occurrence -or- deviceStorage() NOT supported)\r\n\r\n                                  /** Responsive Mode: 'md'/'lg'/'off' */\r\nexport const getResponsiveMode  = (appState) => gfs(appState).responsiveMode;\r\n\r\n                                  /** current view (ex: 'eateries') */\r\nexport const curView            = (appState) => gfs(appState).curView;\r\n\r\n                                       /** raw leftNavItems */\r\nconst getLeftNavItems = (appState)  => gfs(appState).leftNavItems;\r\n\r\n                                       /** ordered leftNavItems */\r\nexport const getOrderedLeftNavItems  = createSelector( // return: [ [leftNavKey1, LeftNavItem1], [leftNavKey2, LeftNavItem2], ... ]\r\n  getLeftNavItems,\r\n  (leftNavItems) => {\r\n\r\n    // convert to [ [leftNavKey1, encodedLeftNavItem1], [leftNavKey2, encodedLeftNavItem2], ... ]\r\n    const encodedEntries = Object.entries( leftNavItems );\r\n\r\n    // decode component functions [ [leftNavKey1, LeftNavItem1], [leftNavKey2, LeftNavItem2], ... ]\r\n    const entries = encodedEntries.map( ([leftNavKey, encodedLeftNavComp]) => [leftNavKey, fnRefDecode(encodedLeftNavComp)]);\r\n\r\n    // order by leftNavKey\r\n    const orderedEntries = entries.sort( ([k1], [k2]) => k1.localeCompare(k2) );\r\n\r\n    return orderedEntries;\r\n  }\r\n);\r\n","/**\r\n * A function encoding technique which allows function references to be\r\n * visible in Redux DevTools.\r\n * \r\n * As a general rule, redux recommends using plain serializable state within.\r\n * ... https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state\r\n * \r\n * In some cases, however, the dynamics afforded by using functional state\r\n * (or react functional components) is extremely powerful.\r\n * \r\n * If you are NOT relying on the ability to persist and rehydrate redux\r\n * state, you may wish to use functional state to gain additional\r\n * dynamics in advanced systems.\r\n * \r\n * Functional state does in fact work, with the caveats mentioned above,\r\n * however one \"quirkiness\" is that functional state is completely\r\n * invisible in the Redux DevTools ... which can be rather confusing :-(\r\n * \r\n * This simple wrapper, provides visibility of functions (and react\r\n * functional components) held within your redux store.\r\n * \r\n * ```js\r\n * someState: {               // Redux DevTools\r\n *   field1: fn,              // completely hidden: it is functional, just confusing\r\n *   field2: fnRefEncode(fn), // visible as:        field2: {fnRef: \"hidden in Redux DevTools\"}\r\n * }\r\n * ```\r\n * \r\n * When using this wrapper, don't forget to decode it ... for example\r\n * \r\n * ```js\r\n * fnRefDecode(someState.field2)(); // invocation of encoded redux state function\r\n * ```\r\n */\r\n\r\nexport const fnRefEncode = (fn) => ({fn, fnRef: 'hidden in Redux DevTools'});\r\n\r\nexport const fnRefDecode = (fnRef) => fnRef.fn;\r\n","import {createLogic}          from 'redux-logic';\r\nimport _baseUI                from './featureName';\r\nimport _baseUIAct             from './actions';\r\nimport {getUITheme,\r\n        getResponsiveMode}    from './state';\r\nimport {storeUITheme}         from './uiThemeStorage';\r\nimport {storeResponsiveMode}  from './responsiveModeStorage';\r\n\r\n/**\r\n * Monitor UI Theme changes, persisting the latest theme in our device storage.\r\n */\r\nexport const persistUITheme = createLogic({\r\n\r\n  name: `${_baseUI}.persistUITheme`,\r\n  type: String(_baseUIAct.toggleUITheme),\r\n\r\n  process({getState, action, fassets}, dispatch, done) {\r\n    storeUITheme( getUITheme(getState()) );\r\n    done();\r\n  },\r\n\r\n});\r\n\r\n\r\n/**\r\n * Monitor responsiveMode changes, persisting the latest in our device storage.\r\n */\r\nexport const persistResponsiveMode = createLogic({\r\n\r\n  name: `${_baseUI}.persistResponsiveMode`,\r\n  type: String(_baseUIAct.setResponsiveMode),\r\n\r\n  process({getState, action, fassets}, dispatch, done) {\r\n    storeResponsiveMode( getResponsiveMode(getState()) );\r\n    done();\r\n  },\r\n\r\n});\r\n\r\n\r\n// promote all logic modules for this feature\r\n// ... NOTE: individual logic modules are unit tested using the named exports.\r\nexport default [\r\n  persistUITheme,\r\n  persistResponsiveMode,\r\n];\r\n","import React                    from 'react';\r\nimport PropTypes                from 'prop-types';\r\n\r\nimport {useDispatch}            from 'react-redux';\r\nimport {useFassets}             from 'feature-u';\r\n\r\nimport {tabManager,\r\n        TabControllerScene,\r\n        TabControllerCollage,\r\n        TabControllerClass}     from 'features';\r\n\r\nimport genDualClickHandler      from 'util/genDualClickHandler';\r\nimport {createLogger}           from 'util/logger';\r\nimport {isPlainObject,\r\n        isClass}                from 'util/typeCheck';\r\n\r\nimport SmartModel               from 'core/SmartModel';\r\nimport Scene                    from 'core/Scene';\r\nimport Collage                  from 'core/Collage';\r\nimport PseudoClass              from 'core/PseudoClass';\r\n\r\nimport {LeftNavCollapsibleItem} from 'features';\r\nimport ExpandLessIcon           from '@material-ui/icons/ExpandMore';   // in effect WHEN EXPANDED  ... i.e. clicking will collapse\r\nimport ExpandMoreIcon           from '@material-ui/icons/ChevronRight'; // in effect WHEN COLLAPSED ... i.e. clicking will expand\r\nimport TreeItem                 from '@material-ui/lab/TreeItem';\r\nimport TreeView                 from '@material-ui/lab/TreeView';\r\nimport {makeStyles}             from '@material-ui/core/styles';\r\n\r\n\r\n\r\n\r\n// our internal diagnostic logger (normally disabled)\r\nconst log = createLogger('***DIAG*** <LeftNavMenuPallet> ... ').disable();\r\n\r\n\r\n/**\r\n * The top-level left-nav menu pallet visualizing the supplied SmartPkg.\r\n */\r\nfunction LeftNavMenuPallet({smartPkg}) {\r\n\r\n  const classes     = useStyles();\r\n  const dispatch    = useDispatch();\r\n  const activateTab = useFassets('actions.activateTab');\r\n\r\n  // PERF: consider useCallback()\r\n  //       HOWEVER not really needed (I THINK)\r\n  //       ... due to the top-level memoization of LeftNavMenuPallet\r\n  // NOTE: technically 2nd param (tabName) is NOT needed, but kept for diagnostic logging\r\n  const handleActivateTab = (tabId, tabName, preview) => {\r\n    log(`handleActivateTab( tabId:'${tabId}', tabName:'${tabName}', preview=${preview} )`);\r\n    dispatch( activateTab(tabId, preview) );\r\n  };\r\n\r\n  const dualHandleActivateTab = genDualClickHandler(\r\n    (tabId, tabName) => handleActivateTab(tabId, tabName, true), // singleClick: preview   tab ... preview is true\r\n    (tabId, tabName) => handleActivateTab(tabId, tabName, false) // doubleClick: permanent tab ... preview is false\r\n  );\r\n\r\n  // render our TreeView/TreeItem generation process driven by smartPkg content!\r\n  log(`rendering top-level content for smartPkg.id: ${smartPkg.id} ... expecting ONE TIME (for this entry)`);\r\n  return (\r\n    <LeftNavCollapsibleItem name={smartPkg.getPkgDesc()}>\r\n      <TreeView className={classes.root}\r\n                defaultCollapseIcon={<ExpandLessIcon/>}\r\n                defaultExpandIcon={<ExpandMoreIcon/>}>\r\n        { genTreeItems(smartPkg, dualHandleActivateTab) }\r\n      </TreeView>\r\n    </LeftNavCollapsibleItem>\r\n  );\r\n\r\n}\r\n\r\n// props validation\r\nLeftNavMenuPallet.propTypes = {\r\n  smartPkg: PropTypes.object.isRequired, // a SmartPkg object\r\n};\r\n\r\n// PERF: memo is critical (re-render is frequent and we do a lot of processing to generate our render)\r\n//       - bypasses renderer if props are the same (can override shallow comparison with a second fn param to memo()\r\n//       - also still allows re-render on hooks direction\r\nexport default React.memo(LeftNavMenuPallet);\r\n\r\n// styling\r\nconst useStyles = makeStyles( theme => ({\r\n  root: {\r\n    // height: 216, // WowZee: Omitting height FIXED the tree, allowing it's height to grow dynamically\r\n    flexGrow: 1,\r\n    maxWidth: 400,\r\n  },\r\n}) );\r\n\r\n\r\n// generate TreeItem structure (with depth) driven from the supplied smartPkg\r\nfunction genTreeItems(smartPkg, handleActivateTab) {\r\n\r\n  // recursive accumulation of all TreeItems (returns DOM Array)\r\n  function accumTreeItems(entry, accumulativeId=smartPkg.getPkgName()) {\r\n\r\n    // for plain objects, each member is a directory node\r\n    if (isPlainObject(entry)) {\r\n\r\n      const directoryAccum = [];\r\n\r\n      // pass through through all directory nodes (object members),\r\n      // ... generated a TreeItem directory node\r\n      // ... and recurse into each\r\n      for (const dirName in entry) {\r\n        const dirContent = entry[dirName];\r\n\r\n        const id = `${accumulativeId}-${dirName}`;\r\n\r\n        log(`genTreeItems(): TreeItem directory node: ${dirName}`);\r\n        directoryAccum.push((\r\n          <TreeItem key={id}\r\n                    nodeId={id}\r\n                    label={dirName}>\r\n            {accumTreeItems(dirContent, id)}\r\n          </TreeItem>\r\n        ));\r\n      }\r\n\r\n      return directoryAccum;\r\n    }\r\n\r\n    // for array entries\r\n    else if (Array.isArray(entry)) {\r\n\r\n      const entryAccum = entry.map( (arrItem) => {\r\n\r\n        // normally this is a smartObj ... generate entry to be displayed in our tabManager\r\n        if (arrItem instanceof SmartModel) {\r\n\r\n          const smartObj = arrItem;\r\n          const id       = `${accumulativeId}-${smartObj.id}`;\r\n\r\n          // register this entry to our tabManager (allowing it to be visualized)\r\n          let tabController = null;\r\n          if (smartObj instanceof Scene) {\r\n            tabController = new TabControllerScene(id, smartObj.name, smartObj);\r\n          }\r\n          else if (smartObj instanceof Collage) {\r\n            tabController = new TabControllerCollage(id, smartObj.name, smartObj);\r\n          }\r\n          else {\r\n            const errMsg = `***ERROR*** <LeftNavMenuPallet> found UNSUPPORTED smartObj entry (under accumulativeId: ${id})  ... must be a Scene or Collage ... see logs for entry`\r\n            console.error(errMsg, {smartObj});\r\n            throw new Error(errMsg);\r\n          }\r\n          tabManager.registerTab(tabController);\r\n\r\n          log(`genTreeItems(): TreeItem tabManager node ... id: ${id}`);\r\n          return (\r\n            <TreeItem key={id}\r\n                      nodeId={id}\r\n                      label={smartObj.name}\r\n                      onClick={() => handleActivateTab(id, smartObj.name)}/>\r\n          );\r\n        }\r\n\r\n        // can be a real class reference\r\n        else if (isClass(arrItem)) {\r\n          const compClass = arrItem;\r\n\r\n          const compName = PseudoClass.getClassName(compClass);\r\n          \r\n          const id = `${accumulativeId}-${compName}`;\r\n\r\n          // register this entry to our tabManager (allowing it to be visualized)\r\n          tabManager.registerTab( new TabControllerClass(id, compName, compClass) );\r\n          \r\n          log(`genTreeItems(): TreeItem tabManager node ... id: ${id}`);\r\n          return (\r\n            <TreeItem key={id}\r\n                      nodeId={id}\r\n                      label={compName}\r\n                      onClick={() => handleActivateTab(id, compName)}/>\r\n          );\r\n\r\n        }\r\n\r\n        // can be a nested sub-directory (mixed in with our tab activation entries)\r\n        else if (isPlainObject(arrItem)) {\r\n          return accumTreeItems(arrItem, accumulativeId);\r\n        }\r\n\r\n        // other array items are NOT supported (should not happen - defensive only)\r\n        else {\r\n          const errMsg = `***ERROR*** <LeftNavMenuPallet> found UNSUPPORTED array entry (under accumulativeId: ${accumulativeId})  ... must be a smartObj or plain nested directory object ... see logs for entry`\r\n          console.error(errMsg, {arrItem});\r\n          throw new Error(errMsg);\r\n        }\r\n      });\r\n\r\n      return entryAccum;\r\n    }\r\n\r\n    // other entries are NOT supported (should not happen - defensive only)\r\n    else {\r\n      const errMsg = `***ERROR*** <LeftNavMenuPallet> found UNSUPPORTED SmartPkg entry (under accumulativeId: ${accumulativeId})  ... must be a plain directory object or an array of smartObjs ... see logs for entry`\r\n      console.error(errMsg, {entry});\r\n      throw new Error(errMsg);\r\n    }\r\n\r\n  }\r\n\r\n  // invoke our recursive routine\r\n  return accumTreeItems(smartPkg.entries);\r\n}\r\n","/**\r\n * genDualClickHandler is a generator function that supports BOTH the\r\n * registration of single/double click handlers.\r\n *\r\n * This is a work-around hack for the LACK of support from React for\r\n * dual single/double click handler!!\r\n * \r\n * React currently support both `onClick` and `onDoubleClick` event\r\n * handlers.  However when BOTH are needed (i.e. registered) on the\r\n * same element, BOTH are fired (`onClick` multiple times, and\r\n * `onDoubleClick` for the double click).\r\n *\r\n * React has really dropped the ball on this, as many threads state\r\n * they are doing the right thing, because `onClick` is **NOT** an\r\n * `onSingleClick`, and that clients should do the kind of HACK found\r\n * here!\r\n\r\n * While it is true that `onClick` is NOT an `onSingleClick`, **THE\r\n * OBVIOUS ANSWER** is for them to **SUPPORT** an `onSingleClick`\r\n * handler, and simplify everyone's life, rather than expecting\r\n * clients to propagated hacks like this!!! _enough ranting_.\r\n *\r\n * @param {function} onSingleClick the callback hook to invoke when a\r\n * **single click** occurs.\r\n *\r\n * @param {function} onDoubleClick the callback hook to invoke when a\r\n * **double click** occurs.\r\n *\r\n * @param {int} [delay=250] the optional delay (in mills) to wait for\r\n * the second click ... DEFAULT: 250.\r\n *\r\n * @returns {function} the generated handler to register to React's\r\n * `onClick` event handler.\r\n */\r\n\r\nexport default function genDualClickHandler(onSingleClick, onDoubleClick, delay=250) {\r\n\r\n  let timeoutID = null;\r\n\r\n  return function (...rest) { // onClick will pass event, but use ...rest to support any signature\r\n    if (!timeoutID) { // FIRST CLICK: create timeout (waiting for potential second click)\r\n      timeoutID = setTimeout(function () {\r\n        onSingleClick(...rest); // invoke onSingleClick() - timeout has passed (with no additional clicks)\r\n        timeoutID = null;       // reset our timeout indicator\r\n      }, delay);\r\n    }\r\n    else { // SECOND CLICK (within timeout period)\r\n      clearTimeout(timeoutID); // clear our timeout\r\n      timeoutID = null;        // reset our timeout indicator\r\n      onDoubleClick(...rest);  // invoke onDoubleClick(event)\r\n    }\r\n  };\r\n\r\n}\r\n","import React              from 'react';\r\nimport LeftNavMenuPallet  from './comp/LeftNavMenuPallet';\r\nimport SmartPkg           from 'core/SmartPkg';\r\nimport verify             from 'util/verify';\r\n\r\n\r\n/**\r\n * LeftNavManager is an agent managing LeftNav items.\r\n */\r\nclass LeftNavManager {\r\n\r\n  /**\r\n   * Create a LeftNavManager.\r\n   */\r\n  constructor() {\r\n\r\n    // carve out our state\r\n    // ... injected by: baseUI feature.appInit()\r\n    // ... all other state managed by redux\r\n    this.fassets  = null;\r\n    this.dispatch = null;\r\n    this.leftNavCache = []; // SmartPkg[]\r\n  }\r\n\r\n  /**\r\n   * Internal method that injects operational dependencies into self\r\n   * ... invoked early in the startup process by feature.appInit()\r\n   * @private\r\n   */\r\n  injectDependency(fassets, dispatch) {\r\n\r\n    // retain operational dependencies\r\n    this.fassets  = fassets;\r\n    this.dispatch = dispatch;\r\n\r\n    // process any cached entries (waiting to be operational)\r\n    this.leftNavCache.forEach( (smartPkg) => this.processAddLeftNav(smartPkg) );\r\n    this.leftNavCache = []; // clear the cache\r\n  }\r\n\r\n  /**\r\n   * Internal method that processes addLeftNav() requests.\r\n   * @private\r\n   */\r\n  processAddLeftNav(smartPkg) {\r\n    // cache request, when self it not yet operational\r\n    if (!this.fassets) {\r\n      this.leftNavCache.push(smartPkg);\r\n    }\r\n    // process request\r\n    else {\r\n      this.dispatch( this.fassets.actions.addLeftNavItem(smartPkg.getPkgDesc(), () => (\r\n        <LeftNavMenuPallet smartPkg={smartPkg}/>\r\n      )) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display the supplied package in the LeftNav menu.\r\n   *\r\n   * NOTE: To be operational, this method requires the injection of\r\n   *       fassets/dispatch (see: injectDependency()). If invoked\r\n   *       prior to this, the request will be cached, to be executed\r\n   *       later (minimizing feature order dependency).\r\n   *\r\n   * @param {SmartPkg} smartPkg - the package to be registered.\r\n   */\r\n  addLeftNav(smartPkg) {\r\n\r\n    // validate parameters\r\n    const check = verify.prefix(`${this.constructor.name}.addLeftNav() parameter violation: `);\r\n\r\n    // ... smartPkg\r\n    check(smartPkg,                     'smartPkg is required');\r\n    check(smartPkg instanceof SmartPkg, 'smartPkg must be a SmartPkg instance');\r\n\r\n    // process request\r\n    this.processAddLeftNav(smartPkg);\r\n  }\r\n\r\n  // AI: + removeLeftNav(smartPkg?): void <<< L8TR\r\n}\r\n\r\n// expose our single leftNavManager utility ... AI: singleton code smell ... see if fassets entry will suffice (if this works can simply be the standard action)\r\nconst leftNavManager = new LeftNavManager();\r\nexport default leftNavManager;\r\n","import React                    from 'react';\r\n\r\nimport {makeStyles}             from '@material-ui/core/styles';\r\n\r\nimport Drawer                   from '@material-ui/core/Drawer';\r\nimport List                     from '@material-ui/core/List';\r\nimport Toolbar                  from '@material-ui/core/Toolbar';\r\n\r\nimport {getOrderedLeftNavItems} from '../state';\r\nimport {useSelector}            from 'react-redux'\r\n\r\n\r\n/**\r\n * LeftNav: our LeftNav component that accumulates menu items \r\n * via a programmatic API: fassets.action.activateTab()\r\n */\r\nexport default function LeftNav() {\r\n\r\n  const classes = useStyles();\r\n\r\n  const orderedLeftNavItems = useSelector((appState) => getOrderedLeftNavItems(appState), []);\r\n\r\n  // LeftNav is dynamic, only displayed when it has entries\r\n  if (orderedLeftNavItems.length <= 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Drawer className={classes.leftNav}\r\n            variant=\"permanent\"\r\n            classes={{\r\n              paper: classes.leftNavPaper,\r\n            }}>\r\n\r\n      <Toolbar variant=\"dense\"\r\n               comment=\"spacer (hidden UNDER AppBar) so our LeftNav isn't covered up by the AppBar\"/>\r\n\r\n      <List>\r\n        {orderedLeftNavItems.map( ([leftNavKey, LeftNavComp]) => <LeftNavComp key={leftNavKey}/> )}\r\n      </List>\r\n    </Drawer>\r\n  );\r\n}\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n\r\n  leftNav: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n\r\n  leftNavPaper: { // match same width in our LeftNav Drawer usage\r\n    width: drawerWidth,\r\n\r\n    //? // AI: ?? try some simple css (advanced) TO implement resizing\r\n    //? // RESULT: KINDA WORKS \r\n    //? //         - only operates in Chrome (NOT Edge) ... didn't test anything else\r\n    //? //         - resizes the LeftNav GREAT\r\n    //? //         - does NOT propagate to other elms (just overlays the main page) ... prob need some programmatic event handler\r\n    //? //         - kinda quirky (with little corner frame)\r\n    //? resize: 'horizontal', // KOOL: kinda works\r\n    //? // NOT NEEDED: border: '1px solid #333',\r\n    //? // NOT NEEDED: overflow: 'auto',\r\n  },\r\n\r\n}) );\r\n\r\n\r\n\r\n","import React,\r\n       {useState,\r\n        useCallback,\r\n        useMemo}      from 'react';\r\n//import PropTypes      from 'prop-types'; ... AI: DECIDE_AUTH_USER_NEEDED\r\n\r\nimport {useFassets}   from 'feature-u';\r\n\r\nimport IconButton     from '@material-ui/core/IconButton';\r\nimport Menu           from '@material-ui/core/Menu';\r\nimport UserIcon       from '@material-ui/icons/AccountCircle';\r\n//import Typography     from '@material-ui/core/Typography'; ... AI: DECIDE_AUTH_USER_NEEDED\r\n\r\n\r\n/**\r\n * UserMenu: our UserMenu component that accumulates menu items via use contract.\r\n */\r\nexport default function UserMenu({curUser}) {\r\n\r\n  const [anchorUserMenu, setAnchorUserMenu] = useState(null);\r\n  const userMenuOpen = useMemo(() => Boolean(anchorUserMenu), [anchorUserMenu]);\r\n\r\n  const openUserMenu = useCallback((event) => setAnchorUserMenu(event.currentTarget), []);\r\n  _closeUserMenu     = useCallback(()      => setAnchorUserMenu(null),                []);\r\n\r\n  const userMenuItems        = useFassets('AppMotif.UserMenuItem.*@withKeys');\r\n  const orderedUserMenuItems = useMemo(() => (\r\n    [...userMenuItems].sort(([item1Key], [item2Key]) => item1Key.localeCompare(item2Key))\r\n  ), [userMenuItems]);\r\n\r\n  return (\r\n    <div>\r\n      <IconButton color=\"inherit\"\r\n                  onClick={openUserMenu}>\r\n        <UserIcon/>\r\n        {/* ... AI: DECIDE_AUTH_USER_NEEDED\r\n        <Typography variant=\"subtitle2\" color=\"inherit\" noWrap>\r\n          &nbsp;{curUser.name}\r\n        </Typography>\r\n        */}\r\n      </IconButton>\r\n      <Menu anchorEl={anchorUserMenu}\r\n            anchorOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'right',\r\n            }}\r\n            transformOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'right',\r\n            }}\r\n            open={userMenuOpen}\r\n            onClose={closeUserMenu}>\r\n        {orderedUserMenuItems.map( ([fassetsKey, UserMenuItem]) => <UserMenuItem key={fassetsKey}/> )}\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n\r\n// AI: DECIDE_AUTH_USER_NEEDED\r\n//UserMenu.propTypes = {\r\n//  curUser: PropTypes.object.isRequired,\r\n//};\r\n\r\n\r\n\r\n/**\r\n * Utility function that closes our user menu.\r\n */\r\nexport function closeUserMenu() { // exported for use by our own: UserMenuItem\r\n  if (_closeUserMenu) {\r\n    _closeUserMenu();\r\n  }\r\n}\r\nlet _closeUserMenu = null;\r\n","import SmartPkg    from './SmartPkg';\r\nimport pkgManager  from './pkgManager';\r\nimport verify      from 'util/verify';\r\n\r\n/**\r\n * Load a package (SmartPkg) from an external resource (ex: web or\r\n * local file) and catalog it in pkgManager.\r\n *\r\n * The newly loaded package will automatically be registered in pkgManager\r\n * (via pkgManager.registerPkg()).\r\n *\r\n * @param {PkgResourcePath} [pkgResourcePath] - the optional resource\r\n * path of the package to retrieve.  When not supplied, an interactive\r\n * file picker dialog will be presented.\r\n *\r\n * @returns {SmartPkg via Promise} the newly loaded package (undefined\r\n * when user cancels the picker dialog).\r\n * \r\n * @throws {Error} an Error is thrown in various scenarios\r\n * (pkgResourcePath not found, uninterpretable resource content,\r\n * invalid params, etc.).\r\n */\r\nexport async function openPkg(pkgResourcePath) {\r\n  // validate parameters\r\n  const check = verify.prefix('openPkg() parameter violation: ');\r\n\r\n  // ... pkgResourcePath (when supplied)\r\n  if (pkgResourcePath) {\r\n    check(pkgResourcePath,       'pkgResourcePath is currently NOT a supported param (omit it to activate the \"interactive file picker dialog\")'); // AI: add support for pkgResourcePath\r\n    check(pkgResourcePath===123, 'pkgResourcePath (when supplied) must be a YetUnknown'); // AI: future TEMPLATE\r\n  }\r\n  else { // ... for interactive file picker dialog\r\n    // insure we have access to the \"Native File System API TRIAL\"\r\n    if (!window.chooseFileSystemEntries) {\r\n      throw new Error('***ERROR*** openPkg() the \"Native File System API TRIAL\" is NOT available in this environment :-(')\r\n        .defineAttemptingToMsg('use the interactive file picker dialog');\r\n    }\r\n  }\r\n\r\n  // define our fileHandle\r\n  // ... AI: determine how to retain a neutral version of this resource, for \"save\" operations (possibly in loaded SmartPkg)\r\n  let fileHandle = null;\r\n\r\n  // ... when pkgResourcePath IS supplied\r\n  if (pkgResourcePath) {\r\n    // NOTE: currently errors out (in parameter validation above)\r\n    // AI: figure this out\r\n  }\r\n  // ... when pkgResourcePath NOT supplied\r\n  else {\r\n    // select the fileHandle via an interactive file picker dialog\r\n    try {\r\n      fileHandle = await window.chooseFileSystemEntries({\r\n        type: 'openFile',\r\n        accepts: [{\r\n          description: 'visualize-it file',\r\n          extensions: ['vit'],\r\n          mimeTypes: ['application/json'],\r\n        }],\r\n      });\r\n    }\r\n    catch(err) {\r\n      // prune expected errors\r\n      if (err.message === 'The user aborted a request.') { // ... user canceled request\r\n        return; // return undefined when user cancels the picker dialog (as documented above)\r\n      }\r\n      // re-throw \"qualified\" unexpected errors\r\n      throw err.defineAttemptingToMsg('use the file picker dialog');\r\n    }\r\n  }\r\n\r\n  // load the file blob\r\n  // ... NOTE: file is w3c - https://w3c.github.io/FileAPI/#dfn-file\r\n  // ... for now, just pass through unexpected errors\r\n  const file = await fileHandle.getFile();\r\n\r\n  // resolve the file content\r\n  // ... see: https://w3c.github.io/FileAPI/#text-method-algo\r\n  // ... for now, just pass through unexpected errors\r\n  const fileContent = await file.text();\r\n\r\n  // resolve content to json\r\n  let smartJSON = null\r\n  try {\r\n    smartJSON = JSON.parse(fileContent);\r\n  }\r\n  catch(err) { // SyntaxError\r\n    // something about err emitted from JSON, doesn't show attemptingToMsg in discloseError() detail\r\n    // >>> throw err.defineAttemptingToMsg('interpret resource as smartJSON in openPkg()');\r\n    // ... suspect it is somehow NOT purely Error based (not really sure what this is)\r\n    // ... for now re-create it, but concerned may loose something out of the original\r\n    throw new Error(`INVALID JSON - ${err.message}`)\r\n    .defineUserMsg('Please select a valid visualize-it package'); // consider this a user error (in their selection)\r\n  }\r\n\r\n  // resolve the json to a SmartPkg\r\n  // ... this auto adorns .defineAttemptingToMsg()\r\n  const pkg = SmartPkg.fromSmartJSON(smartJSON);\r\n\r\n  // retain the pkgResourcePath\r\n  pkg.setPkgResourcePath(fileHandle);\r\n\r\n  // register this package in our pkgManager\r\n  pkgManager.registerPkg(pkg);\r\n\r\n  // that's all folks\r\n  return pkg;\r\n}\r\n\r\n/**\r\n * Save the supplied package (SmartPkg) to an external resource (ex:\r\n * web or local file).\r\n *\r\n * @param {SmartPkg} pkg - the package to be saved.\r\n * @param {boolean} [saveAs=false] - true: save in a user\r\n * selected file, false: save in the original pkg's `pkgResourcePath`.\r\n *\r\n * @returns {void | 'UserCancel' via Promise} a \"void\" promise is\r\n * resolved when successfully complete -or- 'UserCancel' when user\r\n * cancels the request.\r\n * \r\n * @throws {Error} an Error is thrown in various unexpected scenarios.\r\n */\r\nexport async function savePkg(pkg, saveAs=false) {\r\n  // validate parameters\r\n  const check = verify.prefix('savePkg() parameter violation: ');\r\n\r\n  // ... pkg\r\n  check(pkg,                     'pkg is required')\r\n  check(pkg instanceof SmartPkg, 'pkg must be a SmartPkg');\r\n\r\n  // ... saveAs\r\n  if (saveAs) {\r\n    check(saveAs === true || saveAs === false, 'saveAs must be a boolean (when supplied)');\r\n  }\r\n\r\n  // insure we have access to the \"Native File System API TRIAL\"\r\n  if (!window.chooseFileSystemEntries) {\r\n    throw new Error('***ERROR*** savePkg() the \"Native File System API TRIAL\" is NOT available in this environment :-(')\r\n      .defineAttemptingToMsg('save a package to a local file system');\r\n  }\r\n\r\n  // create the JSON content, representing our pkg\r\n  // ... placement of this process is crucial - any unexpected errors\r\n  //     occurring here will short-circuit the creation of an empty file!\r\n  const smartJSON = pkg.toSmartJSON();\r\n  const content   = JSON.stringify(smartJSON);\r\n\r\n  // locate the file where the pkg will be saved\r\n  let fileHandle = saveAs ? undefined : pkg.getPkgResourcePath();\r\n  // ... conditionally prompt the user to select the file\r\n  //     (either there is no `pkg.pkgResourcePath`, or a `saveAs` operation was requested)\r\n  if (!fileHandle) {\r\n    try {\r\n      fileHandle = await window.chooseFileSystemEntries({\r\n        type: 'saveFile',\r\n        accepts: [{\r\n          description: 'visualize-it file',\r\n          extensions: ['vit'],\r\n          mimeTypes: ['application/json'],\r\n        }],\r\n      });\r\n    }\r\n    catch (err) {\r\n      // prune expected errors\r\n      if (err.name === 'AbortError') { // ... user canceled request\r\n        return 'UserCancel';\r\n      }\r\n      // re-throw \"qualified\" unexpected errors\r\n      throw err.defineAttemptingToMsg(`select the file to save the \"${pkg.getPkgDesc()}\" package`);\r\n    }\r\n  }\r\n\r\n  // write the file\r\n  try {\r\n    // create a writer (request permission if necessary)\r\n    const writer = await fileHandle.createWriter();\r\n\r\n    // write the content\r\n    await writer.write(0, content);\r\n\r\n    // close the file and write the contents to disk\r\n    await writer.close();\r\n  }\r\n  catch(err) {\r\n    // prune expected errors\r\n    if (err.name === 'NotAllowedError') { // ... user did not allow the file write\r\n      err.defineUserMsg('User disallowed the file write');\r\n    }\r\n    // re-throw \"qualified\" unexpected errors\r\n    throw err.defineAttemptingToMsg(`save the \"${pkg.getPkgDesc()}\" package`);\r\n  }\r\n\r\n  // retain the pkgResourcePath\r\n  pkg.setPkgResourcePath(fileHandle);\r\n\r\n}\r\n\r\n\r\n//******************************************************************************\r\n//*** Specifications\r\n//******************************************************************************\r\n\r\n/**\r\n * @typedef {Unknown} PkgResourcePath\r\n *\r\n * PkgResourcePath is intended to be a generic abstraction that\r\n * encapsulates the resource path of where a SmartPkg is persisted\r\n * (either a file, or url, etc.).\r\n *\r\n * Currently it's type is limited to the FileSystemFileHandle _(a\r\n * Native File System type)_.\r\n * \r\n * When a SmartPkg is persisted (i.e. pulled from, or saved to a\r\n * file/url), it will contain a pkgResourcePath.\r\n * - this merely identifies it's persistent form and provides a\r\n *   convenient means by which changes can be saved\r\n * - NOTE: the SmartPkg.pkgResourcePath attribute is NOT persisted,\r\n *         rather it is retained as a result of an open/save operation.\r\n *\r\n * AI: More research is needed to expand pkgResourcePath to it's more\r\n *     generic form.\r\n *     - regarding FileSystemFileHandle\r\n *       * it does not appear you can ascertain the internal actual local file name\r\n *         cannot glean path/directory ... only fileName (ex: 'textDat.txt')\r\n *         - fileHandle: {\r\n *             isDirectory: false\r\n *             isFile:      true\r\n *             name:        'testData.txt'\r\n *           }\r\n *         - file: {\r\n *             name:        'testData.txt'\r\n *             lastModified: 222333444\r\n *             webkitRelativePath: ''\r\n *             size:  123\r\n *             type: 'text/plain'\r\n *           }\r\n *         - there is a fileHandle = directoryHandle.getFile(name)\r\n *       * in it's early form, it is NOT YET serializable\r\n *       * unsure, but running from a PWA may help\r\n *       * there are TWO handle refs ... can be:\r\n *         - FileSystemFileHandle ........ handle.isFile\r\n *         - FileSystemDirectoryHandle ... handle.isDirectory\r\n *     - more broadly, how do we encapsulate both file and url usage (ultimately)\r\n */\r\n","import {toast, alert}    from 'util/notify';\r\nimport verify            from 'util/verify';\r\nimport checkUnknownArgs  from 'util/checkUnknownArgs';\r\n\r\nconst DYNAMIC_DEFAULT = 'DYNAMIC_DEFAULT';\r\n\r\n/**\r\n * The discloseError() utility provides a standard way to \r\n * disclose errors both to the user (toasts) and logs.\r\n *\r\n * This utility uses the heuristics defined by the\r\n * ErrorExtensionPolyfill, and therefore require it to be present.\r\n *\r\n * The emission of both user notifications and logs can be controlled,\r\n * through parameters that dynamically default (based on \"expected\"\r\n * vs. \"unexpected\" error status).\r\n *\r\n * All user notifications occur through toasts, and are sanitized:\r\n *  - showing appropriate user-level detail,\r\n *  - with more information available via a button click\r\n *\r\n * Log formats are also standardized.\r\n *\r\n * **Please Note** this function uses named parameters.\r\n *\r\n * @param {Error} err the Error object to be disclosed (logged and\r\n * user-notified).\r\n *\r\n * @param {boolean} [showUser=true] an indicator as to whether the\r\n * user should be shown this error.\r\n *\r\n * @param {boolean} [logIt=DYNAMIC_DEFAULT] an indicator as to whether\r\n * a log entry should be emitted, dynamically defaulted (LOG when err\r\n * is Unexpected, NO-LOG when Expected).\r\n */\r\nexport default function discloseError({err,\r\n                                       showUser=true,         // DEFAULT: true ................. i.e. always SHOW\r\n                                       logIt=DYNAMIC_DEFAULT, // DEFAULT: err.isUnexpected() ... i.e. LOG when Unexpected, NO-LOG when Expected\r\n                                       ...unknownArgs}={}) {\r\n\r\n  // validate parameters\r\n  try {\r\n    const check = verify.prefix('discloseError() parameter violation: ')\r\n    // ... err\r\n    check(err,           'err is required');\r\n    check(err instanceof Error, 'err must be an Error object, NOT: ', err);\r\n    // ... showUser\r\n    showUser = showUser===DYNAMIC_DEFAULT ? err.isExpected() : showUser; // dynamic DEFAULT semantics\r\n    check(showUser===true || showUser===false, 'showUser must be a boolean');\r\n    // ... logIt\r\n    logIt = logIt===DYNAMIC_DEFAULT ? err.isUnexpected() : logIt; // dynamic DEFAULT semantics\r\n    check(logIt===true || logIt===false, 'logIt must be a boolean');\r\n    // ... unknown arguments\r\n    checkUnknownArgs(check, unknownArgs, arguments);\r\n  }\r\n  // NOTE: this handler CANNOT throw an error, \r\n  //       because it is typically used inside a promise.catch()\r\n  //       which will generate an \"Unhandled promise rejection\"\r\n  catch(e) {\r\n    console.log('YIKES ... visualize-it\\'s discloseError() was attempting to report on err: ', err);\r\n    console.log('HOWEVER AN INVOCATION PROBLEM was detected in the parameters passed to discloseError()!\\n' +\r\n                '... discloseError() CANNOT throw an error (when used in a promise an \"Unhandled promise rejection\" will result)!!\\n' +\r\n                '... PLEASE FIX THE FOLLOWING INVOCATION PROBLEM: ', e);\r\n    return; // cannot throw(e) ... see log (above)\r\n  }\r\n\r\n  // show user when requested\r\n  if (showUser) {\r\n    // unexpended errors display as error toasts with additional details link\r\n    if (err.isUnexpected()) {\r\n      toast.error({  // ... will auto close -OR- when \"details\" is clicked\r\n        msg: err.formatUserMsg(),\r\n        actions: [\r\n          { txt:    'details',\r\n            action: () => {\r\n              alert.error({ msg: `An unexpected error occurred:\r\n\r\n${err}\r\n\r\nIf this problem persists, please contact your tech support.`\r\n              });\r\n            }},\r\n        ]\r\n      });\r\n    }\r\n\r\n    // expended errors display as warning toasts with NO additional detail\r\n    else {\r\n      toast.warn({  // ... will auto close\r\n        msg: err.formatUserMsg()\r\n      });\r\n    }\r\n        \r\n  }\r\n\r\n  // generate log entry when requested\r\n  if (logIt) {\r\n\r\n    // log the details of the error (with traceback) for tech review\r\n    // NOTE 1: we refrain from using console.warn() and console.error() \r\n    //         because of BAD semantics inferred by react-native/expo:\r\n    //          - console.warn():  generates yellow popup\r\n    //          - console.error(): kills app with \"red screen of death\"\r\n    // NOTE 2: react-native/expo appears to be doing something non standard\r\n    //         when passing error as the 2nd parameter of log():\r\n    //             log('msg', error)\r\n    //         ... in this case is merely emitting error.toString()\r\n    //         ... we can however receive a stack trace by calling log(error) as the first parameter\r\n    const prefix = err.isUnexpected() ? '*** Unexpected Error:\\n\\n' : '*** Expected Error:\\n\\n';\r\n    console.log(prefix + err);\r\n    if (err.isUnexpected()) { // produce stack traces only for unexpected errors\r\n      console.log('Stack Trace ...');\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n}\r\n","import React,\r\n       {useState,\r\n        useCallback,\r\n        useMemo}        from 'react';\r\n\r\nimport SmartComp        from 'core/SmartComp';\r\nimport {openPkg, \r\n        savePkg}        from 'core/pkgPersist';\r\nimport pkgManager       from 'core/pkgManager';\r\n\r\nimport {leftNavManager,\r\n        tabManager}     from 'features';\r\n\r\nimport discloseError    from 'util/discloseError';\r\nimport verify           from 'util/verify';\r\nimport {toast}          from 'util/notify';\r\n\r\nimport {useFassets}     from 'feature-u';\r\nimport {useSelector}    from 'react-redux'\r\n\r\nimport Button           from '@material-ui/core/Button';\r\nimport Menu             from '@material-ui/core/Menu';\r\nimport MenuItem         from '@material-ui/core/MenuItem';\r\nimport Typography       from '@material-ui/core/Typography';\r\n\r\n/**\r\n * FileMenu: our FileMenu component.\r\n */\r\nexport default function FileMenu() {\r\n\r\n  const [anchorFileMenu, setAnchorFileMenu] = useState(null);\r\n  const fileMenuOpen = useMemo(() => Boolean(anchorFileMenu), [anchorFileMenu]);\r\n\r\n  const openFileMenu = useCallback((event) => setAnchorFileMenu(event.currentTarget), []);\r\n  _closeFileMenu     = useCallback(()      => setAnchorFileMenu(null),                []);\r\n\r\n  const fassets      = useFassets();\r\n  const activeTabId  = useSelector( (appState) => fassets.sel.getActiveTabId(appState), [fassets] );\r\n  const isActiveTab  = activeTabId ? true : false;\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"inherit\"\r\n              onClick={openFileMenu}>\r\n\r\n        <Typography variant=\"button\"\r\n                    color=\"inherit\"\r\n                    noWrap>\r\n          File\r\n        </Typography>\r\n      </Button>\r\n      <Menu anchorEl={anchorFileMenu}\r\n            anchorOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'right',\r\n            }}\r\n            transformOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'right',\r\n            }}\r\n            open={fileMenuOpen}\r\n            onClose={closeFileMenu}>\r\n\r\n        <MenuItem onClick={handleOpenPkg}>Open ...</MenuItem>\r\n        <MenuItem onClick={() => handleSavePkg(activeTabId)}       disabled={!isActiveTab}>Save</MenuItem>\r\n        <MenuItem onClick={() => handleSavePkg(activeTabId, true)} disabled={!isActiveTab}>Save As ...</MenuItem>\r\n\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Utility function that closes our file menu.\r\n */\r\nfunction closeFileMenu() {\r\n  if (_closeFileMenu) {\r\n    _closeFileMenu();\r\n  }\r\n}\r\nlet _closeFileMenu = null;\r\n\r\n\r\n/**\r\n * Open (i.e. load) a SmartPkg selected from the user's local file system.\r\n */\r\nasync function handleOpenPkg() {\r\n  closeFileMenu();\r\n\r\n  try {\r\n    const pkg = await openPkg();\r\n    if (!pkg) {\r\n      return; // no-op when user canceled the pick dialog\r\n    }\r\n\r\n    // register it in our LeftNav\r\n    // ... this dispatches an action, so any error cannot be caught here\r\n    leftNavManager.addLeftNav(pkg);\r\n\r\n    toast({msg: `\"${pkg.getPkgDesc()}\" has been loaded in the Left Nav Menu`})\r\n  }\r\n  catch (err) {\r\n    // gracefully report unexpected conditions to user\r\n    discloseError({err, logIt:true});\r\n  }\r\n}\r\n\r\n/**\r\n * Save the supplied SmartPkg (identified from the supplied tab) to\r\n * an external resource (ex: web or local file).\r\n *\r\n * @param {string} activeTabId - the tab identifier from which we\r\n * determine the SmartPkg to save.\r\n * @param {boolean} [saveAs=false] - true: save in a newly user\r\n * selected file, false: save in the original pkg's `pkgResourcePath`.\r\n */\r\nasync function handleSavePkg(activeTabId, saveAs=false) {\r\n  closeFileMenu();\r\n\r\n  try {\r\n    // resolve the package from the supplied activeTabId\r\n    const pkg = resolvePkg(activeTabId);\r\n\r\n    // insure the package is a candidate for saving\r\n    if (!pkg.canPersist()) {\r\n      toast.warn({msg: `The \"${pkg.getPkgDesc()}\" package cannot be saved ... it contains code, which cannot be persisted!`});\r\n      return;\r\n    }\r\n\r\n    // save the package\r\n    const userCanceled = await savePkg(pkg, saveAs);\r\n    if (!userCanceled) {\r\n      toast.warn({msg: `The \"${pkg.getPkgDesc()}\" package has been saved!`});\r\n    }\r\n  }\r\n  catch(err) {\r\n    // gracefully report unexpected conditions to user\r\n    discloseError({err, logIt:true});\r\n  }\r\n}\r\n\r\n/**\r\n * Resolve the SmartPkg identified from the supplied tab.\r\n *\r\n * @param {string} activeTabId - the tab identifier from which we\r\n * determine the SmartPkg.\r\n *\r\n * @returns {SmartPkg} the package belonging to the supplied tab.\r\n *\r\n * @throws {Error} an Error is thrown when the SmartPkg could not be\r\n * identified (an unexpected condition).\r\n */\r\nfunction resolvePkg(activeTabId) {\r\n  // locate the package that contains the resource in the active tab\r\n  const tabController = tabManager.getTabController(activeTabId);\r\n  const targetObj     = tabController.getTarget(); // can be: Scene/Collage or SmartComp (for classes)\r\n  let   pkg           = targetObj.getPackage();\r\n\r\n  // for components (when classes are registered as SmartPkg entries),\r\n  // there is no registered package (because the class is the contained item within the package)\r\n  // ... in this case:\r\n  //     - we use the package the component was created from (which is in fact the contained SmartPkg)\r\n  //     - ultimately, however, this pkg is not persistable (because it is based on class)\r\n  if (!pkg && targetObj instanceof SmartComp) {\r\n    const classRef = targetObj.getClassRef();\r\n    const pkgName  = classRef.getClassPkgName();\r\n    pkg = pkgManager.getPackage(pkgName);\r\n  }\r\n\r\n  // verify the package is resolved\r\n  verify(pkg, `***ERROR*** <FileMenu> \"save/saveAs\" operation ... could not locate the SmartPkg for the '${activeTabId}' active tab :-(`);\r\n\r\n  // that's all folks :-)\r\n  // console.log(`xx SmartPkg resolved: `, pkg);\r\n  return pkg;\r\n}\r\n","import {generateActions}    from 'action-u';\r\nimport _toolBar             from './featureName';\r\n\r\nexport default generateActions.root({\r\n  [_toolBar]: { // prefix all actions with our feature name, guaranteeing they unique app-wide!\r\n\r\n    dispModeChanged: { // actions.dispModeChanged(dispMode): Action\r\n                       // > the toolBar's dispMode has changed\r\n                       actionMeta: {\r\n                         traits: ['dispMode'],\r\n                       },\r\n    },\r\n\r\n  },\r\n});\r\n","/**\r\n * Expose our featureName through a mini-meta module that is\r\n * \"importable\" in all use-cases (a single-source-of-truth).\r\n */\r\nexport default 'toolBar';\r\n","import {combineReducers}    from 'redux';\r\nimport {reducerHash}        from 'astx-redux-util';\r\nimport {expandWithFassets}  from 'feature-u';\r\nimport {slicedReducer}      from 'feature-redux';\r\nimport _toolBar             from './featureName';\r\nimport _toolBarAct          from './actions';\r\nimport DispMode             from 'core/DispMode';\r\nimport {tabManager}         from 'features';\r\n\r\n// ***\r\n// *** Our feature reducer, managing state for our toolBar process.\r\n// ***\r\n\r\nconst reducer = slicedReducer(_toolBar, expandWithFassets( (fassets) => combineReducers({\r\n\r\n  // dispMode: string ... 'view'/'edit'/'animate' via DispMode enum\r\n  dispMode: reducerHash({\r\n    [fassets.actions.activateTab]: (state, action) => tabManager.getTabController(action.tabId).getTarget().getDispMode().enumKey,\r\n    [_toolBarAct.dispModeChanged]: (state, action) => action.dispMode.enumKey,\r\n  }, DispMode.view.enumKey), // initialState\r\n\r\n}) ) );\r\n\r\nexport default reducer;\r\n\r\n\r\n// ***\r\n// *** Various Selectors\r\n// ***\r\n\r\n// Our feature state root (via slicedReducer as a single-source-of-truth)\r\nconst getFeatureState  = (appState) => reducer.getSlicedState(appState);\r\nconst gfs              = getFeatureState; // ... concise alias (used internally)\r\n\r\nexport const getDispMode = (appState) => DispMode.enumValueOf( gfs(appState).dispMode );\r\n","import React,\r\n       {useCallback}    from 'react';\r\n\r\nimport {useFassets}     from 'feature-u';\r\nimport {useSelector,\r\n        useDispatch}    from 'react-redux'\r\n\r\nimport DispMode         from 'core/DispMode';\r\n\r\nimport {tabManager}     from 'features';\r\n\r\nimport {createLogger}   from 'util/logger';\r\n\r\nimport * as _toolBarSel from '../state';\r\nimport _toolBarAct      from '../actions';\r\n\r\nimport {makeStyles}     from '@material-ui/core/styles';\r\n\r\nimport FingerPrintIcon  from '@material-ui/icons/Fingerprint';\r\nimport FormControl      from '@material-ui/core/FormControl';\r\nimport IconButton       from '@material-ui/core/IconButton';\r\nimport InputLabel       from '@material-ui/core/InputLabel';\r\nimport MenuItem         from '@material-ui/core/MenuItem';\r\nimport Select           from '@material-ui/core/Select';\r\nimport Toolbar          from '@material-ui/core/Toolbar';\r\nimport Typography       from '@material-ui/core/Typography';\r\n\r\n// our internal diagnostic logger (normally disabled)\r\nconst log = createLogger('***DIAG*** <VitToolBar> ... ').disable();\r\n\r\nexport default function VitToolBar() {\r\n\r\n  const classes = useStyles();\r\n\r\n  const fassets     = useFassets();\r\n  const dispMode    = useSelector((appState) => _toolBarSel.getDispMode(appState),           []);\r\n  const activeTabId = useSelector((appState) => fassets.sel.getActiveTabId(appState), [fassets]);\r\n\r\n  const dispatch             = useDispatch();\r\n  const handleDispModeChange = useCallback((event) => {\r\n    const newDispMode = DispMode.enumValueOf(event.target.value);\r\n    log(`dispMode changed to: ${newDispMode}`);\r\n    dispatch( _toolBarAct.dispModeChanged(newDispMode) );\r\n  }, [dispatch]);\r\n\r\n  const myTitle = (\r\n    <Typography variant=\"h6\"\r\n                color=\"inherit\"\r\n                noWrap\r\n                className={classes.title}>\r\n      Visualize It\r\n    </Typography>\r\n  );\r\n\r\n  if (!activeTabId) {\r\n    return myTitle;\r\n  }\r\n\r\n  const activeTarget = tabManager.getTabController(activeTabId).getTarget();\r\n\r\n  return (\r\n    <Toolbar variant=\"dense\">\r\n\r\n      { myTitle }\r\n\r\n      <IconButton><FingerPrintIcon/></IconButton>\r\n\r\n      {/* NOTE: NO containing <IconButton> here ...  adds too much height */}\r\n      <FormControl>\r\n        <InputLabel id=\"dispModeLabel\">DispMode</InputLabel>\r\n        <Select id=\"dispMode\"\r\n                labelId=\"dispModeLabel\"\r\n                value={dispMode.enumKey}\r\n                onChange={handleDispModeChange}>\r\n        { \r\n          Array.from(DispMode).map( (dm) => (\r\n            <MenuItem key={dm.enumKey}\r\n                      value={dm.enumKey}\r\n                      disabled={!activeTarget.canHandleDispMode(dm)}>{dm.enumKey}</MenuItem>\r\n          ) )\r\n        }\r\n        </Select>\r\n      </FormControl>\r\n\r\n    </Toolbar>\r\n  );\r\n\r\n}\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n\r\n  title: {\r\n    flexGrow: 1, // moves right-most toolbar items to the right\r\n  },\r\n\r\n}) );\r\n\r\n","import React,\r\n       {useMemo}      from 'react';\r\nimport PropTypes      from 'prop-types';\r\n\r\nimport {useFassets}   from 'feature-u';\r\nimport {useSelector}  from 'react-redux'\r\n\r\nimport {makeStyles}   from '@material-ui/core/styles';\r\n\r\nimport LeftNav        from './LeftNav';\r\nimport UserMenu       from './UserMenu';\r\nimport FileMenu       from './FileMenu';\r\n\r\nimport AppBar         from '@material-ui/core/AppBar';\r\nimport IconButton     from '@material-ui/core/IconButton';\r\nimport MenuIcon       from '@material-ui/icons/Menu';\r\nimport Toolbar        from '@material-ui/core/Toolbar';\r\n\r\nimport VitToolBar     from '../../../toolBar/comp/VitToolBar'; // NEW (TEMPORARY)\r\n\r\nimport {toast}        from 'util/notify';\r\n\r\n\r\n/**\r\n * AppMotif is a re-usable top-level component that establishes\r\n * the following application characteristics:\r\n * \r\n * - a **Left Nav** menu\r\n * - a **User Menu** menu\r\n * - a **Current View** state _(orchestrating which application view is active)_\r\n * - a **Tool Bar** with various artifacts (ex: title bar and footer)\r\n * \r\n * While these controls are promoted through AppMotif, it's content\r\n * is accumulated from external features through various **Use\r\n * Contracts**.\r\n\r\n * AppMotif is auto injected through the MainLayout component,\r\n * however, it is only active when an active user is **signed-in**.\r\n * \r\n * The main page content is rendered as children of this component\r\n * (like eateries, discovery, etc.).\r\n *\r\n * USAGE:\r\n * ```\r\n *   <AppMotif>\r\n *     ... app page content here\r\n *   </AppMotif>\r\n * ```\r\n * \r\n * Please refer to the **`baseUI` README** for more information.\r\n */\r\nexport default function AppMotif({children}) {\r\n\r\n  const fassets = useFassets();\r\n\r\n//const curUser = useSelector( (appState) => fassets.sel.curUser(appState), [fassets] );\r\n  const curView = useSelector( (appState) => fassets.sel.curView(appState), [fassets] );\r\n\r\n  const classes = useStyles();\r\n\r\n  // define our auxiliary view content\r\n  const viewAuxiliaryContent    = fassets.get('AppMotif.auxViewContent.*@withKeys');\r\n  const curViewAuxiliaryContent = useMemo(() => resolveCurViewAuxiliaryContent(curView, viewAuxiliaryContent), [curView, viewAuxiliaryContent]);\r\n  const {TitleComp, FooterComp} = curViewAuxiliaryContent;\r\n\r\n  // no-op when no user is signed-in ... AI: DECIDE_AUTH_USER_NEEDED\r\n//if (!curUser.isUserSignedIn()) {\r\n//  return (\r\n//    <>\r\n//      {children}\r\n//    </>\r\n//  );\r\n//}\r\n\r\n  return (\r\n    <div className={classes.app}>\r\n\r\n      {/* Title Bar */}\r\n      <AppBar className={classes.appBar}\r\n              position=\"fixed\"> {/* NOTE: eatery-nod-w used position \"absolute\" ... don't see any diff */}\r\n        <Toolbar className={classes.toolbar}\r\n                 variant=\"dense\"\r\n                 disableGutters={false}> {/*NOTE: doesn't seem that disableGutters does anything */}\r\n\r\n          {/* AI: Consider for some App Menu */}\r\n          <IconButton className={classes.menuButton}\r\n                      color=\"inherit\"\r\n                      onClick={ () => {\r\n                        toast.warn({msg: 'Collapsable Left Nav (coming soon)!'})\r\n                      }}>\r\n            <MenuIcon/>\r\n          </IconButton>\r\n\r\n          {/* File Menu */}\r\n          <FileMenu/>\r\n\r\n          {/* Title */}\r\n          <div className={classes.title}>\r\n            <TitleComp/>\r\n          </div>\r\n\r\n          {/* User Profile Menu ... AI: DECIDE_AUTH_USER_NEEDED ... curUser prop usage\r\n          <UserMenu curUser={curUser}/>\r\n            */}\r\n          <UserMenu/>\r\n\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      {/* Left Nav */}\r\n      <LeftNav/>\r\n\r\n      {/* Page Content */}\r\n      <main className={classes.content}>\r\n\r\n        <Toolbar variant=\"dense\"\r\n                 comment=\"spacer (hidden UNDER AppBar) so our main content isn't covered up by the AppBar\"/>\r\n\r\n        {children}\r\n      </main>\r\n\r\n      {/* Optional Bottom Bar */}\r\n      {FooterComp && (\r\n         <AppBar className={classes.bottomBar}\r\n                 position=\"absolute\">\r\n           <Toolbar className={classes.toolbar}\r\n                    variant=\"dense\"\r\n                    disableGutters={false}>\r\n             <FooterComp/>\r\n           </Toolbar>\r\n         </AppBar>\r\n       )}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nAppMotif.propTypes = {\r\n  children: PropTypes.node.isRequired, // main page content (like eateries and discovery)\r\n};\r\n\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n\r\n  app: {\r\n    display: 'flex', // KJB: does not seem to be doing anything\r\n  },\r\n\r\n  appBar: {\r\n    zIndex:     theme.zIndex.drawer + 1, // NOTE: forces AppBar to be OVER LeftNav (a drawer) ... this is new for fixed LeftNav\r\n  },\r\n\r\n  bottomBar: {\r\n    top:        'auto',\r\n    bottom:     0,\r\n  },\r\n\r\n  toolbar: {\r\n    // ***Dashboard Sample***\r\n    // paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n\r\n  menuButton: {\r\n    marginRight: 36, // proper spacing between menu button and title\r\n  },\r\n\r\n  title: {\r\n    flexGrow: 1, // moves right-most toolbar items to the right\r\n  },\r\n\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',                 // content window is height is same as our viewport (100%)\r\n    overflow: 'auto',                // add scrollbar ONLY when necessary\r\n  },\r\n}) );\r\n\r\n\r\nfunction resolveCurViewAuxiliaryContent(curView, viewAuxiliaryContent) {\r\n  const matchKey = `AppMotif.auxViewContent.${curView}`;\r\n  const [, curViewAuxiliaryContent] = viewAuxiliaryContent.find( ([key]) => key === matchKey ) || fallbackViewAuxiliaryContent;\r\n  return curViewAuxiliaryContent;\r\n}\r\n\r\nconst fallbackViewAuxiliaryContent = ['AppMotif.auxViewContent.FALLBACK', {\r\n  // TODO: ?? do NOT believe we need a customizable Title within our app\r\n  //       - temporarily inject our CUSTOM \"Visualize It\" toolbar\r\n  // ORIGINAL:\r\n  //?TitleComp: () => (\r\n  //?  <Typography variant=\"h6\"\r\n  //?              color=\"inherit\"\r\n  //?              noWrap>\r\n  //?    App Motif\r\n  //?  </Typography>\r\n  //?),\r\n  // NEW (TEMPORARY):\r\n  TitleComp: VitToolBar,\r\n}];\r\n","import React  from 'react';\r\nimport Fade   from '@material-ui/core/Fade';\r\nimport Slide  from '@material-ui/core/Slide';\r\nimport Zoom   from '@material-ui/core/Zoom';\r\n\r\n//***\r\n//*** Common Transition components used throughout our app :-)\r\n//***\r\n\r\nexport const TransitionFade  = React.forwardRef( (props, ref) => <Fade  ref={ref} timeout=\"1000\"                   {...props} /> );\r\nexport const TransitionSlide = React.forwardRef( (props, ref) => <Slide ref={ref} direction=\"right\" timeout=\"1000\" {...props} /> );\r\nexport const TransitionZoom  = React.forwardRef( (props, ref) => <Zoom  ref={ref} timeout=\"1000\"                   {...props} /> );\r\n","import React, {useState} from 'react';\r\nimport PropTypes         from 'prop-types';\r\n\r\nimport {makeStyles}      from '@material-ui/core/styles';\r\nimport {useForCellPhone} from 'util/responsiveBreakpoints';\r\n\r\nimport Button            from '@material-ui/core/Button';\r\nimport Progress          from '@material-ui/core/LinearProgress';  // -or- '@material-ui/core/CircularProgress';\r\nimport Dialog            from '@material-ui/core/Dialog';\r\nimport DialogContent     from '@material-ui/core/DialogContent';\r\nimport DialogTitle       from '@material-ui/core/DialogTitle';\r\nimport Typography        from '@material-ui/core/Typography';\r\nimport {TransitionZoom}  from 'util/Transition';\r\nimport {alert}           from 'util/notify';\r\n\r\n\r\n/**\r\n * A modal SplashScreen used when there is nothing else to display :-)\r\n *\r\n * The SplashScreen will responsively/dynamically utilize the full\r\n * screen for cell phone devices.\r\n *\r\n * The SplashScreen can be instantiated with a direct message to display:\r\n * ```js\r\n * <SplashScreen msg=\"hello world\" [err={error}]/>\r\n * ```\r\n * \r\n * In support of the programmatic API, a single SplashScreen must be statically\r\n * instantiated in the root of your DOM (without any msg):\r\n * ```js\r\n * <SplashScreen/>\r\n * ```\r\n *\r\n * Supporting the following programmatic API:\r\n * ```js\r\n *   + splash(msg, [err]): void ... display the supplied msg/err in the programmatic SplashScreen\r\n *   + splash(): void           ... clear the programmatic SplashScreen\r\n * ```\r\n */\r\nexport default function SplashScreen({msg, err}) {\r\n\r\n  const isCellPhone = useForCellPhone();\r\n  const classes     = useStyles();\r\n\r\n  // conditionally render SplashScreenProgrammatic when NO msg is supplied\r\n  return msg ? <SplashScreenCommon msg={msg} err={err} open={true} fullScreen={isCellPhone} classes={classes}/>\r\n             : <SplashScreenProgrammatic                           fullScreen={isCellPhone} classes={classes}/>;\r\n}\r\n\r\nSplashScreen.propTypes = {\r\n  msg: PropTypes.string,\r\n  err: PropTypes.object,\r\n};\r\n\r\nSplashScreen.defaultProps = {\r\n  msg: '',\r\n  err: null,\r\n};\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n  title: {\r\n    color:           theme.palette.common.white,\r\n    backgroundColor: theme.palette.primary.main, // theme.palette.primary.main (bluish) or theme.palette.secondary.main (redish)\r\n  },\r\n\r\n  progress: {\r\n    margin: theme.spacing(4),\r\n  },\r\n}) );\r\n\r\n\r\n// ***\r\n// *** Our programmatic API (see docs above)\r\n// ***\r\n\r\n// <SplashScreenProgrammatic fullScreen= classes= />\r\nfunction SplashScreenProgrammatic({fullScreen, classes}) {\r\n\r\n  // maintain our programmatic state ... the msg/err to display\r\n  const [splashState, setSplashState] = useState({\r\n    msg: '',\r\n    err: null,\r\n  });\r\n\r\n  // broaden the scope of our splashState setter (used in our `splash(msg, [err])` programmatic API)\r\n  if (_setSplashState && _setSplashState!==setSplashState) { // validate that only one instance exists\r\n    throw new Error('***ERROR*** <SplashScreen/> (supporting the programmatic `splash(msg, [err])` API) should only be instantiated ONE TIME (in the app root DOM)');\r\n  }\r\n  _setSplashState = setSplashState; // THIS should work ... no need for: _setSplashState = useCallback(...);\r\n\r\n  // render our component\r\n  return <SplashScreenCommon msg={splashState.msg} err={splashState.err} open={splashState.msg ? true : false} fullScreen={fullScreen} classes={classes} />;\r\n}\r\n\r\n// our programmatic API\r\nexport function splash(msg='', err=null) {\r\n  // implement in terms of <SplashScreenProgrammatic> state\r\n  if (!_setSplashState) {\r\n    throw new Error('***ERROR*** the programmatic `splash(msg, [err])` API requires <SplashScreen/> be instantiated in the app root DOM');\r\n  }\r\n  _setSplashState({msg, err});\r\n}\r\nlet _setSplashState = null; // expose our inner function\r\n\r\n\r\n// ***\r\n// *** Our \"common\" rendering agent shared by BOTH `<SplashScreen>` and `<SplashScreenProgrammatic>`\r\n// ***\r\n\r\nlet _errLastReported = null;\r\n\r\n// <SplashScreenCommon msg= open= fullScreen= classes= />\r\nfunction SplashScreenCommon({msg, err, open, fullScreen, classes}) {\r\n\r\n  // setup any error rendering constructs\r\n  const errCntl = !err ? null : (\r\n    <>\r\n      <br/>\r\n      <Typography variant=\"subtitle2\" color=\"secondary\">Encountered ERROR: {err.formatUserMsg()}</Typography>\r\n      <Button variant=\"contained\" color=\"secondary\" onClick={handleErr}>\r\n        <Typography variant=\"subtitle2\">Show Detail</Typography>\r\n      </Button>\r\n    </>\r\n  );\r\n  function handleErr() {\r\n    alert.error({ msg: `An unexpected error occurred:\r\n\r\n${err}\r\n\r\nIf this problem persists, please contact your tech support.`\r\n    });\r\n  }\r\n\r\n  // when supplied, log the details of the error (with traceback) for tech review\r\n  // NOTE 1: we refrain from using console.warn() and console.error() \r\n  //         because of BAD semantics inferred by react-native/expo:\r\n  //          - console.warn():  generates yellow popup\r\n  //          - console.error(): kills app with \"red screen of death\"\r\n  // NOTE 2: react-native/expo appears to be doing something non standard\r\n  //         when passing error as the 2nd parameter of log():\r\n  //             log('msg', error)\r\n  //         ... in this case is merely emitting error.toString()\r\n  //         ... we can however receive a stack trace by calling log(error) as the first parameter\r\n  if (err && err !== _errLastReported) {\r\n    _errLastReported = err;\r\n    const prefix = err.isUnexpected() ? '*** Unexpected Error:\\n\\n' : '*** Expected Error:\\n\\n';\r\n    console.log(prefix + err);\r\n    if (err.isUnexpected()) { // produce stack traces only for unexpected errors\r\n      console.log('Stack Trace ...');\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  // render our component\r\n  return (\r\n    <Dialog open={open}\r\n            fullScreen={fullScreen}\r\n            TransitionComponent={TransitionZoom}>\r\n      \r\n      <DialogTitle className={classes.title}>\r\n        <center className={classes.title}>Visualize It</center>\r\n      </DialogTitle>\r\n      \r\n      <DialogContent>\r\n        <center>\r\n          <br/>\r\n          <img width=\"120px\" src='visualize-it-logo.png' alt='visualize-it'/>\r\n          <br/>\r\n          <Progress className={classes.progress} color=\"secondary\"/>\r\n          <Typography variant=\"body2\">{msg}</Typography>\r\n          {errCntl}\r\n          <br/>\r\n        </center>\r\n      </DialogContent>\r\n      \r\n    </Dialog>\r\n  );\r\n}\r\n","import {useTheme}           from '@material-ui/core/styles';\r\nimport useMediaQuery        from '@material-ui/core/useMediaQuery';\r\nimport {useSelector}        from 'react-redux'\r\nimport {getResponsiveMode}  from 'features/common/baseUI/state'\r\n\r\n\r\n/**\r\n * A react hook promoting a boolean indicator (true/false) as to\r\n * whether the device's width represents a typical cell phone.\r\n * \r\n * @return {boolean} see description (above)\r\n */\r\nexport function useForCellPhone() {\r\n  const theme       = useTheme();\r\n  const isCellPhone = useMediaQuery(theme.breakpoints.down('xs')); // available breakpoints: xs/sm/md/lg/xl\r\n\r\n  return isCellPhone;\r\n}\r\n\r\n\r\n/**\r\n * A react hook promoting a boolean indicator (true/false) as to\r\n * whether the device's width is sufficient to be considered a tablet\r\n * (or greater - such as a desktop).\r\n *\r\n * @return {boolean} see description (above)\r\n *\r\n * @deprecated ... currently NOT used\r\n */\r\nexport function useForTabletPlus() {\r\n  const theme        = useTheme();\r\n  const isTabletPlus = useMediaQuery(theme.breakpoints.up('md')); // breakpoints: xs/sm/md/lg/xl\r\n\r\n  return isTabletPlus;\r\n}\r\n\r\n\r\n/**\r\n * A react hook promoting a boolean indicator (true/false) as to\r\n * whether the device's width is sufficient to be filled with more\r\n * content (such as a tablet or desktop).\r\n *\r\n * This algorithm is based on the breakpoint defined in the\r\n * reactiveMOde state, which can be controlled by the user -AND-\r\n * disabled.\r\n *\r\n * @return {boolean} see description (above)\r\n */\r\n\r\nexport function useForWiderDevice() {\r\n  const responsiveMode  = useSelector( (appState) => getResponsiveMode(appState), [] );\r\n  const theme           = useTheme();\r\n  const isWiderDevice   = useMediaQuery(theme.breakpoints.up(responsiveMode)); // NOTE: theme.breakpoints.up('off'): false\r\n\r\n  return isWiderDevice;\r\n}\r\n","import React,\r\n       {useMemo}          from 'react';\r\nimport {useSelector}      from 'react-redux'\r\nimport PropTypes          from 'prop-types';\r\nimport {makeStyles}       from '@material-ui/core/styles';\r\nimport {MuiThemeProvider,      // NOTE: MuiThemeProvider **SHOULD** be at the root of ALL visible components\r\n        createMuiTheme}   from '@material-ui/core/styles';\r\nimport CssBaseline        from '@material-ui/core/CssBaseline';\r\nimport AppMotif           from './AppMotif';\r\nimport Notify             from 'util/notify';\r\nimport SplashScreen       from 'util/SplashScreen';\r\nimport {getUITheme}       from '../state';\r\n\r\n\r\n/**\r\n * MainLayout is a re-usable top-level component that promotes the\r\n * proper Material-UI (MUI) theming/styling WITH a responsive layout.\r\n * \r\n * The following items are provided through this component:\r\n *\r\n * - a **Responsive Design** that auto adjusts for desktops, cell\r\n *   phones, and portable devices\r\n *\r\n * - a **UI Theme** allowing the user to choose from light/dark\r\n *   renditions\r\n *\r\n * - an **About Dialog** is promoted from information gleaned from the\r\n *   `package.json`\r\n *\r\n * - the **Notify** utility is activated, supporting programmatic\r\n *   **toasts, alerts, and confirmations**\r\n *\r\n * - the **SplashScreen** utility is activated, supporting the programmatic\r\n *   `splash(msg)` API\r\n * \r\n * Please refer to the **`baseUI` README** for more information.\r\n */\r\nexport default function MainLayout({children}) {\r\n\r\n  const uiTheme    = useSelector((appState) => getUITheme(appState), []);\r\n  const themeInUse = useMemo(() => uiTheme==='dark' ? darkTheme : lightTheme, [uiTheme]);\r\n  const classes    = useStyles();\r\n\r\n  return (\r\n    <MuiThemeProvider theme={themeInUse}>\r\n      <CssBaseline/>\r\n      <Notify/>\r\n      <SplashScreen/>\r\n      <main className={classes.main}>\r\n        <AppMotif>\r\n          {children}\r\n        </AppMotif>\r\n      </main>\r\n    </MuiThemeProvider>\r\n  );\r\n}\r\n\r\nMainLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\n\r\nconst lightTheme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true,\r\n    fontSize:        12,   // USE smaller font size ... default is 16 (seems more like 14)\r\n  },\r\n\r\n  palette: {\r\n    type: 'light',\r\n    // CREATED FROM: https://material.io/tools/color/\r\n    primary: {                 // REF: Teal 800\r\n      light:        '#439889',\r\n      main:         '#00695c',\r\n      dark:         '#003d33',\r\n      contrastText: '#f5f5f5', // OVERRIDE: Grey 200\r\n    },\r\n    secondary: {               // REF: Red 800\r\n      light:        '#ff5f52',\r\n      main:         '#c62828',\r\n      dark:         '#8e0000',\r\n      contrastText: '#f5f5f5', // OVERRIDE: Grey 200\r\n    },\r\n  },\r\n});\r\n\r\nconst darkTheme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true,\r\n    fontSize:        12,   // USE smaller font size ... default is 16 (seems more like 14)\r\n  },\r\n  palette: {\r\n    type: 'dark',\r\n    // CREATED FROM: https://material.io/tools/color/\r\n    primary: {                 // REF: Teal 800\r\n      light:        '#439889',\r\n      main:         '#00695c',\r\n      dark:         '#003d33',\r\n      contrastText: '#f5f5f5', // OVERRIDE: Grey 200\r\n    },\r\n    secondary: {               // REF: Red 800\r\n      light:        '#ff5f52',\r\n      main:         '#c62828',\r\n      dark:         '#8e0000',\r\n      contrastText: '#f5f5f5', // OVERRIDE: Grey 200\r\n    },\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n  main: {\r\n    width:        'auto',\r\n    display:      'block', // Fix IE 11 issue.\r\n // marginLeft:   theme.spacing(3), // N/A: bad news for the overall layout\r\n // marginRight:  theme.spacing(3),\r\n\r\n // reactive design // N/A:  THIS IS CAUSING HAVOC on my main content container overall width\r\n // [theme.breakpoints.up(400 + theme.spacing(3 * 2))]: {\r\n //   width:       400,\r\n //   marginLeft:  'auto',\r\n //   marginRight: 'auto',\r\n // },\r\n  },\r\n}) );\r\n","import React           from 'react';\r\nimport PropTypes       from 'prop-types';\r\nimport MenuItem        from '@material-ui/core/MenuItem';\r\nimport {closeUserMenu} from './UserMenu';\r\n\r\n/**\r\n * UserMenuItem: our UserMenuItem - a MenuItem wrapper that auto-closes the UserMenu.\r\n */\r\nexport default function UserMenuItem(props) {\r\n\r\n  // value-added onClick that auto-closes the UserMenu\r\n  const myOnClick = (...args) => {\r\n    // auto-close the UserMenu\r\n    closeUserMenu()\r\n\r\n    // pass-through to client onClick()\r\n    if (props.onClick) {\r\n      props.onClick(...args);\r\n    }\r\n  };\r\n\r\n  // wrap <MenuItem>\r\n  return (\r\n    <MenuItem {...props} onClick={myOnClick}>{props.children}</MenuItem>\r\n  );\r\n}\r\n\r\nUserMenuItem.propTypes = {\r\n  children: PropTypes.node.isRequired, // UserMenuItem content is required (i.e. the label)\r\n};\r\n","import React,\r\n       {useMemo,\r\n        useCallback} from 'react';\r\n\r\nimport {useSelector,\r\n        useDispatch} from 'react-redux'\r\n\r\nimport _baseUIAct    from '../actions';\r\nimport {getUITheme}  from '../state';\r\n\r\nimport Chip          from '@material-ui/core/Chip';\r\nimport Divider       from '@material-ui/core/Divider';\r\nimport MoonIcon      from '@material-ui/icons/Brightness3';\r\nimport SunIcon       from '@material-ui/icons/WbSunny';\r\nimport UserMenuItem  from 'features/common/baseUI/comp/UserMenuItem';\r\n\r\n\r\n/**\r\n * ToggleUITheme: our user-profile menu items (in the App Header)\r\n * \r\n * NOTE: Because this is a \"custom\" component that is held in Menu\r\n *       (a ButtonBase MenuItem) it must be able to hold a ref ... hence\r\n *       the React.forwardRef()!\r\n *       see: https://material-ui.com/guides/migration-v3/#button\r\n *            https://material-ui.com/guides/composition/#caveat-with-refs\r\n *            AVOIDS following log:\r\n *            Warning: Function components cannot be given refs. Attempts to access\r\n *                     this ref will fail. Did you mean to use React.forwardRef()?\r\n * NOTE: Subsequent Discovery: I think this is really due to the fact that\r\n *       we were injecting <Divider/> too!\r\n *       This React.forwardRef() was NOT needed in src/features/common/auth/comp/AuthUserMenu.js,\r\n *       where it simply injected a series of <UserMenuItem>s in a React.Fragment ... hmmmm\r\n */\r\nconst ToggleUITheme = React.forwardRef( (props, ref) => {\r\n  const uiTheme = useSelector((appState) => getUITheme(appState), []);\r\n\r\n  const ChipIcon = useMemo(() => uiTheme==='light' ? MoonIcon  : SunIcon,    [uiTheme]);\r\n  const label    = useMemo(() => uiTheme==='light' ? 'to dark' : 'to light', [uiTheme]);\r\n\r\n  const dispatch      = useDispatch();\r\n  const toggleUITheme = useCallback(() => dispatch( _baseUIAct.toggleUITheme() ), [dispatch]);\r\n\r\n  return (\r\n    <span {...props} ref={ref}>\r\n      <UserMenuItem onClick={toggleUITheme}>\r\n        <Chip label={label}\r\n              icon={<ChipIcon/>}/>\r\n      </UserMenuItem>\r\n      <Divider/>\r\n    </span>\r\n  );\r\n});  \r\nexport default ToggleUITheme;\r\n","import React,\r\n       {useMemo,\r\n        useCallback} from 'react';\r\n\r\nimport {useSelector,\r\n        useDispatch} from 'react-redux'\r\n\r\nimport _baseUIAct           from '../actions';\r\nimport {getResponsiveMode}  from '../state';\r\n\r\nimport Chip          from '@material-ui/core/Chip';\r\nimport Divider       from '@material-ui/core/Divider';\r\nimport CheckedIcon    from '@material-ui/icons/Check';\r\nimport UserMenuItem  from 'features/common/baseUI/comp/UserMenuItem';\r\n\r\nimport {confirm}     from 'util/notify';\r\n\r\n\r\n/**\r\n * MaintainResponsiveMode: our user-profile menu items (in the App Header)\r\n * \r\n * NOTE: Because this is a \"custom\" component that is held in Menu\r\n *       (a ButtonBase MenuItem) it must be able to hold a ref ... hence\r\n *       the React.forwardRef()!\r\n *       see: https://material-ui.com/guides/migration-v3/#button\r\n *            https://material-ui.com/guides/composition/#caveat-with-refs\r\n *            AVOIDS following log:\r\n *            Warning: Function components cannot be given refs. Attempts to access\r\n *                     this ref will fail. Did you mean to use React.forwardRef()?\r\n * NOTE: Subsequent Discovery: I think this is really due to the fact that\r\n *       we were injecting <Divider/> too!\r\n *       This React.forwardRef() was NOT needed in src/features/common/auth/comp/AuthUserMenu.js,\r\n *       where it simply injected a series of <UserMenuItem>s in a React.Fragment ... hmmmm\r\n */\r\nconst MaintainResponsiveMode = React.forwardRef( (props, ref) => {\r\n\r\n  const responsiveMode = useSelector((appState) => getResponsiveMode(appState), []);\r\n\r\n  const ChipIcon = useMemo(() => responsiveMode==='off' ? ()=>null : CheckedIcon, [responsiveMode]);\r\n\r\n  const dispatch                = useDispatch();\r\n  const maintainResponsiveMode  = useCallback(() => {\r\n    confirm.success({ \r\n      msg: `This app is designed with mobile devices in mind (i.e. cell phones).\r\n\r\nWhen the \"responsive\" mode is enabled, selected screens will dynamically adjust to take advantage of the additional screen real estate.  As an example, a simple list can morph into a detailed table.\r\n\r\nYou can define the \"responsive\" boundary where additional content is manifest (based on the screen width), or disable it altogether.\r\n\r\nSet the \"responsive\" boundary to:\r\n(** is current)`,\r\n      actions: [\r\n        ...defineActions(responsiveMode, dispatch),\r\n        { txt: 'Close' },\r\n      ]\r\n    });\r\n  }, [dispatch, responsiveMode]);\r\n\r\n  return (\r\n    <span {...props} ref={ref}>\r\n      <UserMenuItem onClick={maintainResponsiveMode}>\r\n        <Chip label=\"responsive\"\r\n              icon={<ChipIcon/>}/>\r\n      </UserMenuItem>\r\n      <Divider/>\r\n    </span>\r\n  );\r\n});  \r\nexport default MaintainResponsiveMode;\r\n\r\n\r\nconst breakpoints = [\r\n//{name: 'Phone',      value: 'xs'},  // xs, extra-small:    0px ... breakpoint ranges are from this point TO the next range (inclusive)\r\n  {name: 'Tablet',     value: 'sm'},  // sm, small:        600px\r\n  {name: 'Desktop',    value: 'md'},  // md, medium:       960px\r\n  {name: 'Landscape',  value: 'lg'},  // lg, large:       1280px\r\n//{name: 'Super-Wide', value: 'xl'},  // xl, extra-large: 1920px\r\n  {name: 'Disable',    value: 'off'},\r\n];\r\n\r\nconst defineActions = (curResponsiveMode, dispatch) => breakpoints.map( (breakpoint) => ({\r\n  txt:    `${ curResponsiveMode===breakpoint.value ? '**' : '' }${breakpoint.name}`,\r\n  action: () => dispatch( _baseUIAct.setResponsiveMode(breakpoint.value) ),\r\n}) );\r\n","import React         from 'react';\r\n\r\nimport {alert}       from 'util/notify';\r\n\r\nimport Divider       from '@material-ui/core/Divider';\r\nimport UserMenuItem  from 'features/common/baseUI/comp/UserMenuItem';\r\n\r\n\r\n/**\r\n * About: display info about this app (gleaned from package.json)\r\n *\r\n * NOTE: These env vars require the following .env file (in your project root per CRA):\r\n *\r\n *   .env\r\n *   ====\r\n *   REACT_APP_NAME=$npm_package_name\r\n *   REACT_APP_VERSION=$npm_package_version\r\n *   REACT_APP_DESCRIPTION=$npm_package_description\r\n *   REACT_APP_ABOUT_DOCS=$npm_package_about_docs\r\n *   REACT_APP_ABOUT_HIST=$npm_package_about_hist\r\n *\r\n * NOTE: Because this is a \"custom\" component that is held in Menu\r\n *       (a ButtonBase MenuItem) it must be able to hold a ref ... hence\r\n *       the React.forwardRef()!\r\n *       see: https://material-ui.com/guides/migration-v3/#button\r\n *            https://material-ui.com/guides/composition/#caveat-with-refs\r\n *            AVOIDS following log:\r\n *            Warning: Function components cannot be given refs. Attempts to access\r\n *                     this ref will fail. Did you mean to use React.forwardRef()?\r\n * NOTE: Subsequent Discovery: I think this is really due to the fact that\r\n *       we were injecting <Divider/> too!\r\n *       This React.forwardRef() was NOT needed in src/features/common/auth/comp/AuthUserMenu.js,\r\n *       where it simply injected a series of <UserMenuItem>s in a React.Fragment ... hmmmm\r\n */\r\nconst About = React.forwardRef( (props, ref) => (\r\n  <span {...props} ref={ref}>\r\n    <Divider/>\r\n    <UserMenuItem onClick={showAbout}>About ...</UserMenuItem>\r\n  </span>\r\n) );\r\nexport default About;\r\n\r\nfunction showAbout() {\r\n  const name    = process.env.REACT_APP_NAME        || 'UNKNOWN name (from package.json: name)';\r\n  const desc    = process.env.REACT_APP_DESCRIPTION || 'UNKNOWN desc (from package.json: description)';\r\n  const ver     = process.env.REACT_APP_VERSION     || 'UNKNOWN (from package.json: version)';\r\n  const docsUrl = process.env.REACT_APP_ABOUT_DOCS;\r\n  const histUrl = process.env.REACT_APP_ABOUT_HIST;\r\n\r\n  const msg = `${name}\\n\\n${desc}\\n\\nversion: ${ver}`;\r\n\r\n  const actions = [];\r\n  if (docsUrl)\r\n    actions.push({ txt: 'Docs',    action: () => window.open(docsUrl, '_blank') });\r\n  if (histUrl)\r\n    actions.push({ txt: 'History', action: () => window.open(histUrl, '_blank') });\r\n  actions.push({ txt: 'Close' });\r\n\r\n  alert.success({msg, actions});\r\n}\r\n","import React                  from 'react';\r\nimport {createFeature,\r\n        fassetValidations}    from 'feature-u';\r\n\r\nimport _baseUI                from './featureName';\r\nimport _baseUIAct             from './actions';\r\nimport reducer                from './state';\r\nimport * as _baseUISel        from './state';\r\nimport logic                  from './logic';\r\nimport leftNavManager         from './LeftNavManager';\r\n\r\nimport MainLayout             from './comp/MainLayout';\r\nimport ToggleUITheme          from './comp/ToggleUITheme';\r\nimport MaintainResponsiveMode from './comp/MaintainResponsiveMode';\r\nimport About                  from './comp/About';\r\n\r\n// feature: baseUI <<< full details in README\r\n//          Provides a UI foundation for an entire application.\r\n//          It manages the following characteristics:\r\n//          - a Responsive Design that auto adjusts for desktops, cell phones, and\r\n//            portable devices.\r\n//          - a UI Theme allowing the user to choose from light/dark renditions\r\n//          - when an active user is signed-in, the following items are also\r\n//            manifest:\r\n//            - a \"Left Nav\" menu\r\n//            - a \"User Menu\" menu\r\n//            - a \"Current View\" state (orchestrating which application view is active)\r\n//            - a \"Tool Bar\" with various artifacts (ex: title bar and footer)\r\nexport default createFeature({\r\n  name: _baseUI,\r\n\r\n  // our public face ...\r\n  fassets: {\r\n\r\n    define: {\r\n      'actions.changeView': _baseUIAct.changeView, // changeView(viewName)\r\n      'sel.curView':        _baseUISel.curView,    // curView(appState): string\r\n\r\n      'actions.addLeftNavItem':    _baseUIAct.addLeftNavItem,    // addLeftNavItem(leftNavKey, LeftNavComp)\r\n      'actions.removeLeftNavItem': _baseUIAct.removeLeftNavItem, // removeLeftNavItem(leftNavKey)\r\n    },\r\n\r\n    defineUse: {\r\n      // inject User Menu entries\r\n      // ... to ToggleUITheme ('light'/'dark')\r\n      'AppMotif.UserMenuItem.aa1_UIThemeToggle': ToggleUITheme,\r\n      // ... to MaintainResponsiveMode ('md'/'lg'/'off')\r\n      'AppMotif.UserMenuItem.aa2_MaintainResponsiveMode': MaintainResponsiveMode,\r\n      // ... to display About info (gleaned from package.json)\r\n      'AppMotif.UserMenuItem.zz8_About': About,\r\n    },\r\n\r\n    use: [\r\n      // full details in README\r\n      ['AppMotif.UserMenuItem.*',   {required: true,  type: fassetValidations.comp}],\r\n      ['AppMotif.auxViewContent.*', {required: false, type: fassetValidations.any}],\r\n    ],\r\n  },\r\n\r\n  reducer,\r\n  logic,\r\n\r\n  // inject our baseUI components into the root of our app\r\n  appWillStart({fassets, curRootAppElm}) {\r\n    return (\r\n      <MainLayout>\r\n        {curRootAppElm}\r\n      </MainLayout>\r\n    );\r\n  },\r\n\r\n  // inject operational dependencies into leftNavManager\r\n  appInit({showStatus, fassets, getState, dispatch}) {\r\n    leftNavManager.injectDependency(fassets, dispatch);\r\n  },\r\n\r\n});\r\n","import {generateActions}    from 'action-u';\r\nimport _tabManager          from './featureName';\r\n\r\nexport default generateActions.root({\r\n  [_tabManager]: { // prefix all actions with our feature name, guaranteeing they unique app-wide!\r\n\r\n    activateTab: { // actions.activateTab(tabId, preview=true): Action\r\n                   // > activate the specified tab (may exist, or will create on first reference)\r\n                   actionMeta: { // NOTE: logic supplements this action to simplify reducer (see docs)\r\n                     traits: ['tabId', 'preview'],\r\n                     ratify: (tabId, preview=true) => [tabId, preview],\r\n                   },\r\n    },\r\n\r\n    closeTab: { // actions.closeTab(tabId): Action\r\n                // > close specified tab\r\n                actionMeta: { // NOTE: logic supplements this action to simplify reducer (see docs)\r\n                  traits: ['tabId'],\r\n                },\r\n    },\r\n\r\n  },\r\n\r\n});\r\n","/**\r\n * Expose our featureName through a mini-meta module that is\r\n * \"importable\" in all use-cases (a single-source-of-truth).\r\n */\r\nexport default 'tabManager';\r\n","import {combineReducers}    from 'redux';\r\nimport {reducerHash}        from 'astx-redux-util';\r\nimport {slicedReducer}      from 'feature-redux';\r\nimport _tabManager          from './featureName';\r\nimport _tabManagerAct       from './actions';\r\n\r\n// ***\r\n// *** Our feature reducer, managing state for our tabManager process.\r\n// ***\r\n\r\nconst reducer = slicedReducer(_tabManager, combineReducers({\r\n\r\n  // activeTabId: string ... the tabId of the active tab\r\n  activeTabId: reducerHash({\r\n    [_tabManagerAct.activateTab]:     (state, action) => action.pgmDirectives.next_activeTabId,\r\n    [_tabManagerAct.closeTab]:        (state, action) => action.pgmDirectives.next_activeTabId,\r\n  }, null), // initialState\r\n\r\n  // previewTabId: string ... the tabId of the optional tab that is in preview mode (will be re-used)\r\n  previewTabId: reducerHash({\r\n    [_tabManagerAct.activateTab]:     (previewTabId, action) => action.pgmDirectives.next_previewTabId,\r\n    [_tabManagerAct.closeTab]:        (previewTabId, action) => previewTabId===action.tabId ? null : previewTabId,\r\n  }, null), // initialState\r\n\r\n  // tabs: [{tabId, tabName}, ...] ... all of our tab objects, fed from the activateTab action\r\n  tabs: reducerHash({\r\n    [_tabManagerAct.activateTab]: (tabs, action) => {\r\n      let   newTabs = tabs;\r\n      const {tabId, tabName}         = action;\r\n      const {removeTabId, addNewTab} = action.pgmDirectives;\r\n\r\n      if (removeTabId) {\r\n        newTabs = newTabs.filter( (tab) => tab.tabId !== removeTabId );\r\n      }\r\n      if (addNewTab) {\r\n        newTabs = [...newTabs, {tabId, tabName}];\r\n      }\r\n      return newTabs;\r\n    },\r\n\r\n    [_tabManagerAct.closeTab]: (tabs, action) => tabs.filter( (tab) => tab.tabId !== action.tabId ),\r\n\r\n  }, []), // initialState\r\n\r\n}) );\r\n\r\nexport default reducer;\r\n\r\n\r\n// ***\r\n// *** Various Selectors\r\n// ***\r\n\r\n// Our feature state root (via slicedReducer as a single-source-of-truth)\r\nconst getFeatureState  = (appState) => reducer.getSlicedState(appState);\r\nconst gfs              = getFeatureState; // ... concise alias (used internally)\r\n\r\nexport const getActiveTabId  = (appState) => gfs(appState).activeTabId;\r\nexport const getPreviewTabId = (appState) => gfs(appState).previewTabId;\r\nexport const getTabs         = (appState) => gfs(appState).tabs;\r\nexport const getTotalTabs    = (appState) => gfs(appState).tabs.length;\r\n","import verify         from 'util/verify';\r\nimport {isString}     from 'util/typeCheck';\r\n\r\n/**\r\n * TabController is an abstract base class that provides the API\r\n * through which the Tabs UI may interact with the visualize-it object\r\n * model.\r\n * \r\n * Derivations of this class are created for each of the specific\r\n * top-level object types, rendered by a tab.\r\n */\r\nexport default class TabController {\r\n\r\n  /**\r\n   * Create a TabController.\r\n   *\r\n   * @param {string} tabId - the globally unique key, identifying the\r\n   * tab in question. Typically a federated namespace is employed to\r\n   * insure this key is globally unique (ex: compLibName/comp, or\r\n   * systemName/view, etc.).\r\n   *\r\n   * @param {string} tabName the human interpretable name displayed in\r\n   * the tab.\r\n   */\r\n  constructor(tabId, tabName) {\r\n\r\n    // validate parameters\r\n    const check = verify.prefix(`${this.diagClassName()}() constructor parameter violation: `);\r\n    // ... tabId\r\n    check(tabId,              'tabId is required');\r\n    check(isString(tabId),    'tabId must be a string');\r\n    // ... tabName\r\n    check(tabName,            'tabName is required');\r\n    check(isString(tabName),  'tabName must be a string');\r\n\r\n    // carve out our object state\r\n    this.tabId   = tabId;\r\n    this.tabName = tabName;\r\n  }\r\n\r\n  /**\r\n   * Return self's tabId.\r\n   * @returns {string} the tabId of self.\r\n   */\r\n  getTabId() {\r\n    return this.tabId;\r\n  }\r\n\r\n  /**\r\n   * Return self's tabName.\r\n   * @returns {string} the tabName of self.\r\n   */\r\n  getTabName() {\r\n    return this.tabName;\r\n  }\r\n\r\n  /**\r\n   * Return the top-level object model targeted by this tab.\r\n   * @returns {SmartObj} the target object rendered by this tab.\r\n   */\r\n  getTarget() {\r\n    throw new Error(`***ERROR*** TabController.getTarget() the ${this.diagClassName()} class derivation MUST implement this abstract method (tabId:${this.tabId}, tabName:${this.tabName})!!`);\r\n  }\r\n\r\n  /**\r\n   * Return the \"no property\" component that renders self in the tab panel.\r\n   * @returns {ReactComp} the \"no property\" component that renders self in the tab panel.\r\n   */\r\n  getTabPanelComp() {\r\n    // cache our TabPanelComp so as to prevent constant re-renders -and- heavy-weight Konva mounts\r\n    if (!this.TabPanelComp) {\r\n      this.TabPanelComp = this.createTabPanelComp();\r\n    }\r\n    return this.TabPanelComp;\r\n  }\r\n\r\n\r\n  /**\r\n   * Create the \"no property\" component that renders self in the tab panel.\r\n   * @returns {ReactComp} the \"no property\" component that renders self in the tab panel.\r\n   */\r\n  createTabPanelComp() {\r\n    throw new Error(`***ERROR*** TabController.createTabPanelComp() the ${this.diagClassName()} class derivation MUST implement this abstract method (tabId:${this.tabId}, tabName:${this.tabName})!!`);\r\n  }\r\n\r\n\r\n  /**\r\n   * Return self's \"real\" class name, used for diagnostic purposes\r\n   * (such as logs and errors).  The name is unmangled (even in\r\n   * production builds).\r\n   *\r\n   * @returns {string} self's \"real\" class name.\r\n   */\r\n  diagClassName() {\r\n    return this.constructor.unmangledName || this.constructor.name;\r\n  }\r\n}\r\nTabController.unmangledName = 'TabController';\r\n","import TabController from './TabController';\r\nimport verify        from 'util/verify';\r\nimport {isString}    from 'util/typeCheck';\r\n\r\n/**\r\n * TabManager is the manager of ALL tabs (TabControllers).\r\n *\r\n * Registered tabs have the potential of being displayed.\r\n *\r\n * When a tab is initially referenced (a dynamic process),\r\n * it will be created through the TabController.xxx() API.\r\n * \r\n * Once a tab has been displayed, all interaction to it will funnel\r\n * through the TabController API.\r\n */\r\nclass TabManager {\r\n\r\n  /**\r\n   * Create a TabManager.\r\n   */\r\n  constructor() {\r\n    // carve out our tabRegistry\r\n    this.tabRegistry = {\r\n      // [tabId]: tabController,\r\n      // ...\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Register the supplied `tabController` as a potential tab that can\r\n   * be rendered in our system.\r\n   *\r\n   * @param {TabController} tabController the controller to register\r\n   *\r\n   * @throws {Error} an Error is thrown for invalid params or if the\r\n   * controller has already been registered.\r\n   */\r\n  registerTab(tabController) {\r\n\r\n    // validate parameters\r\n    const check = verify.prefix('TabManager.registerTab() parameter violation: ');\r\n\r\n    // ... tabController\r\n    check(tabController,                          'tabController is required');\r\n    check(tabController instanceof TabController, 'tabController must be a TabController instance');\r\n\r\n    // maintain our tabRegistry catalog\r\n    const tabId = tabController.getTabId();\r\n    // console.log(`xx TabManager.registerTab() registering tabController(${tabId}): `, tabController);\r\n    if (this.tabRegistry[tabId]) { // verify tabController is not already loaded\r\n      throw new Error(`***ERROR*** TabManager.registerTab() tabId: ${tabId} is already registered :-(`);\r\n    }\r\n    this.tabRegistry[tabId] = tabController;\r\n  }\r\n\r\n  /**\r\n   * Return the TabController registered to the supplied `tabId`\r\n   * (undefined for NOT registered).\r\n   *\r\n   * @param {string} tabId - the id of the TabController to return.\r\n   *\r\n   * @returns {TabController} the TabController registered to the\r\n   * supplied `tabId` (undefined for NOT registered).\r\n   */\r\n  getTabController(tabId) {\r\n    // validate parameters\r\n    const check = verify.prefix('TabManager.getTabController() parameter violation: ');\r\n    // ... tabId\r\n    check(tabId,             'tabId is required');\r\n    check(isString(tabId),   'tabId must be a string');\r\n\r\n    // return the TabController (if any)\r\n    return this.tabRegistry[tabId];\r\n  }\r\n\r\n}\r\n\r\n// expose our single tabManager utility ... AI: singleton code smell\r\nconst tabManager = new TabManager();\r\nexport default tabManager;\r\n","import {createLogic}        from 'redux-logic';\r\nimport _tabManager          from './featureName';\r\nimport _tabManagerAct       from './actions';\r\nimport * as sel             from './state';\r\n\r\nimport tabManager          from './tabManager';\r\n\r\n/**\r\n * Supplement the 'activateTab' action with the following directives\r\n * (centralize logic and simplifying our reducers):\r\n *\r\n * ```\r\n * action: {\r\n *   ... from incoming action:\r\n *   tabId:   'xyz'\r\n *   preview: true\r\n * \r\n *   ... supplemented by logic:\r\n *   tabName: 'ValveXyz'  ... strictly a convenience\r\n *   pgmDirectives: {     ... simplifies reducer\r\n *     next_activeTabId:  'xyz' (or null when NO tabs)\r\n *     next_previewTabId: 'xyz' (or null when NO preview tab)\r\n *     removeTabId:       'xyz' (or null) ... supports previewTab removal\r\n *     addNewTab:         true/false ... supports new tab creation (on first reference)\r\n *   }\r\n * }\r\n *```\r\n */\r\nexport const supplementActivateTab = createLogic({\r\n\r\n  name: `${_tabManager}.supplementActivateTab`,\r\n  type: String(_tabManagerAct.activateTab),\r\n\r\n  transform({getState, action, fassets}, next, reject) {\r\n\r\n    const appState = getState();\r\n\r\n    //***\r\n    //*** Request Aliases: req_ (from original action)\r\n    //***\r\n\r\n    const req_tabId   = action.tabId;\r\n    const req_preview = action.preview; // true: preview tab (single-click), false: permanent tab (double-click)\r\n\r\n\r\n    //***\r\n    //*** Current State Aliases: cur_ (from redux state)\r\n    //***\r\n\r\n//  const cur_activeTabId  = sel.getActiveTabId(appState);\r\n    const cur_previewTabId = sel.getPreviewTabId(appState);\r\n    const cur_tabs         = sel.getTabs(appState);\r\n\r\n    // the requested current tab entry (when it previously exists) ... undefined for new tab request\r\n    const cur_targetTab = cur_tabs.find( (tab) => req_tabId === tab.tabId );\r\n    \r\n    // does the requested target tab pre-exist?\r\n    const cur_targetTabPreExists = cur_targetTab ? true : false;\r\n\r\n    //***\r\n    //*** transform logic\r\n    //***\r\n\r\n    // reason about next_activeTabId\r\n    // ... for 'activateTab' action, this is ALWAYS our incoming tabId\r\n    const next_activeTabId = req_tabId;\r\n\r\n    // manage addNewTab directive\r\n    // ... action may direct the dynamic addition of a NEW tab FROM the tabCreator ReactComp found our Tab Registry\r\n    const addNewTab = !cur_targetTabPreExists;\r\n\r\n    // manage our preview tab directives\r\n    // ... this is the only complex aspect of this process\r\n\r\n    // ... default our directives to NO CHANGE\r\n    let next_previewTabId = cur_previewTabId; // DEFAULT: NO change\r\n    let removeTabId       = null;             // DEFAULT: null (i.e. NO preview tab to remove)\r\n\r\n    // ... when activating a new tab\r\n    if (addNewTab) {\r\n      if (req_preview) { // ... our new tab is a \"preview\" mode request\r\n        next_previewTabId = req_tabId;        // this new tab will now be the preview tab\r\n        removeTabId       = cur_previewTabId; // displacing prior preview tab (if any - may be null)\r\n      }\r\n      else { // ... our new tab is a \"permanent\" mode request (any prior preview should NOT change)\r\n        // ... this is our default setting\r\n      }\r\n    }\r\n    // ... when activating an existing tab\r\n    else {\r\n\r\n      // KEY: THIS IS THE REAL TESTING POINT\r\n      // if request is permanent, and this existing tab was previously preview\r\n      // ... we want to remove the preview connotation\r\n      if ( (!req_preview) && (req_tabId === cur_previewTabId) ) {\r\n        next_previewTabId = null; // remove ANY preview connotation\r\n      }\r\n      // .. otherwise we leave preview as-is (I THINK)\r\n\r\n    }\r\n\r\n    //***\r\n    //*** supplement our action with pgmDirectives (see JSDocs above)\r\n    //***\r\n\r\n    action.tabName = tabManager.getTabController(req_tabId).getTabName(); // ... AI: may error - returns undefined if NOT registered?\r\n\r\n    action.pgmDirectives = {\r\n      next_activeTabId,\r\n      next_previewTabId,\r\n      removeTabId,\r\n      addNewTab,\r\n    };\r\n\r\n    next(action);\r\n  },\r\n\r\n});\r\n\r\n\r\n/**\r\n * Supplement the 'closeTab' action with the following directives\r\n * (centralize logic and simplifying our reducers):\r\n *\r\n * ```\r\n * action: {\r\n *   ... from incoming action:\r\n *   tabId:   'xyz'\r\n * \r\n *   ... supplemented by logic:\r\n *   pgmDirectives: {     ... simplifies reducer\r\n *     next_activeTabId:  'xyz' (or null when NO tabs)\r\n *   }\r\n * }\r\n *```\r\n */\r\nexport const supplementCloseTab = createLogic({\r\n\r\n  name: `${_tabManager}.supplementCloseTab`,\r\n  type: String(_tabManagerAct.closeTab),\r\n\r\n  transform({getState, action, fassets}, next, reject) {\r\n\r\n    const appState = getState();\r\n\r\n    const tabs         = sel.getTabs(appState);\r\n    const closeTabIndx = tabs.findIndex( (tab) => action.tabId === tab.tabId );\r\n\r\n    // we shift our next active tab to the right (except on end - to the left)\r\n    // ... REMEMBER: we are dealing with the state (array) BEFORE it has been altered\r\n\r\n    //                                                     AT END ...       NOT AT END ...\r\n    //                                                     ==============   ==============\r\n    const nextTabIndx = (closeTabIndx === tabs.length-1) ? closeTabIndx-1 : closeTabIndx+1;\r\n    const nextTabId   = nextTabIndx < 0 ? null : tabs[nextTabIndx].tabId;\r\n\r\n\r\n    //***\r\n    //*** supplement our action with pgmDirectives (see JSDocs above)\r\n    //***\r\n\r\n    action.pgmDirectives = {\r\n      next_activeTabId: nextTabId,\r\n    };\r\n\r\n    next(action);\r\n  },\r\n\r\n});\r\n\r\n\r\n/**\r\n * Synchronize the target tab's DispMode when a tab is initially\r\n * displayed.  \r\n *\r\n * This will insure the internal Konva state matches the object\r\n * model's initial state!\r\n * \r\n * BACKGROUND: Normally a DispMode starts out in a 'view\" mode.\r\n *             HOWEVER: If we close a tab that is in edit mode, \r\n *                      and then when we bring the tab back\r\n *                      (from the LeftNav) the model will now\r\n *                       match the last DispMode!\r\n */\r\nexport const syncTargetDispMode = createLogic({\r\n\r\n  name: `${_tabManager}.syncTargetDispMode`,\r\n  type: String(_tabManagerAct.activateTab),\r\n\r\n  // NOTE: we perform this in the \"process\" phase because Konva must be mounted to work :-(\r\n  process({getState, action, fassets}, dispatch, done) {\r\n\r\n    // when this is a new tab ...\r\n    if (action.pgmDirectives.addNewTab) {\r\n\r\n      // sync it's Konva state to match the object model's initial state\r\n      // ... see JavaDoc (above)\r\n      // console.log(`xx LOGIC: ${_tabManager}.syncTargetDispMode ... syncing now!`);\r\n      const tabController = tabManager.getTabController(action.tabId); // ... AI: may error - returns undefined if NOT registered?\r\n      const target        = tabController.getTarget();\r\n      target.setDispMode( target.getDispMode() );\r\n    }\r\n\r\n    done();\r\n  },\r\n\r\n});\r\n\r\n\r\n// promote all logic modules for this feature\r\n// ... NOTE: individual logic modules are unit tested using the named exports.\r\nexport default [\r\n  supplementActivateTab,\r\n  supplementCloseTab,\r\n\r\n  syncTargetDispMode,\r\n];\r\n","import React,\r\n       {useCallback}       from 'react';\r\n\r\nimport {useSelector,\r\n        useDispatch}       from 'react-redux'\r\n\r\nimport {createLogger}      from 'util/logger';\r\n\r\nimport * as _tabManagerSel from '../state';\r\nimport _tabManagerAct      from '../actions';\r\nimport tabManager          from '../tabManager';\r\n\r\nimport AppBar              from '@material-ui/core/AppBar';\r\nimport Box                 from '@material-ui/core/Box';\r\nimport CloseIcon           from '@material-ui/icons/Close';\r\nimport Grid                from '@material-ui/core/Grid';\r\nimport Paper               from '@material-ui/core/Paper';\r\nimport Tab                 from '@material-ui/core/Tab';\r\nimport Tabs                from '@material-ui/core/Tabs';\r\nimport Typography          from '@material-ui/core/Typography';\r\nimport {makeStyles}        from '@material-ui/core/styles';\r\n\r\n// our internal diagnostic logger (normally disabled)\r\nconst log = createLogger('***DIAG*** <TabManager> ... ').disable();\r\n\r\n/**\r\n * TabManager: Our top-level manager of tabs.\r\n */\r\nexport default function TabManager() {\r\n\r\n  const classes = useStyles();\r\n\r\n  const activeTabId  = useSelector((appState) => _tabManagerSel.getActiveTabId(appState), []);\r\n  const previewTabId = useSelector((appState) => _tabManagerSel.getPreviewTabId(appState), []);\r\n  const tabs         = useSelector((appState) => _tabManagerSel.getTabs(appState), []);\r\n  const dispatch     = useDispatch();\r\n  const handleTabChanged   = useCallback((event, tabId) => {\r\n    log(`handleTabChanged('${tabId}')`);\r\n    dispatch( _tabManagerAct.activateTab(tabId) );\r\n  }, [dispatch]);\r\n\r\n  // NOTE: handleCloseTab is currently NOT cached because I am creating multiple inline funcs within the render (below)\r\n  const handleCloseTab = (event, tabId) => {\r\n    log('in handleCloseTab: ', tabId);\r\n    event.stopPropagation(); // prevent parent tabChanged event from firing ... if not done, it can fire AFTER closeTab - which is bad (because the tab is gone)\r\n    dispatch( _tabManagerAct.closeTab(tabId) );\r\n  };\r\n\r\n  // PERF: TabManager renders 2 times every tab change ... performance doesn't appear to be a problem :-)\r\n  log('rendering');\r\n\r\n  // NOTE: Each TabPanel content is app-specific,\r\n  //       dynamically created through the tab registry's tabCreator ReactComp.\r\n\r\n  // TABS NOTE: <Tabs> value IS the currently selected Tab value\r\n  //            ... can be false - NO tab selected (NOT all that useful)\r\n  //            ... onChange is fired when <Tab> clicked, passing new active <Tab> value\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs value={activeTabId}\r\n              onChange={handleTabChanged}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              variant=\"scrollable\"\r\n              scrollButtons=\"auto\">\r\n          {tabs.map( tab => (\r\n             <Tab className={tab.tabId===previewTabId ? classes.tabPreview : classes.tabPermanent}\r\n                  key={tab.tabId}\r\n                  value={tab.tabId}\r\n                  label={(\r\n                    <Grid container\r\n                          // force dual items to edge\r\n                          justify=\"space-between\">\r\n                      <Grid item>\r\n                        <Typography variant=\"subtitle2\" color=\"inherit\">\r\n                          {tab.tabName}\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <CloseIcon onClick={(e) => handleCloseTab(e, tab.tabId)}/>\r\n                      </Grid>\r\n                    </Grid>\r\n                  )}\r\n             />)\r\n           )}\r\n        </Tabs>\r\n      </AppBar>\r\n      {tabs.map( tab => {\r\n         const tabController = tabManager.getTabController(tab.tabId); // ... AI: may error - returns undefined if NOT registered?\r\n         const TabCreator    = tabController.getTabPanelComp();\r\n         return (\r\n           <TabPanel key={tab.tabId}\r\n                     tabId={tab.tabId}\r\n                     activeTabId={activeTabId}>\r\n             {/* AI: this content will be dynamically rendered\r\n           \r\n                     NOTE: the following div/Box (if used) will show you the results of a big content and where the scroll bars appear\r\n                          <div style={{height: 2000, width: 1000, border: '1px solid orange'}}>\r\n           \r\n                          <Box border={1}\r\n                                borderColor=\"secondary.light\">\r\n           \r\n                          <Box border={1}\r\n                               borderColor=\"secondary.light\"\r\n                               width={1000}\r\n                               height={2000}>\r\n           \r\n                               primary.light: green diff shade\r\n                               primary.main:  green\r\n                               primary.dark:  green diff shade\r\n           \r\n                               secondary.light: grayish <<< like this one\r\n                               secondary.main:  purple\r\n                               secondary.dark:  almost black\r\n               */}\r\n             <TabCreator/>\r\n           </TabPanel>\r\n         );\r\n       } )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n  tabPreview: {\r\n    fontStyle: 'italic',\r\n  },\r\n  tabPermanent: {\r\n  },\r\n}) );\r\n\r\n\r\n// TODO: consider moving TabPanel out into it's own module (possibly NOT if we only use it here)\r\n// TODO: something above TabPanel is giving it the full width\r\n//       how to fill all vertical space?\r\n//        - a style height: '100%' kinda works, but it doesn't account for filler under AppBar\r\n//          ... style={{height: '100%'}}\r\n//        - can use css calc(): 97px = 48px AppBar + 49px TabBar <<< number calculation is a real hack\r\n//          ... style={{height: 'calc(100% - 97px)'}}\r\n// NOTE: the box (below) is giving us a bit of styling (currently padding so as to not place content right up to the edge)\r\nconst TabPanel = ({tabId, activeTabId, children}) => (\r\n  <Paper hidden={tabId !== activeTabId} style={{height: 'calc(100% - 97px)'}}>\r\n    <Box padding={1}>\r\n      {children}\r\n    </Box>\r\n  </Paper>\r\n);\r\n","import React from 'react';\r\nimport Grid  from '@material-ui/core/Grid';\r\n\r\n/**\r\n * A component that centers all contained children within a Grid (both horizontally and vertically).\r\n */\r\nexport default function CenterItems({children}) {\r\n  return (\r\n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n      {children}\r\n    </Grid>\r\n  );\r\n}\r\n\r\n/**\r\n * A component that horizontally centers all contained children within a Grid.\r\n * AI: Currently not used (added in an attempt to fix icon alignment with text, but found better solution)\r\n */\r\nexport function CenterItemsHorizontally({children}) {\r\n  return (\r\n    <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\">\r\n      {children}\r\n    </Grid>\r\n  );\r\n}\r\n","import React           from 'react';\r\n\r\nimport {makeStyles}    from '@material-ui/core/styles';\r\nimport Typography      from '@material-ui/core/Typography';\r\nimport Paper           from '@material-ui/core/Paper';\r\nimport CenterItems     from 'util/CenterItems';\r\n\r\n\r\n/**\r\n * StartUpPage: our initial display when NO tabs are active.\r\n */\r\nexport default function StartUpPage() {\r\n\r\n  const classes = useStyles();\r\n\r\n  // NOTE: relative path (in imgs below) support server deployment in sub-directory\r\n  // ?? HACK: how to fill all vertical space (using calc below) see TabManager.js note\r\n  return (\r\n    <Paper className={classes.root} style={{height: 'calc(100% - 48px)'}}>\r\n      <CenterItems>\r\n        <img src=\"visualize-it-logo.png\" width=\"300\" alt=\"Logo\" className={classes.entry} />\r\n      </CenterItems>\r\n      <CenterItems>\r\n        <Typography variant=\"h4\" color=\"inherit\" noWrap className={classes.entry} >\r\n          Your View into External Systems!\r\n        </Typography>\r\n      </CenterItems>\r\n      <CenterItems>\r\n        <img src=\"visualize-it-logo-eyes.jpg\" alt=\"Logo Eyes\" className={classes.entry}/>\r\n      </CenterItems>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n  root: {\r\n    padding: theme.spacing(3, 2, 15),\r\n  },\r\n\r\n  entry: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}) );\r\n","import React           from 'react';\r\nimport {featureRoute}  from 'feature-router';\r\nimport TabManager      from './comp/TabManager';\r\nimport StartUpPage     from './comp/StartUpPage';\r\nimport {getTotalTabs}  from './state';\r\n\r\n// ***\r\n// *** The routes for this feature.\r\n// ***\r\n\r\nexport default [\r\n\r\n  featureRoute({\r\n    content: ({fassets, appState}) => getTotalTabs(appState) === 0 ? <StartUpPage/> : <TabManager/>,\r\n  }),\r\n\r\n];\r\n","import {createFeature}    from 'feature-u';\r\nimport _tabManager        from './featureName';\r\nimport _tabManagerAct     from './actions';\r\nimport reducer,\r\n       {getTotalTabs,\r\n        getActiveTabId}   from './state';\r\nimport logic              from './logic';\r\nimport route              from './route';\r\n\r\n\r\n// feature: tabManager\r\n//          a manager of tabs\r\nexport default createFeature({\r\n  name: _tabManager,\r\n\r\n  fassets: {\r\n    define: {\r\n      'actions.activateTab': _tabManagerAct.activateTab, // activateTab(tabId, preview=true): Action\r\n      'actions.closeTab':    _tabManagerAct.closeTab,    // closeTab(tabId): Action\r\n\r\n      'sel.getTotalTabs':    getTotalTabs,\r\n      'sel.getActiveTabId':  getActiveTabId,\r\n    },\r\n  },\r\n\r\n  reducer,\r\n  logic,\r\n  route,\r\n});\r\n","import {createLogic}       from 'redux-logic';\r\nimport _toolBar            from './featureName';\r\nimport _toolBarAct         from './actions';\r\nimport {tabManager}        from 'features';\r\n\r\n\r\n/**\r\n * Sync DispMode changes to the object model.\r\n */\r\nexport const syncDispModeChangesToObjectModel = createLogic({\r\n\r\n  name: `${_toolBar}.syncDispModeChangesToObjectModel`,\r\n  type: String(_toolBarAct.dispModeChanged),\r\n\r\n  process({getState, action, fassets}, dispatch, done) {\r\n\r\n    // propagate this change to the object model via the TabController\r\n    const appState      = getState();\r\n    const activeTabId   = fassets.sel.getActiveTabId(appState);\r\n    const tabController = tabManager.getTabController(activeTabId);\r\n    tabController.getTarget().setDispMode(action.dispMode);\r\n\r\n    done();\r\n  },\r\n\r\n});\r\n\r\n\r\n// promote all logic modules for this feature\r\n// ... NOTE: individual logic modules are unit tested using the named exports.\r\nexport default [\r\n  syncDispModeChangesToObjectModel,\r\n];\r\n","import {createFeature}  from 'feature-u';\r\nimport _toolBar         from './featureName';\r\nimport reducer          from './state';\r\nimport logic            from './logic';\r\n\r\n// feature: toolBar\r\n//          manages the toolbar and it's dynamics\r\nexport default createFeature({\r\n  name: _toolBar,\r\n  reducer,\r\n  logic,\r\n});\r\n","import {createLogic}      from 'redux-logic';\r\nimport _logActions        from './featureName';\r\nimport featureFlags       from 'featureFlags';\r\n\r\nlet lastState = null;\r\n\r\n/**\r\n * Log all dispatched actions.\r\n *\r\n * TODO: retrofit to use real logger:\r\n *       using the following Log levels:\r\n *         - TRACE:   see dispatched actions\r\n *         - VERBOSE: see dispatched actions INCLUDING action content (CAUTION: action content can be BIG)\r\n */\r\nexport const actionLogger = createLogic({\r\n\r\n  name: `${_logActions}.actionLogger`,\r\n  type: '*', // monitor ALL action types\r\n\r\n  transform({getState, action}, next) {\r\n\r\n    if (featureFlags.log === 'verbose') { // group action/state together\r\n      console.group(`Action: ${action.type}`);\r\n    }\r\n\r\n    console.log('Dispatched Action: ', action);\r\n\r\n    // TODO: retrofit to use log-u:\r\n    // // log dispatched action\r\n    // if (log.isVerboseEnabled()) {\r\n    //   log.verbose(()=> `Dispatched Action: ${FMT(action.type)} with content:\\n${FMT(action)}`);\r\n    // }\r\n    // else {\r\n    //   log.trace(()=>   `Dispatched Action: ${FMT(action.type)}`);\r\n    // }\r\n\r\n    // continue processing\r\n    next(action);\r\n  },\r\n\r\n  process({getState, action, fassets}, dispatch, done) {\r\n\r\n    if (featureFlags.log === 'verbose') { // state can be big ... log conditionally\r\n\r\n      const curState = getState();\r\n      if (curState === lastState) {\r\n        console.log('Current State: UNCHANGED');\r\n      }\r\n      else {\r\n        console.log('Current State: ', curState);\r\n      }\r\n      lastState = curState;\r\n\r\n      console.groupEnd();\r\n    }\r\n\r\n    done();\r\n  },\r\n\r\n});\r\n\r\n\r\n// promote all logic modules for this feature\r\n// ... NOTE: individual logic modules are unit tested using the named exports.\r\nexport default [\r\n  actionLogger,\r\n];\r\n","/**\r\n * Expose our featureName through a mini-meta module that is\r\n * \"importable\" in all use-cases (a single-source-of-truth).\r\n */\r\nexport default 'logActions';\r\n","import {createFeature}  from 'feature-u';\r\nimport _logActions      from './featureName';\r\nimport logic            from './logic';\r\nimport featureFlags     from 'featureFlags';\r\n\r\n// feature: logActions\r\n//          log all dispatched actions and resulting state (full details in README)\r\nexport default createFeature({\r\n  name:    _logActions,\r\n  enabled: featureFlags.log ? true : false, // NOTE: feature-u requires boolean, but featureFlags.log can be a string (e.g. 'verbose')\r\n  logic,\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n           .register(swUrl)\n           .then(registration => {\n             registration.onupdatefound = () => {\n               const installingWorker = registration.installing;\n               if (installingWorker == null) {\n                 return;\n               }\n               installingWorker.onstatechange = () => {\n                 if (installingWorker.state === 'installed') {\n                   if (navigator.serviceWorker.controller) {\n                     // At this point, the updated precached content has been fetched,\n                     // but the previous service worker will still serve the older\n                     // content until all client tabs are closed.\n                     console.log(\n                       'New content is available and will be used when all ' +\n                       'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                     );\n\n                     // Execute callback\n                     if (config && config.onUpdate) {\n                       config.onUpdate(registration);\n                     }\n                   } else {\n                     // At this point, everything has been precached.\n                     // It's the perfect time to display a\n                     // \"Content is cached for offline use.\" message.\n                     console.log('Content is cached for offline use.');\n\n                     // Execute callback\n                     if (config && config.onSuccess) {\n                       config.onSuccess(registration);\n                     }\n                   }\n                 }\n               };\n             };\n           })\n           .catch(error => {\n             console.error('Error during service worker registration:', error);\n           });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createFeature}    from 'feature-u';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// feature: pwa\r\n//          orchestrates the Progressive Web App hooks (as defined by Create React App)\r\nexport default createFeature({\r\n  name:    'pwa',\r\n\r\n  appInit({showStatus, fassets, getState, dispatch}) {\r\n    // FROM: CRA (Create React App):\r\n    // If you want your app to work offline and load faster, you can change\r\n    // unregister() to register() below. Note this comes with some pitfalls.\r\n    // Learn more about service workers: http://bit.ly/CRA-PWA\r\n    serviceWorker.unregister();\r\n  }\r\n});\r\n","import React,\r\n       {useState,\r\n        useCallback}       from 'react';\r\nimport Collapse            from '@material-ui/core/Collapse';\r\nimport ExpandLessIcon      from '@material-ui/icons/ExpandMore';   // in effect WHEN EXPANDED  ... i.e. clicking will collapse\r\nimport ExpandMoreIcon      from '@material-ui/icons/ChevronRight'; // in effect WHEN COLLAPSED ... i.e. clicking will expand\r\nimport ListItem            from '@material-ui/core/ListItem';\r\nimport ListItemIcon        from '@material-ui/core/ListItemIcon';\r\nimport ListItemText        from '@material-ui/core/ListItemText';\r\nimport PaletteIconDefault  from '@material-ui/icons/Palette';\r\nimport Paper               from '@material-ui/core/Paper';\r\nimport {makeStyles}        from '@material-ui/core/styles';\r\n\r\n\r\n/**\r\n * LeftNavCollapsibleItem: A top-level LeftNav entry that adorns it's children\r\n *                         (the pallet) with a collapsible control.\r\n *\r\n * The pallet (i.e. the children) will typically contain an expandable\r\n * tree ... however this is not required.\r\n */\r\nexport default function LeftNavCollapsibleItem({name, PaletteIcon=PaletteIconDefault, children}) {\r\n\r\n  const classes         = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const toggleExpansion = useCallback(() => {\r\n    setOpen(!open);\r\n  }, [open]);\r\n\r\n  return (\r\n    <>\r\n    <ListItem button onClick={toggleExpansion}>\r\n      <ListItemIcon>\r\n        <PaletteIcon/>\r\n      </ListItemIcon>\r\n      <ListItemText primary={name}/>\r\n      {open ? <ExpandLessIcon/> : <ExpandMoreIcon/>}\r\n    </ListItem>\r\n    <Collapse in={open}\r\n              // NOTE: removed unmountOnExit (was causing tree expansion to loose state)\r\n              timeout=\"auto\">\r\n      <Paper className={classes.pallet}>\r\n        {children}\r\n      </Paper>\r\n    </Collapse>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n  pallet: {\r\n    margin:  theme.spacing(0, 2, 2, 2),\r\n    padding: theme.spacing(1),\r\n  },\r\n}) );\r\n","import React               from 'react';\r\nimport {useRef, useEffect} from 'react';\r\nimport {createLogger}      from 'util/logger';\r\n\r\n// our internal diagnostic logger (normally disabled)\r\nconst log = createLogger('***DIAG*** <ReactSmartView> ... ').enable();\r\n\r\n\r\n// ReactSmartView: a re-usable React Component that mounts (i.e. renders) a SmartView.\r\n//                 NOTE: This is part of util because it is a react utility \r\n//                       used by the interactive tool ... NOT a core offering!\r\nfunction ReactSmartView({view, ...otherProps}) {\r\n\r\n  const stageElm = useRef(null);\r\n\r\n  // mount the view canvas graphics, once self is fully manifest in the real HTML DOM\r\n  useEffect( () => {\r\n    view.mount(stageElm.current);    \r\n  }, [view]); // ... the dependency list prevents redundant mounts()\r\n\r\n  // ?? crude test\r\n  // ? style={{backgroundColor: 'gray', borderWidth: 5, borderStyle: 'solid', borderColor: 'purple'}}\r\n  // ?? AI: the style characteristics (below) will be eventually gleaned from future SmartView API\r\n  //        ex: view.backgroundColor, view.width, view.height \r\n  //        THE BORDER is provided by US (not sure) to expose the view border and/or ability to edit width/height (unsure about this last one)\r\n  log('here is my view: ', view);\r\n  const {width, height} = view.size();\r\n  return <div ref={stageElm} {...otherProps} style={{backgroundColor: 'gray', width, height, border: '1px solid black'}}/>;\r\n}\r\n\r\n// PERF: memo is critical (without it re-render is frequent, even activating tabs)\r\n//       - bypasses render if props are the same (can override shallow comparison with a second fn param to memo()\r\n//       - also still allows re-render on hooks direction\r\nexport default React.memo(ReactSmartView);\r\n","import React          from 'react';\r\nimport ReactSmartView from 'util/ReactSmartView';\r\n\r\nimport TabController  from './TabController';\r\n\r\nimport verify         from 'util/verify';\r\n\r\nimport Scene          from 'core/Scene';\r\nimport SmartView      from 'core/SmartView';\r\n\r\n\r\n/**\r\n * TabControllerScene is a concrete class that manages a specific Scene tab.\r\n */\r\nexport default class TabControllerScene extends TabController {\r\n\r\n  /**\r\n   * Create a TabControllerScene.\r\n   *\r\n   * @param {string} tabId - the globally unique key, identifying the\r\n   * tab in question. Typically a federated namespace is employed to\r\n   * insure this key is globally unique (ex: compLibName/comp, or\r\n   * systemName/view, etc.).\r\n   *\r\n   * @param {string} tabName the human interpretable name displayed in\r\n   * the tab.\r\n   *\r\n   * @param {Scene} scene the scene being displayed/managed by this tab.\r\n   */\r\n  constructor(tabId, tabName, scene) {\r\n    super(tabId, tabName);\r\n\r\n    // validate parameters\r\n    const check = verify.prefix(`${this.diagClassName()}() constructor parameter violation: `);\r\n    // ... tabId/tabName done by base class\r\n    // ... scene\r\n    check(scene,                   'scene is required');\r\n    check(scene instanceof Scene,  'scene must be a Scene object');\r\n\r\n    // retain state specific to this derivation\r\n    this.scene = scene;\r\n  }\r\n\r\n  // our target is our scene\r\n  getTarget() {\r\n    return this.scene;\r\n  }\r\n\r\n  // wrap our scene in the panel display\r\n  createTabPanelComp() {\r\n    const view = new SmartView({id: `view-${this.getTabId()}`, name: `view-${this.getTabName()}`, scene: this.scene});\r\n    const panelComp = () => <ReactSmartView view={view}/>;\r\n    return panelComp;\r\n  }\r\n\r\n}\r\n","import React          from 'react';\r\nimport ReactSmartView from 'util/ReactSmartView';\r\n\r\nimport TabController  from './TabController';\r\n\r\nimport verify         from 'util/verify';\r\n\r\nimport Collage        from 'core/Collage';\r\nimport SmartView      from 'core/SmartView';\r\n\r\n\r\n/**\r\n * TabControllerCollage is a concrete class that manages a specific Collage tab.\r\n */\r\nexport default class TabControllerCollage extends TabController {\r\n\r\n  /**\r\n   * Create a TabControllerCollage.\r\n   *\r\n   * @param {string} tabId - the globally unique key, identifying the\r\n   * tab in question. Typically a federated namespace is employed to\r\n   * insure this key is globally unique (ex: compLibName/comp, or\r\n   * systemName/view, etc.).\r\n   *\r\n   * @param {string} tabName the human interpretable name displayed in\r\n   * the tab.\r\n   *\r\n   * @param {Collage} collage the collage being displayed/managed by this tab.\r\n   */\r\n  constructor(tabId, tabName, collage) {\r\n    super(tabId, tabName);\r\n\r\n    // validate parameters\r\n    const check = verify.prefix(`${this.diagClassName()}() constructor parameter violation: `);\r\n    // ... tabId/tabName done by base class\r\n    // ... collage\r\n    check(collage,                     'collage is required');\r\n    check(collage instanceof Collage,  'collage must be a Collage object');\r\n\r\n    // retain state specific to this derivation\r\n    this.collage = collage;\r\n  }\r\n\r\n  // our target is our collage\r\n  getTarget() {\r\n    return this.collage;\r\n  }\r\n\r\n  // wrap our collage in the panel display\r\n  createTabPanelComp() {\r\n    const view = new SmartView({id: `view-${this.getTabId()}`, name: `view-${this.getTabName()}`, scene: this.collage});\r\n    const panelComp = () => <ReactSmartView view={view}/>;\r\n    return panelComp;\r\n  }\r\n\r\n}\r\n","import React          from 'react';\r\nimport ReactSmartView from 'util/ReactSmartView';\r\n\r\nimport TabController  from './TabController';\r\n\r\nimport PseudoClass    from 'core/PseudoClass';\r\nimport SmartView      from 'core/SmartView';\r\nimport Scene          from 'core/Scene';\r\n\r\nimport verify         from 'util/verify';\r\nimport {isClass}      from 'util/typeCheck';\r\n\r\n\r\n/**\r\n * TabControllerClass is a concrete class that manages a specific Class tab.\r\n */\r\nexport default class TabControllerClass extends TabController {\r\n\r\n  /**\r\n   * Create a TabControllerClass.\r\n   *\r\n   * @param {string} tabId - the globally unique key, identifying the\r\n   * tab in question. Typically a federated namespace is employed to\r\n   * insure this key is globally unique (ex: compLibName/comp, or\r\n   * systemName/view, etc.).\r\n   *\r\n   * @param {string} tabName the human interpretable name displayed in\r\n   * the tab.\r\n   *\r\n   * @param {class} clazz the class being displayed/managed by this tab.\r\n   */\r\n  constructor(tabId, tabName, clazz) {\r\n    super(tabId, tabName);\r\n\r\n    // validate parameters\r\n    const check = verify.prefix(`${this.diagClassName()}() constructor parameter violation: `);\r\n    // ... tabId/tabName done by base class\r\n    // ... clazz\r\n    check(clazz,           'clazz is required');\r\n    check(isClass(clazz),  'clazz must be a class type');\r\n\r\n    // retain state specific to this derivation\r\n    this.clazz = clazz;\r\n\r\n    // instantiate a single component from self's class\r\n    // ... this is what we will render in our tab :-)\r\n    this.compName = PseudoClass.getClassName(clazz);\r\n    this.comp     = new clazz({id: `comp-${this.compName}`}); // CONSIDER: hopefully no other param context is needed ... I think we are OK\r\n  }\r\n\r\n  // our target is our component instance, instantiated by self's class\r\n  getTarget() {\r\n    return this.comp;\r\n  }\r\n\r\n  // wrap our class in the panel display\r\n  createTabPanelComp() {\r\n\r\n    // NOTE: Components visualization is very restricted\r\n    //       - within the builder to simply verify it's visuals\r\n    //       - an isolated read-only view\r\n    //       Because of this, we simply piggy-back off the production\r\n    //       code that supports a scene.\r\n    //       - using the Scene, we merely\r\n    //       - instantiate a single component in it\r\n    //       - the component API determines if it is editable\r\n    //         ... see: canHandleDispMode(dispMode): boolean\r\n\r\n    // wrap our single component in a scene (see NOTE above)\r\n    const scene = new Scene({\r\n      id: `view-${this.compName}`,\r\n      comps: [this.comp], // \r\n      width:  300,   // ?? we need a way for the comp to tell us it's size\r\n      height: 300,   //    ... once it is mounted, we can interrogate Konva HOWEVER that is too late\r\n    });\r\n\r\n    // from this point, we can pick up with the normal SmartView logic\r\n    const view = new SmartView({id: `view-${this.compName}`, scene});\r\n    const panelComp = () => <ReactSmartView view={view}/>;\r\n    return panelComp;\r\n  }\r\n\r\n}\r\n","// import ALL features that make up our app\r\nimport sandbox                from './sandbox/feature';\r\n//import auth                   from './common/auth/feature';    // AI: DECIDE_AUTH_USER_NEEDED\r\n//import authService            from './common/auth/subFeatures/authService/feature';\r\n//import authServiceFirebase    from './common/auth/subFeatures/authServiceFirebase/feature';\r\n//import authServiceMock        from './common/auth/subFeatures/authServiceMock/feature';\r\nimport initFirebase           from './common/initFirebase/feature';\r\nimport baseUI                 from './common/baseUI/feature';\r\nimport tabManagerFeature      from './common/tabManager/feature';\r\nimport toolBar                from './toolBar/feature';\r\nimport logActions             from './common/diagnostic/logActions/feature';\r\nimport pwa                    from './common/pwa/feature';\r\n\r\n// import feature public assets\r\nimport leftNavManager          from 'features/common/baseUI/LeftNavManager';\r\nimport LeftNavMenuPallet       from 'features/common/baseUI/comp/LeftNavMenuPallet';\r\nimport LeftNavCollapsibleItem  from 'features/common/baseUI/comp/LeftNavCollapsibleItem';\r\nimport tabManager              from 'features/common/tabManager/tabManager';\r\nimport TabControllerScene      from 'features/common/tabManager/TabControllerScene';\r\nimport TabControllerCollage    from 'features/common/tabManager/TabControllerCollage';\r\nimport TabControllerClass      from 'features/common/tabManager/TabControllerClass';\r\n\r\n\r\n//***\r\n//*** Promote ALL features that make up our app\r\n//***\r\n\r\nexport default [\r\n\r\n  // app-specific features\r\n\r\n  sandbox,\r\n\r\n  // common app-neutral features\r\n\r\n  baseUI,\r\n  tabManagerFeature,\r\n  toolBar,\r\n  \r\n//auth,\r\n//authService,\r\n//authServiceFirebase,\r\n//authServiceMock,\r\n  \r\n  initFirebase,\r\n  \r\n  pwa,\r\n\r\n  // diagnostic features ...\r\n  logActions,\r\n];\r\n\r\n\r\n//*** \r\n//*** Promote feature public assets\r\n//*** ... aliased to minimize feature coupling\r\n//*** \r\n\r\nexport {\r\n  leftNavManager,\r\n  LeftNavMenuPallet,\r\n  LeftNavCollapsibleItem,\r\n\r\n  tabManager,\r\n  TabControllerScene,\r\n  TabControllerCollage,\r\n  TabControllerClass,\r\n};\r\n","import React                  from 'react';\r\nimport {createReducerAspect}  from 'feature-redux';\r\nimport {createLogicAspect}    from 'feature-redux-logic';\r\nimport {createRouteAspect}    from 'feature-router';\r\nimport SplashScreen           from 'util/SplashScreen';\r\n\r\n\r\n//***\r\n//*** define/configure the aspects representing our app's run-time stack\r\n//***\r\n\r\n// redux - extending: Feature.reducer\r\nconst reducerAspect = createReducerAspect();\r\n\r\n// redux-logic - extending: Feature.logic\r\nconst logicAspect   = createLogicAspect();\r\n\r\n// Feature Routes - extending: Feature.route\r\nconst routeAspect   = createRouteAspect({\r\n  // ... define fallback screen (used when no routes are in effect)\r\n  fallbackElm: <SplashScreen msg=\"I'm trying to think but it hurts!\"/>,\r\n});\r\n\r\n\r\n//***\r\n//*** promote the aspects representing our app's run-time stack\r\n//***\r\n\r\nexport default [\r\n  reducerAspect,\r\n  logicAspect,\r\n  routeAspect,\r\n];\r\n","import 'core/preregisterCoreClasses';  // pre-register our \"core\" SmartPkg very early, allowing pkgManager to resolve \"core\" packages\r\nimport ReactDOM     from 'react-dom';\r\nimport {launchApp}  from 'feature-u';\r\nimport features     from 'features';\r\nimport aspects      from 'aspects';\r\nimport {splash}     from 'util/SplashScreen';\r\n\r\n// launch our app, exposing the Fassets object (facilitating cross-feature-communication)\r\nexport default launchApp({\r\n\r\n  features,\r\n  aspects,\r\n\r\n  registerRootAppElm(rootAppElm) {\r\n    ReactDOM.render(rootAppElm,\r\n                    document.getElementById('root'));\r\n  },\r\n\r\n  showStatus(msg='', err=null) {\r\n    splash(msg, err);\r\n  },\r\n});\r\n","import 'util/ErrorExtensionPolyfill';\r\nexport {default}  from 'app'; // redirect to app.js\r\n"],"sourceRoot":""}
{"version":3,"sources":["util/ErrorExtensionPolyfill.js","util/CenterItems.js","util/SmartViewReact.js","core/SmartView.js","core/SmartComp.js","features/konvaSandbox/KonvaSandboxScreen.js","features/konvaSandbox/route.js","features/konvaSandbox/feature.js","util/verify.js","features/common/auth/subFeatures/authService/User.js","features/common/auth/state.js","features/common/auth/featureName.js","features/common/auth/signInFormMeta.js","util/iForms/IFormMeta.js","features/common/auth/actions.js","util/notify.js","util/discloseError.js","util/noOp.js","util/encoder.js","util/deviceStorage.js","features/common/auth/credentialsStorage.js","features/common/auth/logic.js","features/common/baseUI/actions.js","features/common/baseUI/featureName.js","features/common/baseUI/uiThemeStorage.js","features/common/baseUI/responsiveModeStorage.js","features/common/baseUI/state.js","util/responsiveBreakpoints.js","util/Transition.js","features/common/auth/comp/SignInVerifyScreen.js","util/iForms/comp/ITextField.js","features/common/auth/comp/SignInScreen.js","util/SplashScreen.js","features/common/auth/route.js","features/common/baseUI/comp/UserMenu.js","features/common/baseUI/comp/UserMenuItem.js","features/common/auth/comp/AuthUserMenu.js","features/common/auth/feature.js","features/common/auth/subFeatures/authService/AuthServiceAPI.js","features/common/auth/subFeatures/authService/feature.js","featureFlags.js","features/common/auth/subFeatures/authServiceFirebase/AuthServiceFirebase.js","features/common/auth/subFeatures/authServiceFirebase/feature.js","features/common/auth/subFeatures/authServiceMock/AuthServiceMock.js","features/common/auth/subFeatures/authServiceMock/feature.js","features/common/initFirebase/initializeFirebase.js","features/common/initFirebase/feature.js","features/common/baseUI/logic.js","features/common/baseUI/comp/LeftNav.js","features/common/baseUI/comp/AppMotif.js","features/common/baseUI/comp/MainLayout.js","features/common/baseUI/comp/ToggleUITheme.js","features/common/baseUI/comp/MaintainResponsiveMode.js","features/common/baseUI/comp/About.js","features/common/baseUI/feature.js","features/common/diagnostic/logActions/logic.js","features/common/diagnostic/logActions/featureName.js","features/common/diagnostic/logActions/feature.js","features/common/pwa/serviceWorker.js","features/common/pwa/feature.js","features/index.js","aspects/index.js","app.js","index.js"],"names":["Error","prototype","defineUserMsg","userMsg","this","expected","isExpected","isUnexpected","defineAttemptingToMsg","attemptingToMsg","formatUserMsg","prior_toString","toString","call","CenterItems","children","Grid","container","direction","justify","alignItems","SmartViewReact","view","otherProps","stageElm","useRef","useEffect","manifest","current","ref","style","backgroundColor","borderWidth","borderStyle","borderColor","SmartView","name","comps","x","y","elm","console","log","stage","Konva","Stage","width","height","layer","Layer","draggable","forEach","comp","add","SmartComp","id","constructor","KonvaSandboxScreen","classes","useStyles","Paper","className","root","src","alt","entry","Typography","variant","color","noWrap","myView1","Valve1","shape","Rect","fill","stroke","strokeWidth","Valve2","shadowBlur","cornerRadius","Valve3","makeStyles","theme","padding","spacing","marginTop","featureRoute","content","fassets","appState","createFeature","route","verify","condition","msg","prefix","msgPrefix","User","email","emailVerified","pool","guestLoc","originalLoc","unknownArgs","check","unknownArgKeys","Object","keys","length","arguments","toStruct","reducer","slicedReducer","expandWithFassets","combineReducers","user","reducerHash","_authAct","signIn","complete","state","action","checkEmailVerified","userProfileChanged","signOut","signInForm","signInFormMeta","registrar","formReducer","gfs","getSlicedState","curUser","createSelector","curUserStruct","IFormMeta","formDesc","formSchema","formActionsAccessor","formStateSelector","mapDomain2Form","mapForm2Domain","isString","validate","isFunction","fieldNames","fields","labels","reduce","fieldName","describe","label","FORM","domain","values","castValues","validationOptions","abortEarly","asyncValidate","then","catch","yupErrs","msgs","inner","yupErr","path","message","formActionGenesis","appInjectedFormActions","myFormActions","open","actionMeta","traits","ratify","formMsg","fieldChanged","fieldTouched","process","reject","close","formLogic","formActions","createLogic","type","String","allow","getState","formState","api","inProcess","value","cast","normalizedFieldNames","sort","normalizedValueProps","isEqual","validating","newState","IForm","dispatch","isValidationExposed","getLabel","getValue","isValid","getMsg","getExposedMsg","handleFieldChanged","handleFieldTouched","handleProcess","event","preventDefault","handleClose","Yup","required","pass","min","max","_authSel","generateActions","autoSignIn","haveDeviceCredentials","noDeviceCredentials","resendEmailVerification","Notify","props","maxSnack","dense","variantSuccess","NotifyAPI_withSnackBar","whiteSpace","variantInfo","variantWarning","variantError","_singleton","NotifyAPI","args","duration","level","position","modal","actions","levelVariant","anchorOrigin","Array","isArray","indx","txt","autoHideDuration","actionsCbMap","map","identityFn","actionButtons","Button","key","size","snackbarKey","enqueueSnackbar","onClick","e","closeSnackbar","clientAction","target","textContent","setTimeout","Fragment","React","Component","success","info","warn","error","vertical","horizontal","p","withSnackbar","notify","directive","display","toastBase","funcQual","toast","alertBase","alert","confirmBase","confirm","displayName","DYNAMIC_DEFAULT","discloseError","err","showUser","logIt","noOp","encode","safeguard","isPlainObject","encoding","demarkObjEncoding","JSON","stringify","demarkSafeguard","str","window","btoa","obfuscate","decode","result","indexOf","atob","deobfuscate","substring","parse","storeItem","deviceStorage","setItem","fetchItem","getItem","removeItem","_localStorageAvailable","storage","DOMException","code","storageAvailable","keyName","keyValue","localStorage","credentialsKey","checkDeviceCredentials","done","credentials","manualSignIn","processSignIn","warnTimeout","authService","supplementSignInComplete","signInCleanup","transform","next","refreshUser","supplementSignOutUser","toggleUITheme","setResponsiveMode","changeView","uiThemeKey","responsiveModeKey","uiTheme","_baseUIAct","responsiveMode","curView","viewName","getUITheme","getResponsiveMode","useForCellPhone","useTheme","useMediaQuery","breakpoints","down","TransitionZoom","forwardRef","Fade","timeout","Slide","Zoom","SignInVerifyScreen","useSelector","useDispatch","useCallback","isCellPhone","Dialog","fullScreen","TransitionComponent","DialogTitle","disableTypography","titleBar","title","DialogContent","Avatar","lockAvatar","DialogContentText","icon","palette","common","white","primary","main","flexGrow","margin","marginRight","inProgress","ITextField","iForm","extraProps","fieldLabel","prop","managedProps","fieldMsg","helperText","TextField","disabled","onChange","onBlur","SignInScreen","formLabel","formInProcess","formErrMsg","onSubmit","invisible","autoFocus","fullWidth","placeholder","FormHelperText","border","SplashScreen","SplashScreenCommon","SplashScreenProgrammatic","defaultProps","progress","useState","splashState","setSplashState","_setSplashState","splash","_errLastReported","errCntl","priority","PRIORITY","HIGH","isUserSignedIn","isUserSignedInUnverified","getAuthStatus","UserMenu","anchorUserMenu","setAnchorUserMenu","userMenuOpen","useMemo","Boolean","openUserMenu","currentTarget","_closeUserMenu","userMenuItems","useFassets","orderedUserMenuItems","item1Key","item2Key","localeCompare","IconButton","Menu","anchorEl","transformOrigin","onClose","closeUserMenu","fassetsKey","UserMenuItem","MenuItem","doL8tr","define","defineUse","logic","appDidStart","AuthServiceAPI","use","fassetsValue","useWIFI","sandbox","AuthServiceFirebase","currentAppUser","lat","lng","firebase","auth","signInWithEmailAndPassword","userCredential","fbUser","dbRef","database","uid","once","snapshot","userProfile","val","currentUser","reload","sendEmailVerification","enabled","featureFlags","AuthServiceMock","clone","a","showStatus","fetch","resp","ok","status","text","includes","firebaseAppConfig","initializeApp","appInit","LeftNav","leftNavItems","orderedLeftNavItems","Drawer","leftNav","paper","leftNavPaper","Toolbar","comment","List","MenuPallet","Divider","CustomizedTreeView","SimpleTreeView","LeftNavItem","flexShrink","usePalletStyles","setOpen","ListItem","button","ListItemIcon","ListItemText","Collapse","in","pallet","MinusSquare","SvgIcon","fontSize","d","PlusSquare","CloseSquare","useSpring","from","opacity","to","div","StyledTreeItem","withStyles","iconContainer","group","marginLeft","paddingLeft","borderLeft","fade","TreeItem","useTreeStyles","maxWidth","TreeView","defaultExpanded","defaultCollapseIcon","defaultExpandIcon","defaultEndIcon","nodeId","useSimpleTreeStyles","AppMotif","sel","viewAuxiliaryContent","get","curViewAuxiliaryContent","matchKey","find","fallbackViewAuxiliaryContent","resolveCurViewAuxiliaryContent","TitleComp","FooterComp","app","AppBar","appBar","toolbar","disableGutters","menuButton","bottomBar","zIndex","drawer","top","bottom","overflow","MainLayout","themeInUse","darkTheme","lightTheme","CssBaseline","createMuiTheme","typography","useNextVariants","secondary","ToggleUITheme","ChipIcon","MoonIcon","SunIcon","Chip","MaintainResponsiveMode","CheckedIcon","maintainResponsiveMode","defineActions","curResponsiveMode","breakpoint","About","showAbout","push","fassetValidations","any","appWillStart","curRootAppElm","lastState","curState","groupEnd","location","hostname","match","konvaSandbox","baseUI","authServiceFirebase","authServiceMock","initFirebase","navigator","serviceWorker","ready","registration","unregister","logActions","reducerAspect","createReducerAspect","logicAspect","createLogicAspect","routeAspect","createRouteAspect","config","fallbackElm$","launchApp","features","aspects","registerRootAppElm","rootAppElm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e4e782b3.chunk.js","sourcesContent":["/**\r\n * Standardize the ability to handle ALL errors more generically, by\r\n * adding these value-added extensions to ALL Error objects (via this\r\n * Error class polyfill - a monkey patch).\r\n * \r\n * All Error instances (created anywhere) are extended to include the\r\n * following characteristics:\r\n * \r\n * - A new error.userMsg property is defined.\r\n * \r\n *   This message is intended to be seen by users, so it should be\r\n *   suitable for human consumption:\r\n *     - both in meaning, \r\n *     - and in sanitation (so as to not reveal any internal\r\n *       architecture)\r\n * \r\n *   By default, error.userMsg = 'Unexpected Condition'\r\n *   and can be changed by: \r\n *     + error.defineUserMsg(userMsg): error\r\n * \r\n * - There is a delineation of expected vs. unexpected conditions.  For\r\n *   example:\r\n * \r\n *     - An error communicating \"invalid password\" is an expected\r\n *       condition, because it is stimulated by user input.\r\n * \r\n *     - Contrast that with an error communicating \"DB is down\", which is\r\n *       an unexpected condition, because this is outside the user's\r\n *       control.\r\n * \r\n *   This distinction is controlled by whether an error.userMsg has\r\n *   been defined (expected) or not (unexpected).\r\n * \r\n *   In other words, all errors start out as unexpected, and can be\r\n *   changed to expected by simply invoking:\r\n *     + error.defineUserMsg(userMsg): error\r\n * \r\n *   This distinction may be programmatically delineated through one of\r\n *   the following methods:\r\n *     + error.isExpected(): boolean\r\n *     + error.isUnexpected(): boolean\r\n * \r\n * - A new error.attemptingToMsg property is defined.\r\n * \r\n *   This message is also intended to be seen by users, and provides\r\n *   additional detail of what was being attempted (over and above the\r\n *   error.userMsg).\r\n * \r\n *   By default, error.attemptingToMsg = ''\r\n *   and can be changed by: \r\n *     + error.defineAttemptingToMsg(attemptingToMsg): error\r\n * \r\n * - A new error.formatUserMsg() is provided that combines all\r\n *   user-specific messages (userMsg and attemptingToMsg).\r\n * \r\n *     + error.formatUserMsg(): string\r\n * \r\n * - The toString() method has been extended to suffix the base\r\n *   toString() with user-specific messages.\r\n * \r\n * - All of the new \"defining\" methods return the receiving error,\r\n *   so as to allow them to be conveniently chained.  For example:\r\n * \r\n *     throw new Error('catastrophic details here').defineAttemptingToMsg('sign in');\r\n * \r\n * **Usage Scenarios** are as follows:\r\n * \r\n * - Error Origination\r\n * \r\n *   In throwing a new Error, you can:\r\n *     throw new Error('internal technical error details')\r\n *                 .defineUserMsg('You did not bla')           // ONLY INVOKE if this is an expected condition - otherwise default to: 'Unexpected Condition'\r\n *                 .defineAttemptingToMsg('log into the app'); // optionally provide additional clarification in either case (expected/unexpected)\r\n * \r\n * - Error Pass Through\r\n * \r\n *   Within a mid-level service, you may capture an error from a lower\r\n *   point and supplement it as follows:\r\n * \r\n *     catch(err) {\r\n *       throw err.defineUserMsg('You did not bla')           // ONLY INVOKE if this is an expected condition - otherwise default to: 'Unexpected Condition'\r\n *                .defineAttemptingToMsg('log into the app'); // optionally provide additional clarification in either case (expected/unexpected)\r\n *     }\r\n * \r\n * - Error Consumption (by client)\r\n * \r\n *   Using these enhancements, the client can abstractly apply various\r\n *   heuristics, such as:\r\n *\r\n *     - if logging is necessary\r\n *       * if so, reveal complete context (internal details and user context)\r\n *     - if user notification necessary\r\n *       * if so supply info suitable for human consumption\r\n * \r\n *   For more usage scenarios, please refer to the discloseError.js utility.\r\n */\r\n\r\n/* eslint-disable no-extend-native */  // we are very careful NOT to break native behavior of the Error object\r\n\r\nif (!Error.prototype.defineUserMsg) { // key off of one of several extension points\r\n\r\n  /**\r\n   * Define a user-specific message, that is applicable for human\r\n   * consumption:\r\n   *  - both in meaning, \r\n   *  - and in sanitization (so as to not reveal any internal architecture).\r\n   *\r\n   * This method also delineates the error as an expected condition.\r\n   *\r\n   * @param {String} userMsg the user message to define\r\n   *\r\n   * @return {Error} self, supporting convenient Error method chaining.\r\n   */\r\n  Error.prototype.defineUserMsg = function(userMsg) {\r\n    this.userMsg  = userMsg;\r\n    this.expected = true;\r\n    return this;\r\n  };\r\n  Error.prototype.userMsg = \"Unexpected Condition\"; // prototype provides the default\r\n\r\n\r\n  /**\r\n   * Return an indicator as to whether this error was\r\n   * expected (say user input error),\r\n   * or not (say a catastrophic error).\r\n   *\r\n   * @return {boolean} error expected (true) or not (false).\r\n   */\r\n  Error.prototype.isExpected = function() {\r\n    return this.expected;\r\n  };\r\n  Error.prototype.expected = false; // prototype provides the default\r\n\r\n\r\n  /**\r\n   * Return an indicator as to whether this error was\r\n   * unexpected (say a catastrophic error),\r\n   * or not (say user input error).\r\n   *\r\n   * @return {boolean} error unexpected (true) or not (false).\r\n   */\r\n  Error.prototype.isUnexpected = function() {\r\n    return !this.expected;\r\n  };\r\n\r\n\r\n  /**\r\n   * Define a user-specific 'attempting to' message, that provides\r\n   * additional details of what was being attempted.\r\n   *\r\n   * Errors with this context are prefixed with ' ... attempting to: ',\r\n   * so word your phrasing appropriately.\r\n   * \r\n   * Multiple attempting-to phrases can be used, which will be\r\n   * combined with the ', -and- ' phrase.\r\n   *\r\n   * @param {String} attemptingToMsg the user-specific attempting\r\n   * to' message.\r\n   *\r\n   * @return {Error} self, supporting convenient Error method chaining.\r\n   */\r\n  Error.prototype.defineAttemptingToMsg = function(attemptingToMsg) {\r\n    if (this.attemptingToMsg) // append multiples\r\n      this.attemptingToMsg += `, -and- ${attemptingToMsg}`;\r\n    else                      // initial definition\r\n      this.attemptingToMsg += ` ... attempting to: ${attemptingToMsg}`;\r\n    return this;\r\n  };\r\n  Error.prototype.attemptingToMsg = ''; // prototype provides the default\r\n\r\n\r\n  /**\r\n   * Format a user-specific message, combining all user-specific contexts.\r\n   *\r\n   * @return {string} formatted user message.\r\n   */\r\n  Error.prototype.formatUserMsg = function() {\r\n    return this.userMsg + this.attemptingToMsg;\r\n  };\r\n\r\n\r\n  /**\r\n   * Extend the Error toString() to prefix user-specific context.\r\n   */\r\n  const prior_toString = Error.prototype.toString; // monkey patch\r\n  Error.prototype.toString = function() {\r\n    return prior_toString.call(this) + '\\n\\nUser Msg: ' + this.formatUserMsg();\r\n  };\r\n\r\n\r\n  // L8TR:\r\n  // /**\r\n  //  * Define an indicator as to the cause of this error ... used to apply\r\n  //  * various heuristics, such as whether logging is necessary.\r\n  //  *\r\n  //  * The following indicators are available:\r\n  //  *   Error.Cause {\r\n  //  *     UNEXPECTED_CONDITION        [default]\r\n  //  *     RECOGNIZED_USER_ERROR\r\n  //  *   }\r\n  //  *\r\n  //  * @param {String} cause one of Error.Cause.\r\n  //  *\r\n  //  * @return {Error} self, supporting convenient Error method chaining.\r\n  //  */\r\n  // Error.prototype.defineCause = function(cause) {\r\n  //   this.cause = cause;\r\n  //   return this;\r\n  // };\r\n  // \r\n  // Error.Cause = {\r\n  //   UNEXPECTED_CONDITION:    'UNEXPECTED_CONDITION',\r\n  //   RECOGNIZED_USER_ERROR: 'RECOGNIZED_USER_ERROR'\r\n  // };\r\n  // \r\n  // Error.prototype.cause = Error.Cause.UNEXPECTED_CONDITION; // prototype provides the default\r\n\r\n}\r\n","import React from 'react';\r\nimport Grid  from '@material-ui/core/Grid';\r\n\r\n/**\r\n * A component that centers all contained children within a Grid (both horizontally and vertically).\r\n */\r\nexport default function CenterItems({children}) {\r\n  return (\r\n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n      {children}\r\n    </Grid>\r\n  );\r\n}\r\n\r\n/**\r\n * A component that horizontally centers all contained children within a Grid.\r\n * AI: Currently not used (added in an attempt to fix icon alignment with text, but found better solution)\r\n */\r\nexport function CenterItemsHorizontally({children}) {\r\n  return (\r\n    <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\">\r\n      {children}\r\n    </Grid>\r\n  );\r\n}\r\n","import React               from 'react';\r\nimport {useRef, useEffect} from 'react';\r\n\r\n// SmartViewReact: a re-usable React Component that manifests (i.e. renders) a SmartView.\r\n//                 NOTE: This is part of util because it is a react utility \r\n//                       used by the interactive tool ... NOT a core offering!\r\nexport default function SmartViewReact({view, ...otherProps}) {\r\n\r\n  const stageElm = useRef(null);\r\n\r\n  useEffect( () => { // runs after the render is committed to the screen - BY DEFAULT after EVERY render ? may need to conditionalize this HOWEVER don't see it invoked more than once\r\n    view.manifest(stageElm.current);    \r\n  });\r\n\r\n  // ?? crude test\r\n  return <div ref={stageElm} {...otherProps} style={{backgroundColor: 'gray', borderWidth: 5, borderStyle: 'solid', borderColor: 'purple'}}/>;\r\n}\r\n","import Konva  from 'konva';\r\n\r\n// SmartView: a concrete class that manages named visualize-it views of our system\r\nexport default class SmartView {\r\n\r\n  constructor(name, comps) {\r\n    this.name  = name;\r\n    this.comps = comps; // in essence, this is our display list!\r\n    this.x = 0; // ?? crude for now\r\n    this.y = 0; \r\n  }\r\n\r\n  //? persistenceMethods() { // simply persists this view with it's internal state (view-size etc), and EACH comp (data node names ONLY)\r\n  //? }\r\n\r\n  // manifest self's view self supplied html elm\r\n  manifest(elm) {\r\n\r\n    console.log('invoking: SmartView.manifest()');\r\n\r\n    // KJB: currently assume Stage (container) ... per view\r\n    const stage = new Konva.Stage({\r\n      container: elm,\r\n      x:         this.x, // ?? crude for now\r\n      y:         this.y,\r\n      width:     300, // ? parameterize\r\n      height:    250,\r\n    });\r\n\r\n    // KJB: currently assume ONE Layer (canvas) ... per view\r\n    //      TODO: I think multiple Konva.Layers will allow us to manage multiple views/scenes (canvas) in ONE container\r\n    const layer = new Konva.Layer({\r\n      draggable: true, // ?? crude test - yes you can drag the entire layer HOWEVER must drag one of it's object UNSURE if this restricts individual objects from dragging?\r\n    });\r\n\r\n    // manifest self's components\r\n    this.comps.forEach( (comp) => comp.manifest(layer) );\r\n    \r\n    // wire up layer/ stage ... must be added after layer is populated ... ? WHY?\r\n    stage.add(layer);\r\n  }\r\n\r\n}\r\n","// SmartComp: an abstract base class of all visualize-it components\r\n//         KEY: the fundamental aspect of a component is it binds to a data model (for visual affects and animation)\r\nexport default class SmartComp {\r\n  constructor(id) {\r\n    this.id = id;\r\n  }\r\n\r\n  manifest(container) { // container: Layer/Group\r\n    throw new Error(`***ERROR*** SmartComp pseudo-interface-violation: ${this.constructor.name}.manifest() is a required method that MUST BE implemented!`);\r\n  }\r\n\r\n}\r\n","import React           from 'react';\r\n\r\nimport {makeStyles}    from '@material-ui/core/styles';\r\nimport Typography      from '@material-ui/core/Typography';\r\nimport Paper           from '@material-ui/core/Paper';\r\nimport CenterItems     from 'util/CenterItems';\r\n\r\nimport Konva           from 'konva';\r\n\r\nimport SmartViewReact  from 'util/SmartViewReact';\r\nimport SmartView       from 'core/SmartView';\r\nimport SmartComp       from 'core/SmartComp';\r\n\r\n/**\r\n * KonvaSandboxScreen: a very simple/crude konva.js sandbox\r\n */\r\nexport default function KonvaSandboxScreen() {\r\n\r\n  const classes = useStyles();\r\n\r\n  // NOTE: relative path (in imgs below) support server deployment in sub-directory\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <CenterItems>\r\n        <img src=\"visualize-it-logo.png\" width=\"300\" alt=\"Logo\" className={classes.entry} />\r\n      </CenterItems>\r\n      <CenterItems>\r\n        <Typography variant=\"h6\" color=\"inherit\" noWrap className={classes.entry} >\r\n          Your View into External Systems!\r\n        </Typography>\r\n      </CenterItems>\r\n      <CenterItems>\r\n        <img src=\"visualize-it-logo-eyes.jpg\" alt=\"Logo Eyes\" className={classes.entry}/>\r\n      </CenterItems>\r\n      <CenterItems>\r\n        <SmartViewReact view={myView1} className={classes.entry} />\r\n      </CenterItems>\r\n    </Paper>\r\n  );\r\n\r\n}\r\n\r\n// TODO: move into compLib/plumbing ... define index.js semantics\r\nclass Valve1 extends SmartComp {\r\n\r\n  // useless-constructor ... because no logic besides super() with identical signature\r\n  // constructor(id) {\r\n  //   super(id);\r\n  // }\r\n\r\n  manifest(container) {\r\n    const shape = new Konva.Rect({\r\n      x: 20, // TODO: parameterize with defaults (needed for persistence)\r\n      y: 20,\r\n      width: 100,\r\n      height: 50,\r\n      fill: 'green',\r\n      stroke: 'black',\r\n      strokeWidth: 4\r\n    });\r\n    container.add(shape);\r\n  }\r\n}\r\n\r\n// TODO: move into compLib/plumbing ... define index.js semantics\r\nclass Valve2 extends SmartComp {\r\n\r\n  // useless-constructor ... because no logic besides super() with identical signature\r\n  // constructor(id) {\r\n  //   super(id);\r\n  // }\r\n\r\n  manifest(container) {\r\n    const shape = new Konva.Rect({\r\n      x: 150, // TODO: parameterize with defaults (needed for persistence)\r\n      y: 40,\r\n      width: 100,\r\n      height: 50,\r\n      fill: 'red',\r\n      shadowBlur: 10,\r\n      cornerRadius: 10\r\n    });\r\n    container.add(shape);\r\n  }\r\n}\r\n\r\n// TODO: move into compLib/plumbing ... define index.js semantics\r\nclass Valve3 extends SmartComp {\r\n\r\n  // useless-constructor ... because no logic besides super() with identical signature\r\n  // constructor(id) {\r\n  //   super(id);\r\n  // }\r\n\r\n  manifest(container) {\r\n    const shape = new Konva.Rect({\r\n      x: 50,  // TODO: parameterize with defaults (needed for persistence)\r\n      y: 120,\r\n      width: 100,\r\n      height: 100,\r\n      fill: 'blue',\r\n      cornerRadius: [0, 10, 20, 30]\r\n    });\r\n    container.add(shape);\r\n  }\r\n}\r\n\r\n\r\n//******************************************************************************\r\n// KJB: Here is my instantiated SmartView object\r\n//      NOTE 1: it is VERY light-weight UNTIL it is manifest!!\r\n//      NOTE 2: KEY: This structure is \r\n//                   A. managed through our interactive editor,\r\n//                      A1. need to monitor/sync these \"edit\" changes\r\n//                      A2. because of \"interactive editor\", parameterization is minimal\r\n//                   B. persisted as part of our \"bundler\"\r\n//                   C. used at run-time through the \"bundled\" resources\r\n//                      C1. don't think we need to monitor/sync any \"animation\" changes\r\n//                          ... because this is NOT persisted\r\nconst myView1 = new SmartView('myView1', [\r\n  new Valve1('myValve1'),\r\n  new Valve2('myValve2'),\r\n  new Valve3('myValve3'),\r\n]);\r\nmyView1.x = 30; // ?? crude for now\r\nmyView1.y = 30;\r\n\r\n\r\n\r\n\r\n//******************************************************************************\r\nconst useStyles = makeStyles( theme => ({\r\n\r\n  root: {\r\n    padding: theme.spacing(3, 2),\r\n  },\r\n\r\n  entry: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n\r\n}) );\r\n","import React               from 'react';\r\nimport {featureRoute}      from 'feature-router';\r\nimport KonvaSandboxScreen  from './KonvaSandboxScreen';\r\n\r\n// ***\r\n// *** The routes for this feature.\r\n// ***\r\n\r\nexport default [\r\n\r\n  featureRoute({\r\n    content({fassets, appState}) {\r\n      // TODO: for now simply unconditionally display our Sandbox screen\r\n      return <KonvaSandboxScreen/>;\r\n    }\r\n  }),\r\n\r\n];\r\n","import {createFeature}    from 'feature-u';\r\nimport route              from './route';\r\n\r\n// feature: konvaSandbox\r\n//          sandbox to play with konva.js\r\nexport default createFeature({\r\n  name: 'konvaSandbox',\r\n  route,\r\n});\r\n","/**\r\n * A convenience assertion utility, typically used to validate\r\n * pre-conditions of a routine.\r\n *\r\n * **Advanced**: verify.prefix(msgPrefix) returns a higher-order\r\n *               verify() function where all messages are prefixed.\r\n *\r\n * @param {truthy} condition - a \"truthy\" condition which\r\n * must be satisfied.\r\n *\r\n * @param {string} msg - a message clarifying the condition being\r\n * checked.\r\n * \r\n * @throws {Error} an Error is thrown when the supplied condition is\r\n * NOT met.\r\n * \r\n * @private\r\n */\r\nexport default function verify(condition, msg) {\r\n  if (!condition) {\r\n    // TODO: don't think there is any benefit in logging this console.error \r\n    // console.error(`verify() constraint issue: ${msg}`); // supplement exception with error log (for react-native exposure)\r\n    throw new Error(msg);\r\n  }\r\n}\r\n\r\nverify.prefix = function(msgPrefix) {\r\n  return (condition, msg) => verify(condition, msgPrefix+msg);\r\n};\r\n","import verify from 'util/verify';\r\n\r\n/**\r\n * The User object representing the active user within an application,\r\n * holding their identity, authorization status, and profile.\r\n *\r\n * NOTE: Using the default constructor, a User object can always be\r\n *       made available, even when no user is signed in.\r\n *       In this case:\r\n *       - all properties will be null (or false), and\r\n *       - more importantly the getAuthStatus() and isXyz() methods will\r\n *         correctly represent the 'signedOut' status.\r\n */\r\nexport default class User {\r\n\r\n  /**\r\n   * Instantiate a User object with the supplied named parameters.\r\n   *\r\n   * See NOTE (above) in regard to the default constructor.\r\n   *\r\n   * @param {string} name the user's name (e.g. 'John Doe')\r\n   *\r\n   * @param {string} email the user's email (used as an identifier for\r\n   * authorization credentials).  A null value indicates NO user is\r\n   * signed in.\r\n   *\r\n   * @param {boolean} emailVerified indicates whether the user's\r\n   * email been verified (used in authorization credentials).\r\n   *\r\n   * @param {string} pool OBSOLETE-PART-OF-Eatery the user's eatery pool identifier\r\n   * (e.g. 'DateNightPool').  This identifies the set of pool eateries\r\n   * the user has to choose from, and can be shared with other users.\r\n   *\r\n   * @param {loc} guestLoc OBSOLETE-PART-OF-Eatery the location ({lat, lng}) of a \"guest\"\r\n   * user.  When supplied, indicates this IS a \"guest\" user\r\n   * (i.e. isGuest(): true).\r\n   *\r\n   * @param {loc} originalLoc OBSOLETE-PART-OF-Eatery the real location ({lat, lng}) of the\r\n   * user.  This information is used to \"reset\" the characteristics of\r\n   * \"guest\" users, when they sign out.\r\n   * \r\n   * This information is \"supplemented\" through logic modules, and is\r\n   * provided as a constructor parameter SOLELY in support of the\r\n   * clone() operation.\r\n   */\r\n                                    // INTERNAL NOTES\r\n                                    // =================\r\n  constructor({name=null,           // via app's DB userProfile.name\r\n               email=null,          // via firebase.User.email\r\n               emailVerified=false, // via firebase.User.emailVerified\r\n               pool=null,           // via app's DB userProfile.pool\r\n             //uid=null,            // via firebase.User.uid             user's unique id hash ... CURRENTLY NO NEED for this (internally available via firebase.auth().currentUser.uid)\r\n               guestLoc=null,\r\n               originalLoc=null,\r\n               ...unknownArgs}={}) {\r\n\r\n    // validate constructor parameters\r\n    const check = verify.prefix('User() constructor parameter violation: ')\r\n    // ... unrecognized named parameter\r\n    const unknownArgKeys = Object.keys(unknownArgs);\r\n    check(unknownArgKeys.length === 0,  `unrecognized named parameter(s): ${unknownArgKeys}`);\r\n    // ... unrecognized positional parameter (NOTE: when defaulting entire struct, arguments.length is 0)\r\n    check(arguments.length === 0 || arguments.length === 1, 'unrecognized positional parameters (only named parameters can be specified)');\r\n\r\n    // retain supplied state in self\r\n    this.name          = name;\r\n    this.email         = email;\r\n    this.emailVerified = emailVerified;\r\n    this.pool          = pool;\r\n    this.guestLoc      = guestLoc;\r\n    this.originalLoc   = originalLoc;\r\n  }\r\n\r\n\r\n  /**\r\n   * Return an indicator as to whether the user is signed out\r\n   * (i.e. there is no user).\r\n   */\r\n  isUserSignedOut() {\r\n    return this.email === null;\r\n  }\r\n\r\n  /**\r\n   * Return an indicator as to whether the user is signed in -AND-\r\n   * their email has been verified.\r\n   */\r\n  isUserSignedIn() {\r\n    return this.email !== null && this.emailVerified;\r\n  }\r\n\r\n  /**\r\n   * Return an indicator as to whether the user is signed in -HOWEVER-\r\n   * their email needs verification.\r\n   */\r\n  isUserSignedInUnverified() {\r\n    return this.email !== null && !this.emailVerified;\r\n  }\r\n\r\n  /**\r\n   * Return self's authorization status string, representing all\r\n   * permutations of the isXyx() methods:\r\n   * \r\n   * - 'signedOut':          the user is signed out (i.e. there is no user)\r\n   * - 'signedIn':           the user is signed in -AND- their email has been verified.\r\n   * - 'signedInUnverified': the user is signed in -HOWEVER- their email needs verification.\r\n   */\r\n  getAuthStatus() {\r\n    if (this.email) {\r\n      return this.emailVerified ? 'signedIn' : 'signedInUnverified';\r\n    }\r\n    else {\r\n      return 'signedOut';\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Return an indicator as to whether the user is a \"guest\" user.\r\n   */\r\n  isGuest() {\r\n    return this.guestLoc ? true : false;\r\n  }\r\n\r\n\r\n  /**\r\n   * Serialize self into a pure data structure (void of any methods),\r\n   * so as to be serializable.\r\n   *\r\n   * This is useful in state managers (such as redux) where state must\r\n   * be serializable.\r\n   *\r\n   * The returned structure is suitable to be used to re-instantiate a\r\n   * User object, gaining the benefit of it's value-added methods.\r\n   * \r\n   * @returns {struct} a pure data structure of self, suitable to\r\n   * re-instantiate a User object.\r\n   */\r\n  toStruct() {\r\n    return {\r\n      name:          this.name,\r\n      email:         this.email,\r\n      emailVerified: this.emailVerified,\r\n      pool:          this.pool,\r\n      guestLoc:      this.guestLoc,\r\n      originalLoc:   this.originalLoc,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Clone self into a new User object\r\n   * \r\n   * @returns {User} the new cloned User object.\r\n   */\r\n  clone() {\r\n    return new User(this.toStruct());\r\n  }\r\n\r\n};\r\n","import {combineReducers}    from 'redux';\r\nimport {reducerHash}        from 'astx-redux-util';\r\nimport {expandWithFassets}  from 'feature-u';\r\nimport {slicedReducer}      from 'feature-redux';\r\nimport {createSelector}     from 'reselect';\r\nimport _auth                from './featureName';\r\nimport signInFormMeta       from './signInFormMeta';\r\nimport _authAct             from './actions';\r\nimport User                 from './subFeatures/authService/User';\r\n\r\n// ***\r\n// *** Our feature reducer, managing state for our authorization process.\r\n// ***\r\n\r\n// NOTE: expandWithFassets() is NOT only used for fassets injection,\r\n//       but ALSO to delay expansion (avoiding circular dependencies\r\n//       in selector access from signInFormMeta.js)\r\nconst reducer = slicedReducer(_auth, expandWithFassets( (fassets) => combineReducers({\r\n\r\n  // the current User object (serialized to state only) ... can represent empty User - NOT signed in\r\n  user: reducerHash({\r\n    [_authAct.signIn.complete]:           (state, action) => action.user.toStruct(),\r\n    [_authAct.signIn.checkEmailVerified]: (state, action) => action.user.toStruct(), // containing updated User.emailVerified\r\n    [_authAct.userProfileChanged]:        (state, action) => action.user.toStruct(), // pulling in new profile info\r\n    [_authAct.signOut]:                   (state, action) => new User().toStruct(),  // an empty User - NOT signed in\r\n  }, new User().toStruct()), // initialState (an empty User - NOT signed in)\r\n\r\n  // SignIn iForm's reducer ... null indicates form is inactive\r\n  signInForm: signInFormMeta.registrar.formReducer(),\r\n\r\n}) ) );\r\n\r\nexport default reducer;\r\n\r\n\r\n// ***\r\n// *** Various Selectors\r\n// ***\r\n\r\n      // Our feature state root (via slicedReducer as a single-source-of-truth)\r\nconst getFeatureState  = (appState) => reducer.getSlicedState(appState);\r\nconst gfs              = getFeatureState;             // ... concise alias (used internally)\r\n\r\n\r\n             // the current User object (with all it's value-added methods)\r\n             //   LIKE: user.getAuthStatus()\r\n             //         user.isUserSignedOut()\r\n             //         user.isUserSignedIn()\r\n             //         user.isUserSignedInUnverified()\r\n             //         user.name\r\n             //         user.email\r\n             //         user.pool\r\n             //   NOTE: will always return a User object (may represent a no-user object that: isSignedOut())\r\n       const curUserStruct = (appState) => gfs(appState).user;\r\nexport const curUser       = createSelector(curUserStruct,\r\n                                            (curUserStruct) => new User(curUserStruct));\r\n\r\n             // SignIn form  related\r\nexport const isSignInFormActive = (appState) => gfs(appState).signInForm ? true : false;\r\nexport const getUserSignInForm  = (appState) => gfs(appState).signInForm;\r\n","/**\r\n * Expose our featureName through a mini-meta module that is\r\n * \"importable\" in all use-cases (a single-source-of-truth).\r\n */\r\nexport default 'auth';\r\n","import * as Yup      from 'yup';\r\nimport IFormMeta     from 'util/iForms/IFormMeta';\r\nimport _authAct      from './actions';\r\nimport * as _authSel from './state';\r\n\r\n/* eslint-disable no-whitespace-before-property */  // special case here (for readability)\r\n\r\nexport default IFormMeta({\r\n  formDesc:  'Sign In',\r\n  formSchema: Yup.object().shape({\r\n    email:    Yup.string().required().email()        .label('Email'),\r\n    pass:     Yup.string().required().min(6).max(9)  .label('Password'), // TODO: add password regex check: https://dzone.com/articles/use-regex-test-password\r\n  }),\r\n  formActionsAccessor: ()         => _authAct.signIn,\r\n  formStateSelector:   (appState) => _authSel.getUserSignInForm(appState),\r\n});\r\n","import {reducerHash}  from 'astx-redux-util';\r\nimport {createLogic}  from 'redux-logic';\r\nimport isEqual        from 'lodash.isequal';\r\nimport isString       from 'lodash.isstring';\r\nimport isFunction     from 'lodash.isfunction';\r\nimport verify         from 'util/verify';\r\n\r\n/**\r\n * Define the characteristics of an Intelligent Form - a reusable forms\r\n * utility that is logic-based (using redux-logic).\r\n * \r\n * A form schema provides the details about the form fields (field names,\r\n * labels, validation, etc.).  This schema is driven by Yup (a\r\n * light-weight Joi), so it is declarative and dead simple!\r\n * \r\n * Complete aspects of the form is auto generated, including actions,\r\n * logic, and reducers.  These auto-generated items implement the hard\r\n * work related to dynamically determining when field validation should\r\n * be exposed to the user (based on user touches, and form submission).\r\n * \r\n * **Bottom line**: iForms promotes **painless re-usability!** As a\r\n * **bonus**, it is logic-based, so it is **extremely simple to inject\r\n * **app-specific logic** to manipulate various business-related\r\n * **items.\r\n *\r\n *\r\n * Form Input/Output Boundaries (via App Domains)\r\n * ==============================================\r\n *\r\n * When a form is initiated, the `open` action is optionally\r\n * supplied a domain object, to initialize the form (when not\r\n * supplied all form fields start out as empty strings).\r\n *\r\n * We use the term \"domain\" in a generic way, that can\r\n * manifest itself in a variety of different things.  It can\r\n * be a real application domain object (say from an API\r\n * call), or another part of your state tree, or any\r\n * number of other things.\r\n *\r\n * Likewise, when the form is processed (via the `process`\r\n * action), the form values will be mapped back to the domain\r\n * representation (retained in the `process` action).\r\n *\r\n * This makes it convenient for your logic to operate using\r\n * app-specific structures.\r\n *\r\n * You can easily define the mapping between your domain and the form\r\n * values structure, through the optional\r\n * mapDomain2Form/mapPropsToValues parameters.  By default (when not\r\n * supplied), the domain structure is assumed to be \"one in the same\"\r\n * as the form values structure (through a straight mapping of the\r\n * well known iForm fields).\r\n *\r\n * @param {string} namedArgs.formDesc a human-interpretable description for\r\n * this form (ex: 'Sign In').\r\n *\r\n * @param {ObjectSchema} namedArgs.formSchema the Yup Schema object defining\r\n * form fields, labels, and validation characteristics.\r\n *\r\n * @param {function} namedArgs.formActionsAccessor an accessor\r\n * function that promotes our specific formActions.  A function is\r\n * used to avoid cyclic dependencies in the startup bootstrap process\r\n * (because BOTH actions and IFormMeta instances are created in-line).\r\n * API: () => formActions\r\n *\r\n * @param {function} namedArgs.formStateSelector a selector function\r\n * that promotes our specific formState, given the top-level appState.\r\n * API: (appState) => formState\r\n *\r\n * @param {function} [namedArgs.mapDomain2Form] optionally define a\r\n * mapping between an app domain object and the form values (employed\r\n * through the `open` action).  When not specified, a straight mapping\r\n * of any iForm fields is used.\r\n * API: (domain) => values\r\n *\r\n * EX:\r\n * ```\r\n *   mapDomain2Form: (domain) => ({\r\n *     id:        domain.id,\r\n *     email:     domain.email,\r\n *     firstName: domain.name.first,\r\n *     lastName:  domain.name.last\r\n *   })\r\n * ```\r\n *\r\n * @param {function} [namedArgs.mapForm2Domain] optionally define a\r\n * mapping between form values and the app domain object (employed\r\n * through the `process` action).  When not specified, a straight\r\n * mapping of the iForm values is used (i.e. domain is same as\r\n * values).\r\n * API: (castValues) => domain // NOTE: castValues have been \"cast\" to the appropriate type\r\n *\r\n * EX:\r\n * ```\r\n *   mapForm2Domain: (castValues) => ({\r\n *     id:       castValues.id,\r\n *     email:    castValues.email,\r\n *     name:  {\r\n *       first:  castValues.firstName,\r\n *       last:   castValues.lastName\r\n *     }\r\n *   })\r\n * ```\r\n *\r\n * @return {Object} IFormMeta object exposing various aspects of an\r\n * Intelligent Form ...\r\n * ```\r\n *  {\r\n *    registrar: { // auto-generated items to be externally registered\r\n *      // iForm action creators to be injected into action-u generateActions()\r\n *      formActionGenesis([appInjectedFormActions]): ActionGenesis\r\n *      \r\n *      // iForm logic modules (providing intelligent validation) to be registered to redux-logic\r\n *      formLogic(): logic[]\r\n *      \r\n *      // iForm reducer to be registered in the redux state management process\r\n *      formReducer(): function\r\n *    }\r\n * \r\n *    // the selector that promotes self's specific formState, given the top-level appState\r\n *    formStateSelector(appState): formState\r\n *\r\n *    // create an IForm helper object, providing convenience accessors/handlers, avoiding direct formState interpretation\r\n *    IForm(formState, dispatch): IForm\r\n *  }\r\n * ```\r\n */\r\nexport default function IFormMeta({formDesc,\r\n                                   formSchema,\r\n                                   formActionsAccessor,\r\n                                   formStateSelector,\r\n                                   mapDomain2Form,\r\n                                   mapForm2Domain,\r\n                                   ...unknownArgs}={}) {\r\n\r\n  // ***\r\n  // *** validate parameters\r\n  // ***\r\n\r\n  const check = verify.prefix('IFormMeta() parameter violation: ');\r\n\r\n  check(formDesc,            'formDesc is required');\r\n  check(isString(formDesc),  'invalid formDesc (expecting a string)');\r\n\r\n  check(formSchema,          'formSchema is required');\r\n  check(formSchema.validate, 'invalid formSchema (expecting a Yup Schema)'); // duck type check\r\n\r\n  check(formActionsAccessor,             'formActionsAccessor is required');\r\n  check(isFunction(formActionsAccessor), 'invalid formActionsAccessor (expecting a function)');\r\n\r\n  check(formStateSelector,             'formStateSelector is required');\r\n  check(isFunction(formStateSelector), 'invalid formStateSelector (expecting a function)');\r\n\r\n  const unknownArgKeys = Object.keys(unknownArgs);\r\n  check(unknownArgKeys.length===0,  `unrecognized named parameter(s): ${unknownArgKeys}`);\r\n\r\n\r\n  // ***\r\n  // *** decompose meta info from the supplied Yup Schema (like fieldNames and labels)\r\n  // ***\r\n\r\n  // fieldNames: String[]\r\n  const fieldNames = Object.keys(formSchema.fields);\r\n\r\n  // labels: { ... fallback to fieldName when NO schema label supplied\r\n  //   fieldName1: string,\r\n  //   fieldName2: string\r\n  // }\r\n  const labels = fieldNames.reduce( (labels, fieldName) => {\r\n    labels[fieldName] = formSchema.fields[fieldName].describe().label || fieldName;\r\n    return labels;\r\n  }, {FORM: formDesc}); // initial value contains our formDesc\r\n\r\n\r\n\r\n  // ***\r\n  // *** default domain mapping functions with ones that have knowledge of our contextual fieldNames\r\n  // ***\r\n\r\n  if (!mapDomain2Form) {\r\n    mapDomain2Form = (domain) => {\r\n      return fieldNames.reduce( (values, fieldName) => {\r\n        values[fieldName] = domain[fieldName] || '';\r\n        values[fieldName] = values[fieldName].toString(); // insure string representation\r\n        return values;\r\n      }, {} );\r\n    };\r\n  }\r\n  check(isFunction(mapDomain2Form), 'invalid mapDomain2Form (expecting a function)');\r\n\r\n  if (!mapForm2Domain) {\r\n    mapForm2Domain = (castValues) => castValues;\r\n  }\r\n  check(isFunction(mapForm2Domain), 'invalid mapForm2Domain (expecting a function)');\r\n\r\n\r\n\r\n\r\n  // ***\r\n  // *** define the auto-generated iForm action creators to be injected into action-u generateActions()\r\n  // ***\r\n\r\n  /**\r\n   * Promote the auto-generated action creators required by self's\r\n   * iForm.\r\n   *\r\n   * @param {ActionGenesis} [appInjectedFormActions] optionally\r\n   * specify additional app-specific action creators to supplement the\r\n   * auto-generated formActions.  This is typically used to introduce\r\n   * fail/complete actions that are spawned out of app-specific logic\r\n   * modules.  NOTE: the formAction root can even become an action\r\n   * creator by promoting a top-level actionMeta node in this\r\n   * structure.\r\n   * \r\n   * @return {ActionGenesis} the auto-generated action creators\r\n   * required by self's iForm.  This is an action-u ActionGenesis\r\n   * sub-structure that is to be injected into the action-u\r\n   * generateActions() process.  The following standard iForm actions\r\n   * are defined:\r\n   * ```\r\n   *    ${formActionGenesis}: {\r\n   *      open([domain] [,formMsg])      ... activate the form state, initiating form processing\r\n   *      fieldChanged(fieldName, value) ... maintain controlled field state change (with validation)\r\n   *                                         NOTE: IForm logic supplements action with validation msgs\r\n   *      fieldTouched(fieldName)        ... maintain field touched status, impacting validation dynamic exposure\r\n   *                                         NOTE: IForm logic supplements action with validation msgs\r\n   *      process()                      ... process this form\r\n   *                                         NOTE 1: IForm logic will reject this action, when the form is invalid\r\n   *                                         NOTE 2: IForm logic supplements action with values (of appropriate\r\n   *                                                 data types) and domain (in app-specific structure)\r\n   *        reject(msgs)                 ... reject process action with supplied validation msgs\r\n   *      close()                        ... close this form\r\n   *\r\n   *      ...appSpecificActions()        ... app-specific action creators supplementing the auto-generated formActions\r\n   *    }\r\n   * ```\r\n   */\r\n  function formActionGenesis(appInjectedFormActions={}) {\r\n\r\n    // NOTE: As an optimization, we bypass detailed action creator validation\r\n    //       because it is a controlled invocation (by IForm components).\r\n    //       ... Even though fieldName is in the developer realm, the fieldName is validated by our IFormElm components\r\n    //       ... Here is an example ratify() for the fieldChanged() action creator:\r\n    //             ratify(fieldName, value) {\r\n    //               verify(isString(fieldName), `'${formDesc}' form fieldChanged() action creator ... fieldName param is NOT a string: ${fieldName}`);\r\n    //               verify(labels[fieldName],   `'${formDesc}' form fieldChanged() action creator ... fieldName: '${fieldName}' is NOT one of the expected fields: ${fieldNames}`);\r\n    //               verify(isString(value),     `'${formDesc}' form fieldChanged() action creator ... value param is NOT a string: ${value}`);\r\n    //               return [fieldName, value];\r\n    //             },\r\n\r\n    // define our base auto-generated action creators\r\n    const myFormActions = {\r\n\r\n      open: {         // open([domain] [,formMsg]): Action\r\n                      // > activate the form state, initiating form processing\r\n                      actionMeta: {\r\n                        traits: ['domain', 'formMsg'],\r\n                        ratify: (domain=null, formMsg=null) => [domain, formMsg],\r\n                      },\r\n      },\r\n\r\n      fieldChanged: { // fieldChanged(fieldName, value): Action\r\n                      // > maintain controlled field state change (with validation)\r\n                      //   NOTE: IForm logic supplements action with validation msgs\r\n                      actionMeta: {\r\n                        traits: ['fieldName', 'value'],\r\n                      },\r\n      },\r\n\r\n      fieldTouched: { // fieldTouched(fieldName): Action\r\n                      // > maintain field touched status, impacting validation dynamic exposure\r\n                      //   NOTE: IForm logic supplements action with validation msgs\r\n                      actionMeta: {\r\n                        traits: ['fieldName'],\r\n                      },\r\n      },\r\n\r\n      process: {      // process(): Action\r\n                      // > process this form\r\n                      //   NOTE 1: IForm logic will reject this action, when the form is invalid\r\n                      //   NOTE 2: IForm logic supplements action with values (of appropriate\r\n                      //           data types) and domain (in app-specific structure)\r\n                      actionMeta: {\r\n                      },\r\n\r\n        reject: {     // reject(msgs): Action\r\n                      // > reject process action with supplied validation msgs\r\n                      actionMeta: {\r\n                        traits: ['msgs'],\r\n                      },\r\n        },\r\n\r\n      },\r\n\r\n      close: {        // close(): Action\r\n                      // > close this form\r\n                      actionMeta: {\r\n                      },\r\n      },\r\n\r\n    };\r\n\r\n    // inject any app-specific actions creators\r\n    const check = verify.prefix('IFormMeta.formActionGenesis(): invalid appInjectedFormActions parameter ... ');\r\n    for (const action in appInjectedFormActions) {\r\n      check(!myFormActions[action], `${action} action is reserved as one of the auto-generated iForm actions.`);\r\n      myFormActions[action] = appInjectedFormActions[action];\r\n    }\r\n\r\n    // beam me up Scotty!\r\n    return myFormActions;\r\n  }\r\n\r\n\r\n  const validationOptions = {\r\n    abortEarly: false, // return ALL errors\r\n  };\r\n\r\n  /**\r\n   * Validate the supplied values against our schema.\r\n   *\r\n   * @param {Object} values the set of values to validate (keyed by\r\n   * fieldName).\r\n   * \r\n   * @return {promise} the async promise that resolves to msgs object\r\n   * (keyed by fieldName) containing validation messages for all\r\n   * fields.\r\n   */\r\n  function asyncValidate(values) {\r\n    return formSchema.validate(values, validationOptions)\r\n    .then( () => ({}) )  // empty msgs\r\n    .catch( yupErrs => { // transform all Yup errors into our msgs\r\n      const msgs = {};\r\n      yupErrs.inner.forEach(yupErr => {\r\n        msgs[yupErr.path] = yupErr.message;\r\n      });\r\n      return msgs;\r\n    });\r\n  }\r\n\r\n\r\n  // ***\r\n  // *** define the auto-generated iForm logic modules (providing intelligent validation) to be registered to redux-logic\r\n  // ***\r\n\r\n  /**\r\n   * Promote the redux-logic modules that orchestrates various iForm\r\n   * characteristics, such as validation.\r\n   *\r\n   * @return {logic[]} the redux-logic modules that perform low-level\r\n   * iForm business logic (such as validation).  This should be\r\n   * registered to the app's redux-logic process.\r\n   */\r\n  function formLogic() {\r\n\r\n    const formActions = formActionsAccessor();\r\n\r\n    // promote our iForm logic[]\r\n    return [\r\n\r\n      createLogic({\r\n        name: `validateFields for '${formDesc}' form`,\r\n        type: [String(formActions.fieldChanged),\r\n               String(formActions.fieldTouched)], // if fields have initial value (i.e. never changed) this will be the first time fields are validated\r\n\r\n        validate({getState, action, api}, allow, reject) {\r\n\r\n          // NOTE: action has: fieldName/value\r\n\r\n          // locate our formState (from our appState)\r\n          const formState = formStateSelector( getState() );\r\n\r\n          // no-op when form is inProcess\r\n          // ... this is a foolproof catch if the UI fails to prevent these actions from firing\r\n          if (formState.inProcess) {\r\n            reject();\r\n            return;\r\n          }\r\n\r\n          // perform field validation\r\n          // ... fieldChanged action has an updated value in action\r\n          const values = action.type === String(formActions.fieldChanged)\r\n                          ? {...formState.values, [action.fieldName]: action.value}\r\n                          : formState.values;\r\n          asyncValidate(values)\r\n          .then(msgs => {\r\n\r\n            // retain overall form msg if any\r\n            if (formState.msgs.FORM) {\r\n              msgs.FORM = formState.msgs.FORM;\r\n            }\r\n\r\n            // supplement our action with validation msgs\r\n            action.msgs = msgs;\r\n\r\n            // continue processing, supporting field updates, and visualizing any validation errors\r\n            allow(action);\r\n          });\r\n\r\n        },\r\n      }),\r\n\r\n\r\n      createLogic({\r\n        name: `process validation for '${formDesc}' form`,\r\n        type: String(formActions.process),\r\n\r\n        validate({getState, action, api}, allow, reject) {\r\n\r\n          // NOTE: action has: fieldName/value\r\n\r\n          // locate our formState (from our appState)\r\n          const formState = formStateSelector( getState() );\r\n\r\n          // no-op when form is inProcess\r\n          // ... this is a foolproof catch if the UI fails to prevent these actions from firing\r\n          if (formState.inProcess) {\r\n            reject();\r\n            return;\r\n          }\r\n\r\n          // perform validation\r\n          asyncValidate(formState.values)\r\n            .then( msgs => {\r\n\r\n              // reject validation problems (via new action)\r\n              if (Object.keys(msgs).length > 0) {\r\n\r\n                // inject form msg to further highlight validation issues\r\n                msgs.FORM = 'Please resolve the highlighted issues, and try again.';\r\n\r\n                // reject current process action by re-issuing a different process.reject action\r\n                allow( formActions.process.reject(msgs) );\r\n              }\r\n\r\n              // allow clean validation (supplementing action with values/domain)\r\n              else {\r\n\r\n                // supplement our action with values/domain\r\n                const castValues = formSchema.cast(formState.values);\r\n                const domain     = mapForm2Domain(castValues);\r\n                action.values = castValues;\r\n                action.domain = domain;\r\n\r\n                allow(action);\r\n              }\r\n            });\r\n\r\n        },\r\n      }),\r\n\r\n    ];\r\n  }\r\n\r\n\r\n\r\n  // ***\r\n  // *** define the auto-generated iForm reducer to be registered in the redux state management process\r\n  // ***\r\n\r\n  /**\r\n   * Promote the auto-generated reducer required by self's iForm, that\r\n   * maintains our form's redux state.\r\n   * \r\n   * @return {function} the reducer that maintains our iForm redux\r\n   * state.  This reducer is to be registered in the redux state\r\n   * management process.  The following state shape is maintained:\r\n   * ```\r\n   *    ${formState}: { // ex: appState.auth.signInForm (null for inactive form)\r\n   *\r\n   *      labels: {       // field labels (UI promotion and validation msg content)\r\n   *        FORM:         string, // form desc\r\n   *        <fieldName1>: string,\r\n   *        <fieldName2>: string,\r\n   *      },\r\n   *\r\n   *      values: {       // field values\r\n   *        <fieldName1>: string,\r\n   *        <fieldName2>: string,\r\n   *      },\r\n   *\r\n   *      msgs: {          // validation msgs (if any) ... initial: {}\r\n   *        FORM:          string, // msg spanning entire form ... non-exist for valid\r\n   *        <fieldName1>:  string, // non-exist for valid\r\n   *        <fieldName2>:  string, // non-exist for valid\r\n   *      },\r\n   *\r\n   *      validating: {    // demarks which fields are being validated ... based on whether it has been touched by user (internal use only)\r\n   *        FORM:          boolean, // ALL fields validated (takes precedence)\r\n   *        <fieldName1>:  boolean,\r\n   *        <fieldName2>:  boolean,\r\n   *      },\r\n   *\r\n   *      inProcess: boolean, // is form being processed?\r\n   *    }\r\n   * ```\r\n   */\r\n  function formReducer() {\r\n\r\n    const formActions = formActionsAccessor();\r\n\r\n    // generate our reducer function\r\n    const myFormReducer = reducerHash({\r\n\r\n      [formActions.open]: (state, action) => {\r\n        // define our initial form values\r\n        // ... interpret optional action props\r\n        const values = action.domain\r\n                           // ... either from our supplied domain (if any)\r\n                           //     INTERPRETED by mapDomain2Form(), which can be\r\n                           //     either client supplied or our own default\r\n                         ? mapDomain2Form(action.domain)\r\n                           // ... or inject empty string for each field\r\n                           //     NOTE: we prefer to NOT handle this in mapDomain2Form,\r\n                           //           so as to NOT rely on client logic \"to do the right thing\"\r\n                         : fieldNames.reduce( (values, fieldName) => { \r\n                             values[fieldName] = '';\r\n                             return values;\r\n                           }, {});\r\n        // ... insure no miss-matched field introduced in mapDomain2Form()\r\n        //     - comparing our known fields: fieldNames: string[]\r\n        //     - to the generated object:    values:     {field1, field2, etc}\r\n        const normalizedFieldNames = fieldNames.sort();\r\n        const normalizedValueProps = Object.keys(values).sort();\r\n        verify(isEqual(normalizedFieldNames, normalizedValueProps),\r\n               `'${formDesc}' form open reducer ... miss-matched field(s) introduced in app-supplied mapDomain2Form ... generated fields: ${normalizedValueProps} ... expected fields: ${normalizedFieldNames}`);\r\n\r\n        const msgs = {};\r\n        if (action.formMsg) { // ... interpret optional action.formMsg\r\n          msgs.FORM = action.formMsg;\r\n        }\r\n\r\n        // expand a completely new formState\r\n        return {\r\n          labels,\r\n          values,\r\n          msgs,\r\n          validating: {},\r\n          inProcess: false,\r\n        };\r\n      },\r\n\r\n      [formActions.fieldChanged]: (state, action) => {\r\n\r\n        // carve out new container (supporting immutable state)\r\n        const newState = {...state};\r\n\r\n        // merge new field value\r\n        newState.values = {...state.values, [action.fieldName]: action.value};\r\n\r\n        // retain logic-injected validation msgs (within action)\r\n        newState.msgs = action.msgs;\r\n\r\n        // that's all folks\r\n        return newState;\r\n      },\r\n\r\n      [formActions.fieldTouched]: (state, action) => {\r\n        if (state.validating[action.fieldName]) {\r\n          return state; // validating indicator already set\r\n        }\r\n        else {          // set our field validating indicator to true\r\n          const newState      = {...state};\r\n          newState.validating = {...state.validating, [action.fieldName]: true};\r\n          newState.msgs       = action.msgs; // also retain validation logic-injected msgs\r\n          return newState;\r\n        }\r\n      },\r\n\r\n      [formActions.process]: (state, action) => {\r\n        const newState      = {...state};\r\n        newState.inProcess  = true; // mark form as being processed\r\n        newState.validating = {...state.validating, FORM: true}; // mark entire form as being validated\r\n        newState.msgs       = {}; // clear validation msgs (form is clean)\r\n        return newState;\r\n      },\r\n\r\n      [formActions.process.reject]: (state, action) => {\r\n        const newState      = {...state};\r\n        newState.validating = {...state.validating, FORM: true}; // mark entire form as being validated\r\n        newState.msgs       = action.msgs; // retain validation logic-injected msgs\r\n        return newState;\r\n      },\r\n\r\n      [formActions.close]: (state, action) => null,\r\n\r\n    }, null); // initialState\r\n\r\n    // promote our iForm reducer function\r\n    return myFormReducer;\r\n  }\r\n\r\n\r\n\r\n  // ***\r\n  // *** define our IForm helper object\r\n  // ***\r\n\r\n  /**\r\n   * Create an IForm helper object, providing convenience\r\n   * accessors/handlers, avoiding direct formState interpretation.\r\n   *\r\n   * @param {ReduxState} formState the redux form state supporting\r\n   * self's form.\r\n   *\r\n   * @param {function} dispatch the redux dispatch function, supporting\r\n   * self's handlers.\r\n   * \r\n   * @return {Object} the IForm helper object, with the following API:\r\n   * ```\r\n   * {\r\n   *   // the label of the supplied field (or form when not supplied)\r\n   *   getLabel(fieldName='FORM'): string\r\n   *\r\n   *   // the value of the supplied field (N/A for form)\r\n   *   getValue(fieldName): string\r\n   *\r\n   *   // is supplied field value valid (or form when not supplied\r\n   *   // ... i.e. all fields in form), irrespective to whether errors are\r\n   *   // exposed to the user or not\r\n   *   isValid(fieldName='FORM'): boolean\r\n   * \r\n   *   // the validation msg of supplied field (or form when not supplied)\r\n   *   // irrespective to whether errors are exposed to the user or not\r\n   *   // - undefined/null for valid\r\n   *   getMsg(fieldName='FORM'): string\r\n   * \r\n   *   // the exposed validation msg of supplied field (or form when not\r\n   *   // supplied) - undefined/null for valid.  The exposed msg is tailored \r\n   *   // to whether validation should be exposed to the user or not \r\n   *   // (BASED ON user touches).\r\n   *   getExposedMsg(fieldName='FORM'): string\r\n   *\r\n   *   // Should validation messages be exposed for supplied field (or\r\n   *   // form when not supplied), based on user touches.\r\n   *   // \r\n   *   // This is needed to expose UI success/error icon adornment\r\n   *   // (i.e. no adornment is shown if NOT yet being validated).\r\n   *   //\r\n   *   // NOTE: Form validation (when enabled) takes precedence over\r\n   *   //       individual fields.\r\n   *   isValidationExposed(fieldName='FORM'): boolean\r\n   *\r\n   *   // is form being processed?\r\n   *   inProcess(): boolean\r\n   *\r\n   *   // Service an IForm field value change.\r\n   *   handleFieldChanged(fieldName, value): void\r\n   *\r\n   *   // Service an IForm field touched.\r\n   *   handleFieldTouched(fieldName): void\r\n   *\r\n   *   // Service an IForm process request.\r\n   *   handleProcess(): void\r\n   *\r\n   *   // Service an IForm close request.\r\n   *   handleClose(): void\r\n   * }\r\n   * ```\r\n   */\r\n  function IForm(formState, dispatch) {\r\n\r\n    // validate parameters\r\n    const check = verify.prefix('IFormMeta.IForm() parameter violation: ');\r\n    check(formState,                            'formState is required');\r\n    check(formState.labels,                     'invalid formState - does NOT conform to the IForm state');\r\n    check(formState.labels.FORM===formDesc,     `miss-matched formState - expecting ${formDesc} but received ${formState.labels.FORM}`);\r\n\r\n    check(dispatch,                             'dispatch is required');\r\n    check(isFunction(dispatch),                 'invalid dispatch (expecting a function)');\r\n\r\n\r\n    // formActions required for handler methods (below)\r\n    const formActions = formActionsAccessor();\r\n\r\n\r\n    /**\r\n     * @return {string} the label of the supplied field (or form when\r\n     * not supplied).\r\n     */\r\n    function getLabel(fieldName='FORM') {\r\n      return formState.labels[fieldName];\r\n    }\r\n\r\n    /**\r\n     * @return {string} the value of the supplied field (N/A for form).\r\n     */\r\n    function getValue(fieldName) {\r\n      verify(fieldName || fieldName !== 'FORM', `IFormMeta.IForm.getValue() unsupported fieldName: ${fieldName}`);\r\n      return formState.values[fieldName];\r\n    }\r\n\r\n    /**\r\n     * Is supplied field value valid (or form when not supplied\r\n     * ... i.e. all fields in form), irrespective to whether errors are\r\n     * exposed to the user or not.\r\n     * @return {boolean} \r\n     */\r\n    function isValid(fieldName='FORM') {\r\n      return fieldName==='FORM'\r\n               ? Object.keys(formState.msgs).length === 0\r\n               : formState.msgs[fieldName] ? false : true; // eslint-disable-line no-unneeded-ternary\r\n    }\r\n\r\n    /**\r\n     * @return {string} the validation msg of supplied field (or form\r\n     * when not supplied) irrespective to whether errors are exposed\r\n     * to the user or not - undefined/null for valid\r\n     */\r\n    function getMsg(fieldName='FORM') {\r\n      return formState.msgs[fieldName];\r\n    }\r\n\r\n    /**\r\n     * @return {string} exposed validation msg of supplied field (or\r\n     * form when not supplied) - undefined/null for valid.  The\r\n     * exposed msg is tailored to whether validation should be exposed\r\n     * to the user or not (BASED ON user touches).\r\n     */\r\n    function getExposedMsg(fieldName='FORM') {\r\n      return isValidationExposed(fieldName) ? formState.msgs[fieldName] : null;\r\n    }\r\n\r\n    /**\r\n     * Should validation messages be exposed for supplied field (or\r\n     * form when not supplied), based on user touches.\r\n     * \r\n     * This is needed to expose UI success/error icon adornment\r\n     * (i.e. no adornment is shown if NOT yet being validated).\r\n     *\r\n     * NOTE: Form validation (when enabled) takes precedence over\r\n     *       individual fields.\r\n     *\r\n     * @return {boolean} \r\n     */\r\n    function isValidationExposed(fieldName='FORM') {\r\n      return formState.validating.FORM || formState.validating[fieldName];\r\n    }\r\n\r\n    /**\r\n     * Is form being processed?\r\n     *\r\n     * @return {boolean} \r\n     */\r\n    function inProcess() {\r\n      return formState.inProcess;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Service an IForm field value change.\r\n     */\r\n    function handleFieldChanged(fieldName, value) {\r\n      dispatch( formActions.fieldChanged(fieldName, value) );\r\n    }\r\n\r\n    /**\r\n     * Service an IForm field touch.\r\n     */\r\n    function handleFieldTouched(fieldName) {\r\n      dispatch( formActions.fieldTouched(fieldName) );\r\n    }\r\n\r\n    /**\r\n     * Service an IForm process request.\r\n     */\r\n    function handleProcess(event) {\r\n      dispatch( formActions.process() );\r\n\r\n      // for <form onSubmit> handlers, prevent anything from being submitted to the server\r\n      // ... old technique would be to \"return false\" from the handler, \r\n      //     but this is no longer supported in react\r\n      if (event) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Service an IForm close request.\r\n     */\r\n    function handleClose() {\r\n      dispatch( formActions.close() );\r\n    }\r\n\r\n    // promote our IForm helper object\r\n    return {\r\n      getLabel,\r\n      getValue,\r\n      isValid,\r\n      getMsg,\r\n      getExposedMsg,\r\n      isValidationExposed,\r\n      inProcess,\r\n      handleFieldChanged,\r\n      handleFieldTouched,\r\n      handleProcess,\r\n      handleClose,\r\n    };\r\n\r\n  }\r\n\r\n\r\n\r\n  // ***\r\n  // *** publicly expose needed IFormMeta characteristics\r\n  // ***\r\n\r\n  return {\r\n    registrar: {\r\n      formActionGenesis,\r\n      formLogic,\r\n      formReducer,\r\n    },\r\n    formStateSelector,\r\n    IForm,\r\n  };\r\n\r\n}\r\n","import {generateActions}    from 'action-u';\r\nimport _auth                from './featureName';\r\nimport signInFormMeta       from './signInFormMeta';\r\n\r\nexport default generateActions.root({\r\n  [_auth]: { // prefix all actions with our feature name, guaranteeing they unique app-wide!\r\n\r\n    autoSignIn: {  // actions.autoSignIn(): Action\r\n                   // > autoSignIn our authorization process\r\n                   actionMeta: {},\r\n\r\n      haveDeviceCredentials: {  // actions.autoSignIn.haveDeviceCredentials(credentials): Action\r\n                                // > credentials were stored on our device\r\n                                actionMeta: {\r\n                                  traits: ['credentials'],\r\n                                },\r\n      },\r\n\r\n      noDeviceCredentials: {  // actions.autoSignIn.noDeviceCredentials(): Action\r\n                              // > NO credentials were stored on our device\r\n                              actionMeta: {},\r\n      },\r\n    },\r\n\r\n    // inject the standard iForm auto-generated form actions\r\n    // ... open(), fieldChanged(), fieldTouched(), process(), process.reject(), close()\r\n    signIn: signInFormMeta.registrar.formActionGenesis({\r\n    \r\n      // along with additional app-specific actions:\r\n    \r\n                  // actions.signIn(email, pass): Action\r\n                  // > SignIn with supplied email/pass\r\n                  actionMeta: {\r\n                    traits: ['email', 'pass'],\r\n                  },\r\n    \r\n      complete: { // actions.signIn.complete(user): Action\r\n                  // > signIn completed successfully\r\n                  actionMeta: {\r\n                    traits: ['user'],\r\n                  },\r\n      },\r\n    \r\n      checkEmailVerified: { // actions.signIn.checkEmailVerified(): Action\r\n                            // > check to see if account email has been verified\r\n                            actionMeta: {}, // NOTE: logic supplements the action with the current user\r\n      },\r\n    \r\n      resendEmailVerification: { // actions.signIn.resendEmailVerification(): Action\r\n                                 // > resend email verification\r\n                                 //   NOTE: logic supplements action with most up-to-date user\r\n                                 actionMeta: {},\r\n      },\r\n    \r\n    }),\r\n\r\n    signOut: { // actions.signOut(): Action <<< NOTE: logic supplements action.user (with current user that is signing out)\r\n               // > sign out active user\r\n               actionMeta: {},\r\n    },\r\n\r\n    userProfileChanged: { // actions.userProfileChanged(user): Action\r\n                          // > user profile changed\r\n                          actionMeta: {\r\n                            traits: ['user'],\r\n                          },\r\n    },\r\n\r\n  },\r\n\r\n});\r\n","import React              from 'react';\r\nimport verify             from 'util/verify';\r\nimport {SnackbarProvider,\r\n        withSnackbar}     from 'notistack';\r\nimport {makeStyles}       from '@material-ui/core/styles';\r\nimport Button             from \"@material-ui/core/Button\";\r\nimport isString           from 'lodash.isstring';\r\nimport isFunction         from 'lodash.isfunction';\r\n\r\n/* eslint-disable react/jsx-pascal-case */  // for: <NotifyAPI_withSnackBar>\r\n\r\n/**\r\n * The Notify component provides user notifications through a visual\r\n * message dialog.\r\n *\r\n * User messages are initiated through a programmatic invocation,\r\n * using the functional notify() API.  Supplied directives support\r\n * a variety of scenarios, including:\r\n *   - action buttons (for acknowledgment, or confirmation, etc.)\r\n *   - timed closure of the message\r\n *   - msg levels of success, info, warn, error (impacting the dialog style/color)\r\n *   - modal and non-modal\r\n *\r\n * Notify is the fundamental component which is the basis of various\r\n * UI notifications (i.e. Toasts, Alerts, Confirmations, etc.).  It\r\n * can be used stand-alone, or indirectly through various wrappers\r\n * (promoted through named exports).  The following functions are\r\n * summarized as follows:\r\n *\r\n * ```\r\n *                                                                 auto-close         variant-color      screen           ??TODO client\r\n *                 params:                         msg             duration           level              position         modal  actions\r\n *                 ============================    ==============  =================  =================  ===============  =====  ==========================\r\n *   - notify .... ({msg,                          msg to display  1-20 seconds       'success': green   'top-left'       false  [ {txt, [action]}, ... ]\r\n *                   duration=5,                   ... supports    null: close        'info':    blue    'top-center'     true   - where action: () => void\r\n *                   level='success',                  cr/lf             via          'warn':    yellow  'top-right'             - actions ARE OPTIONAL\r\n *                   position='bottom-left',                             client       'error':   red     'bottom-left'           - ALL actions auto close\r\n *                   modal=false,                                        action                          'bottom-center'  \r\n *                   actions=[]})                                        DEFAULT: OK                     'bottom-right'\r\n *                   \r\n *   - toast ..... ({msg, duration=5, actions})                    ditto              via toast.xyz()    'bottom-left'    false  ditto\r\n *   - alert ..... ({msg, actions})                                null               via alert.xyz()    'top-center'     true   ditto\r\n *   - confirm ... ({msg, actions})                                null               via confirm.xyz()  'top-right'      true   requires client action(s)\r\n * ```\r\n *\r\n * **Setup**:\r\n *\r\n *   The Notify component is tightly controlled as a single instance\r\n *   within an entire app.  Therefore, one and only one Notify\r\n *   instance must be pre-instantiated (initially hidden) somewhere at\r\n *   the top-level of your app.\r\n *\r\n *     ```\r\n *       <React.Fragment>\r\n *         <Notify/>\r\n *         {app content}\r\n *       </React.Fragment>\r\n\r\n *       -or-\r\n *       <Notify>\r\n *         {app content}\r\n *       <Notify>\r\n *     ```\r\n * \r\n * **Usage**:\r\n * \r\n *   see docs below: `notify()`, `toast()`, `alert()`, `confirm()`\r\n * \r\n * **Module Note**:\r\n *\r\n *   This utility is housed in a lower-case `notify.js` module,\r\n *   because the general public API is a series of lower-case \"named\r\n *   exported\" functions: `notify()`, `toast()`, `alert()`,\r\n *   `confirm()`.\r\n * \r\n *   There is a \"default exported\" Notify component (which is somewhat\r\n *   unusual to find in a lower-case module), but is only used once at\r\n *   app startup, so is therefore justified (in this case).\r\n */\r\n\r\n//***\r\n//*** the top-level Notify component conveniently auto-injects the notistack <SnackbarProvider>\r\n//*** (required for our programmatic interface)\r\n//***\r\n\r\nexport default function Notify(props) {\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <SnackbarProvider maxSnack={3} dense={true} className={classes.variantSuccess}>\r\n      <NotifyAPI_withSnackBar>\r\n        {props.children}\r\n      </NotifyAPI_withSnackBar>\r\n    </SnackbarProvider>\r\n  );\r\n}\r\n\r\n// apply snackbar variant style changes in support cr/lf\r\n// ... via: whiteSpace of 'pre-line'\r\n// ... this honors cr/lf within our snackbar items\r\nconst useStyles = makeStyles( theme => ({\r\n  variantSuccess: {\r\n    whiteSpace: 'pre-line',\r\n  },\r\n  variantInfo: {\r\n    whiteSpace: 'pre-line',\r\n  },\r\n  variantWarning: {\r\n    whiteSpace: 'pre-line',\r\n  },\r\n  variantError: {\r\n    whiteSpace: 'pre-line',\r\n  },\r\n}) );\r\n\r\n\r\n//***\r\n//*** keep track of our one-and-only instance\r\n//***\r\n\r\nlet _singleton = null;\r\n\r\n\r\n//***\r\n//*** the NotifyAPI component provides our internal programmatic API\r\n//*** (see .display()), used by notify(), toast(), etc.\r\n//***\r\n\r\nclass NotifyAPI extends React.Component {\r\n\r\n  static propTypes = { // expected component props\r\n  }\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    // keep track of our one-and-only instance\r\n    verify(!_singleton, '<Notify> only ONE Notify instance should be instantiated in the app (at the top-level).');\r\n    _singleton = this;\r\n  }\r\n\r\n  // display() is the interface point to our programmatic API (notify(), toast(), etc.)\r\n  display({msg,\r\n           duration=5, // auto close duration in seconds ... DEFAULT: 5 ... use null - manual close (via actions [default to OK])\r\n           level='success',\r\n           position='bottom-left',\r\n           modal=false,\r\n           actions=[],\r\n           ...unknownArgs}={}) {\r\n\r\n    // validate the named parameters (i.e. the directive)\r\n    const check = verify.prefix('notify() parameter violation: '); // NOTE: we pretend we are: notify() (the public access point)\r\n\r\n    // ... msg\r\n    check(msg, 'directive.msg is required');\r\n    check(isString(msg),  'msg must be a string');\r\n\r\n    // ... duration\r\n    if (duration !== null) {\r\n      check(duration >= 1 && duration <= 20, `supplied duration (${duration}) must be a number between 1 and 20 (inclusive).`);\r\n    }\r\n\r\n    // ... level\r\n    check(levelVariant[level], `invalid level: '${level}', expecting one of ${Object.keys(levelVariant)}.`);\r\n\r\n    // ... position\r\n    check(anchorOrigin[position], `invalid position: '${position}', expecting one of ${Object.keys(anchorOrigin)}.`);\r\n\r\n    // ... modal\r\n    check(modal===true || modal===false, `supplied modal (${modal}) must be a boolean true/false.`);\r\n\r\n    // ... actions\r\n    check(actions,                'actions must be an Action[] array'); // defaulted to [] ... this is user error of like null or something\r\n    check(Array.isArray(actions), 'actions must be an Action[] array');\r\n    actions.forEach( (action, indx) => {\r\n      check(action.txt,           `action[${indx}].txt is required`);\r\n      check(isString(action.txt), `action[${indx}].txt be a string ... NOT: ${action.txt}`);\r\n      if (action.action) {\r\n        check(isFunction(action.action), `action[${indx}].action (when supplied) must be a function ... NOT: ${action.action}`);\r\n      }\r\n    });\r\n\r\n    // ... unknown args\r\n    const unknownArgKeys = Object.keys(unknownArgs);\r\n    check(unknownArgKeys.length===0,  `unrecognized named parameter(s): ${unknownArgKeys}`);\r\n\r\n    // maintain our display duration\r\n    const autoHideDuration = duration ? duration*1000 : null; // convert to seconds ... null indicates manual close (via actions [default to OK])\r\n\r\n    // interpret any client-supplied actions\r\n\r\n    // ... provide a default OK when NO duration and NO actions are defined\r\n    //     NOTE: When NO duration is supplied, only way to close notification is through an action!\r\n    //           If client has NO actions, we will supply one (a default OK)\r\n    if (!duration && actions.length===0) {\r\n      actions = [{txt: 'OK'}]; // do NOT mutate client-supplied actions\r\n    }\r\n\r\n    // ... maintain a actions callback map indexed by .txt (default to identityFn)\r\n    const actionsCbMap = actions.reduce( (map, action) => {\r\n      map[action.txt] = action.action || identityFn;\r\n      return map;\r\n    }, {} );\r\n    // ... define our actionButtons (supplied to enqueueSnackbar) ... empty array is ignored\r\n    const actionButtons = actions.map( (action, indx) => <Button key={indx} color=\"default\" size=\"small\">{action.txt}</Button> );\r\n\r\n\r\n    // KEY: display the notification ... using notistack's enqueueSnackbar(...)\r\n    const snackbarKey = this.props.enqueueSnackbar(msg, {\r\n      variant: levelVariant[level],\r\n      autoHideDuration,\r\n      anchorOrigin: anchorOrigin[position],\r\n      action: actionButtons,\r\n      onClick: (e) => {\r\n        // close this notification\r\n        this.props.closeSnackbar(snackbarKey);\r\n\r\n        // invoke client-supplied callback\r\n        // ... on delay to make any client-notification transitions more intuitive\r\n        const clientAction = actionsCbMap[e.target.textContent];\r\n        setTimeout( () => clientAction(), 400);\r\n      },\r\n    });\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {this.props.children}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n// our level variant (indirectly defines color -and- provides level validation)\r\nconst levelVariant = { // color NOT used\r\n  success: 'success',\r\n  info:    'info',\r\n  warn:    'warning',\r\n  error:   'error',\r\n};\r\n\r\n// our anchorOrigin, indexed by position keyword\r\nconst anchorOrigin = {\r\n  'top-left':      { vertical: 'top',    horizontal: 'left'   },\r\n  'top-center':    { vertical: 'top',    horizontal: 'center' },\r\n  'top-right':     { vertical: 'top',    horizontal: 'right'  },\r\n  'bottom-left':   { vertical: 'bottom', horizontal: 'left'   },\r\n  'bottom-center': { vertical: 'bottom', horizontal: 'center' },\r\n  'bottom-right':  { vertical: 'bottom', horizontal: 'right'  },\r\n};\r\n\r\n// a convenient identity function\r\nconst identityFn = (p)=>p;\r\n\r\n\r\n//***\r\n//*** the withSnackbar() HOC provides access to the Snackbar run-time methods:\r\n//***   + props.enqueueSnackbar(...)\r\n//***   + props.closeSnackbar(...)\r\n//*** \r\n\r\nconst NotifyAPI_withSnackBar = withSnackbar(NotifyAPI);\r\nNotifyAPI_withSnackBar.displayName = 'NotifyAPI_withSnackBar'; // ... for react debugging (NOT accomplished in withSnackbar() ... grrrrr)\r\n\r\n\r\n\r\n/**\r\n * Display a user notification - the general purpose access point,\r\n * using named directives.\r\n *\r\n * @param {string} directive.msg the message to be displayed (cr/lf\r\n * are supported).\r\n *\r\n * @param {number} [directive.duration] the number of seconds to\r\n * display the msg before automatically closing the dialog.  If not\r\n * supplied, the dialog must be explicitly closed through a button\r\n * click.\r\n *\r\n * @param {string} [directive.level] the category level associated\r\n * with this notification (impacting background color).  One of:\r\n *  - 'success' ... the default\r\n *  - 'info'\r\n *  - 'warn'\r\n *  - 'error'\r\n *\r\n * @param {string} [directive.position] the position to display this\r\n * notification. One of:\r\n *  - 'top-left'\r\n *  - 'top-center'\r\n *  - 'top-right'\r\n *  - 'bottom-left' ... the default\r\n *  - 'bottom-center'\r\n *  - 'bottom-right'\r\n *\r\n * @param {boolean} [directive.modal] an indicator as to whether the\r\n * notification dialog is modal (true) or not (false) the default.\r\n *\r\n * @param {Action[]} [directive.actions] one or more actions -\r\n * button/action combinations.  The required Action.txt defines the\r\n * button label, and the Action.action is an option client-supplied\r\n * callback.  Each defined action will implicitly close the dialog,\r\n * in addition to invoking the optional client-supplied callback.\r\n *\r\n * NOTE: When NO duration and NO actions are defined, a default OK \r\n *       action is injected that will close the dialog when clicked.\r\n *\r\n * Example:\r\n * ```\r\n *   notify({\r\n *     msg:      'You have un-saved changes.\\nif you leave, your changes will NOT be saved!',\r\n *     duration: seconds,\r\n *     level:    'warn',\r\n *     position: 'bottom-right',\r\n *     modal:    true,\r\n *     actions: [\r\n *       { txt: 'Discard Changes', action: () => ...callback-logic-here... },\r\n *       { txt: 'Go Back' }\r\n *     ]\r\n *   });\r\n * ```\r\n */\r\nexport function notify(directive) {\r\n  // validate that an <Notify> has been instantiated\r\n  verify(_singleton, 'notify(): NO <Notify> instance has been established in the app root.');\r\n\r\n  // pass-through to our instance method\r\n  _singleton.display(directive);\r\n}\r\n\r\n\r\n/**\r\n * The toast() function is a convenience wrapper around notify() that\r\n * displays the supplied msg as a \"toast\" ... a non-modal dialog\r\n * located at the bottom-left of the screen, which is typically closed\r\n * after 5 seconds.\r\n *\r\n * Various levels can be accomplished via toast.success(),\r\n * toast.info(), toast.warn(), toast.error() ... all of which have the\r\n * same signature.  NOTE: toast() is the same as toast.success().\r\n *\r\n * @param {string} directive.msg the message to be displayed (cr/lf are\r\n * supported).\r\n *\r\n * @param {number} [directive.duration] the number of seconds before\r\n * automatically closing the dialog (default: 5).  A null defers to\r\n * supplied actions to close (which in turn defaults to an OK).\r\n *\r\n * @param {Action[]} [directive.actions] one or more actions -\r\n * button/action combinations.  The required Action.txt defines the\r\n * button label, and the Action.action is an option client-supplied\r\n * callback.  Each defined action will implicitly close the dialog,\r\n * in addition to invoking the optional client-supplied callback.\r\n *\r\n * NOTE: When NO duration and NO actions are defined, a default OK \r\n *       action is injected that will close the dialog when clicked.\r\n *\r\n * Example:\r\n * ```\r\n *\r\n *   toast({ msg:'Hello World' });    // will close in 6 secs\r\n *\r\n *   toast.error({ msg:     `An error occurred: ${err}`, \r\n *                 duration: null }); // OK button will close\r\n *\r\n *   toast.warn({                     // will close in 3 secs -OR- when \"undo\" is clicked\r\n *     msg: 'Your item was deleted', \r\n *     actions: [\r\n *       { txt: 'undo', action: () => ...callback-logic-here... },\r\n *     ]\r\n *    })\r\n * ```\r\n */\r\nfunction toastBase({msg, duration=5, actions, ...unknownArgs}, level) {\r\n\r\n  // validate toast-specific characteristics (other validation done by notify())\r\n  const funcQual = level ? `.${level}` : '';\r\n  const check    = verify.prefix(`toast${funcQual}() parameter violation: `);\r\n\r\n  // NOTE: as a general rule, validations are provided by the root notify()\r\n  // checking msg explicitly avoids unknownArgKeys weirdness (below) when msg is passed as a non-named param\r\n  check(msg, 'msg named parameter is required');\r\n\r\n  const unknownArgKeys = Object.keys(unknownArgs);\r\n  check(unknownArgKeys.length===0,  `unrecognized named parameter(s): ${unknownArgKeys}`);\r\n\r\n  // defer to our general-purpose notify() utility\r\n  notify({\r\n    msg,\r\n    duration,\r\n    level,    // NOTE: level is defaulted by the root notify()\r\n    position: 'bottom-left',\r\n    modal: false,\r\n    actions,\r\n  });\r\n}\r\nexport function  toast(directive) { toastBase(directive);          }\r\ntoast.success  = function(directive) { toastBase(directive, 'success'); }\r\ntoast.info     = function(directive) { toastBase(directive, 'info');    }\r\ntoast.warn     = function(directive) { toastBase(directive, 'warn');    }\r\ntoast.error    = function(directive) { toastBase(directive, 'error');   }\r\n\r\n\r\n/**\r\n * The alert() function is a convenience wrapper around notify() that\r\n * displays the supplied msg as a \"alert\" ... a modal dialog located\r\n * at the top-center of the screen, that must be acknowledged by the\r\n * user with either the default OK button, or a client-supplied\r\n * action.\r\n *\r\n * Various levels can be accomplished via alert.success(),\r\n * alert.info(), alert.warn(), alert.error() ... all of which have the\r\n * same signature.  NOTE: alert() is the same as alert.success().\r\n *\r\n * @param {string} directive.msg the message to be displayed (cr/lf\r\n * are supported).\r\n *\r\n * @param {Action[]} [directive.actions] one or more actions -\r\n * button/action combinations.  The required Action.txt defines the\r\n * button label, and the Action.action is an option client-supplied\r\n * callback.  Each defined action will implicitly close the dialog,\r\n * in addition to invoking the optional client-supplied callback.\r\n *\r\n * NOTE: When NO actions are defined, a default OK  action is injected\r\n *       that will close the dialog when clicked.\r\n *\r\n * Example:\r\n * ```\r\n *   alert({ msg:'Hello World' });\r\n *   alert.warn({\r\n *     msg:`Your limit (${limit}) has been reached!`\r\n *     actions: [\r\n *       { txt: 'increase', action: () => ...callback-logic-here... },\r\n *     ]\r\n *   });\r\n * ```\r\n */\r\nfunction alertBase({msg, actions, ...unknownArgs}, level) {\r\n\r\n  // validate alert-specific characteristics (other validation done by notify())\r\n  const funcQual = level ? `.${level}` : '';\r\n  const check    = verify.prefix(`alert${funcQual}() parameter violation: `);\r\n\r\n  // NOTE: as a general rule, validations are provided by the root notify()\r\n  // checking msg explicitly avoids unknownArgKeys weirdness (below) when msg is passed as a non-named param\r\n  check(msg, 'msg named parameter is required');\r\n\r\n  const unknownArgKeys = Object.keys(unknownArgs);\r\n  check(unknownArgKeys.length===0,  `unrecognized named parameter(s): ${unknownArgKeys}`);\r\n\r\n  // defer to our general-purpose notify() utility\r\n  notify({\r\n    msg,\r\n    duration: null, // force user acknowledgment\r\n    level,          // NOTE: level is defaulted by the root notify()\r\n    position: 'top-center',\r\n    modal: true,\r\n    actions,\r\n  });\r\n}\r\nexport function  alert(directive) { alertBase(directive);          }\r\nalert.success  = function(directive) { alertBase(directive, 'success'); }\r\nalert.info     = function(directive) { alertBase(directive, 'info');    }\r\nalert.warn     = function(directive) { alertBase(directive, 'warn');    }\r\nalert.error    = function(directive) { alertBase(directive, 'error');   }\r\n\r\n\r\n/**\r\n * The confirm() function is a convenience wrapper around notify()\r\n * that displays the supplied msg as a \"confirmation\" ... a modal\r\n * dialog located at the bottom-right of the screen, that must be\r\n * acknowledged through client-supplied action buttons.\r\n *\r\n * Various levels can be accomplished via confirm.success(),\r\n * confirm.info(), confirm.warn(), confirm.error() ... all of which\r\n * have the same signature.  NOTE: confirm() is the same as\r\n * confirm.success().\r\n *\r\n * @param {string} directive.msg the message to be displayed (cr/lf\r\n * are supported).\r\n *\r\n * @param {Action[]} directive.actions one or more actions - button/action\r\n * combinations.  The required Action.txt defines the button label,\r\n * and the Action.action is an option client-supplied callback.  Each\r\n * defined action will implicitly close the dialog, in addition to\r\n * invoking the optional client-supplied callback.\r\n *\r\n * Example:\r\n * ```\r\n *   confirm.warn({ \r\n *     msg: 'This is an confirm warning.\\nYou must explicitly acknowledge it.', \r\n *     actions: [\r\n *       { txt: 'Discard Changes', action: () => console.log('xx Discarding Changes') },\r\n *       { txt: 'Go Back' }\r\n *     ]\r\n *   });\r\n * ```\r\n */\r\nfunction confirmBase({msg, actions, ...unknownArgs}, level) {\r\n\r\n  // validate confirm-specific characteristics (other validation done by notify())\r\n  const funcQual = level ? `.${level}` : '';\r\n  const check    = verify.prefix(`confirm${funcQual}() parameter violation: `);\r\n\r\n  // NOTE: as a general rule, validations are provided by the root notify()\r\n  // checking msg explicitly avoids unknownArgKeys weirdness (below) when msg is passed as a non-named param\r\n  check(msg, 'msg named parameter is required');\r\n\r\n  // confirm() requires client-supplied actions\r\n  check(actions && actions.length>0, 'client-specific actions are required.');\r\n\r\n  const unknownArgKeys = Object.keys(unknownArgs);\r\n  check(unknownArgKeys.length===0,  `unrecognized named parameter(s): ${unknownArgKeys}`);\r\n\r\n  // defer to our general-purpose notify() utility\r\n  notify({\r\n    msg,\r\n    duration: null, // force user acknowledgment\r\n    level,          // NOTE: level is defaulted by the root notify()\r\n    position: 'top-right',\r\n    modal: true,\r\n    actions,\r\n  });\r\n}\r\nexport function  confirm(directive) { confirmBase(directive);          }\r\nconfirm.success  = function(directive) { confirmBase(directive, 'success'); }\r\nconfirm.info     = function(directive) { confirmBase(directive, 'info');    }\r\nconfirm.warn     = function(directive) { confirmBase(directive, 'warn');    }\r\nconfirm.error    = function(directive) { confirmBase(directive, 'error');   }\r\n","import {toast, alert} from 'util/notify';\r\nimport verify         from 'util/verify';\r\n\r\nconst DYNAMIC_DEFAULT = 'DYNAMIC_DEFAULT';\r\n\r\n/**\r\n * The discloseError() utility provides a standard way to \r\n * disclose errors both to the user (toasts) and logs.\r\n *\r\n * This utility uses the heuristics defined by the\r\n * ErrorExtensionPolyfill, and therefore require it to be present.\r\n *\r\n * The emission of both user notifications and logs can be controlled,\r\n * through parameters that dynamically default (based on \"expected\"\r\n * vs. \"unexpected\" error status).\r\n *\r\n * All user notifications occur through toasts, and are sanitized:\r\n *  - showing appropriate user-level detail,\r\n *  - with more information available via a button click\r\n *\r\n * Log formats are also standardized.\r\n *\r\n * **Please Note** this function uses named parameters.\r\n *\r\n * @param {Error} err the Error object to be disclosed (logged and\r\n * user-notified).\r\n *\r\n * @param {boolean} [showUser=true] an indicator as to whether the\r\n * user should be shown this error.\r\n *\r\n * @param {boolean} [logIt=DYNAMIC_DEFAULT] an indicator as to whether\r\n * a log entry should be emitted, dynamically defaulted (LOG when err\r\n * is Unexpected, NO-LOG when Expected).\r\n */\r\nexport default function discloseError({err,\r\n                                       showUser=true,         // DEFAULT: true ................. i.e. always SHOW\r\n                                       logIt=DYNAMIC_DEFAULT, // DEFAULT: err.isUnexpected() ... i.e. LOG when Unexpected, NO-LOG when Expected\r\n                                       ...unknownArgs}={}) {\r\n\r\n  // validate parameters\r\n  try {\r\n    const check = verify.prefix('discloseError() parameter violation: ')\r\n    // ... err\r\n    check(err,           'err is required');\r\n    check(err instanceof Error, 'err must be an Error object, NOT: ', err);\r\n    // ... showUser\r\n    showUser = showUser===DYNAMIC_DEFAULT ? err.isExpected() : showUser; // dynamic DEFAULT semantics\r\n    check(showUser===true || showUser===false, 'showUser must be a boolean');\r\n    // ... logIt\r\n    logIt = logIt===DYNAMIC_DEFAULT ? err.isUnexpected() : logIt; // dynamic DEFAULT semantics\r\n    check(logIt===true || logIt===false, 'logIt must be a boolean');\r\n    // ... unrecognized named parameter\r\n    const unknownArgKeys = Object.keys(unknownArgs);\r\n    check(unknownArgKeys.length === 0,  `unrecognized named parameter(s): ${unknownArgKeys}`);\r\n    // ... unrecognized positional parameter (NOTE: when defaulting entire struct, arguments.length is 0)\r\n    check(arguments.length === 0 || arguments.length === 1, 'unrecognized positional parameters (only named parameters can be specified)');\r\n  }\r\n  // NOTE: this handler CANNOT throw an error, \r\n  //       because it is typically used inside a promise.catch()\r\n  //       which will generate an \"Unhandled promise rejection\"\r\n  catch(e) {\r\n    console.log('YIKES ... visualize-it\\'s discloseError() was attempting to report on err: ', err);\r\n    console.log('HOWEVER AN INVOCATION PROBLEM was detected in the parameters passed to discloseError()!\\n' +\r\n                '... discloseError() CANNOT throw an error (when used in a promise an \"Unhandled promise rejection\" will result)!!\\n' +\r\n                '... PLEASE FIX THE FOLLOWING INVOCATION PROBLEM: ', e);\r\n    return; // cannot throw(e) ... see log (above)\r\n  }\r\n\r\n  // show user when requested\r\n  if (showUser) {\r\n    // unexpended errors display as error toasts with additional details link\r\n    if (err.isUnexpected()) {\r\n      toast.error({  // ... will auto close -OR- when \"details\" is clicked\r\n        msg: err.formatUserMsg(),\r\n        actions: [\r\n          { txt:    'details',\r\n            action: () => {\r\n              alert.error({ msg: `An unexpected error occurred:\r\n\r\n${err}\r\n\r\nIf this problem persists, please contact your tech support.`\r\n              });\r\n            }},\r\n        ]\r\n      });\r\n    }\r\n\r\n    // expended errors display as warning toasts with NO additional detail\r\n    else {\r\n      toast.warn({  // ... will auto close\r\n        msg: err.formatUserMsg()\r\n      });\r\n    }\r\n        \r\n  }\r\n\r\n  // generate log entry when requested\r\n  if (logIt) {\r\n\r\n    // log the details of the error (with traceback) for tech review\r\n    // NOTE 1: we refrain from using console.warn() and console.error() \r\n    //         because of BAD semantics inferred by react-native/expo:\r\n    //          - console.warn():  generates yellow popup\r\n    //          - console.error(): kills app with \"red screen of death\"\r\n    // NOTE 2: react-native/expo appears to be doing something non standard\r\n    //         when passing error as the 2nd parameter of log():\r\n    //             log('msg', error)\r\n    //         ... in this case is merely emitting error.toString()\r\n    //         ... we can however receive a stack trace by calling log(error) as the first parameter\r\n    const prefix = err.isUnexpected() ? '*** Unexpected Error:\\n\\n' : '*** Expected Error:\\n\\n';\r\n    console.log(prefix + err);\r\n    if (err.isUnexpected()) { // produce stack traces only for unexpected errors\r\n      console.log('Stack Trace ...');\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n}\r\n","/**\r\n * A \"no op\" function that does absolutely nothing (think IEFBR14 :-)\r\n */\r\nexport default function noOp() {\r\n}\r\n","import verify         from 'util/verify';\r\nimport isString       from 'lodash.isstring';\r\nimport isPlainObject  from 'lodash.isplainobject';\r\n\r\n\r\n/**\r\n * Encode the supplied ref into a string representation.\r\n *\r\n * - supporting an optional safeguard (obfuscate content making it\r\n *   obscure to public visibility)\r\n *\r\n * - employing embedded-recognition so the process can be reversed using\r\n *   self-recognition\r\n *\r\n * TERMINOLOGY:\r\n *\r\n * - encode:  package content into a string representation (which can\r\n *            be reversed) ... ex: obj2str\r\n *\r\n * - decode:  reverse the process of encode()\r\n *\r\n * - safeguard: obfuscate content so as to make it obscure to public\r\n *              visibility\r\n *              NOTE: this is a \"lighter weight\" process than full\r\n *                    encryption\r\n *\r\n * - embedded-recognition: the ability to recognize and reverse the\r\n *                         process of either encoding and/or\r\n *                         safeguarding, producing the original\r\n *                         ref (that was originally encoded)\r\n *\r\n * @param {string|jsonObj} ref the reference to encode\r\n * @param {boolean} [safeguard=false] an indicator as to whether the\r\n * result should be obfuscated (true) or not (false - the DEFAULT).\r\n * \r\n * @return {string} an encoded representation of the supplied ref.\r\n */\r\nexport function encode(ref, safeguard=false) {\r\n\r\n  // validate our parameters\r\n  const check = verify.prefix('encode(ref) parameter violation: ');\r\n\r\n  // ... ref\r\n  check(ref,                                 'ref is required');\r\n  check(isString(ref) || isPlainObject(ref), 'ref must be a string -or- an object literal. NOT: ', ref);\r\n\r\n  // ... safeguard\r\n  check(safeguard===true || safeguard===false, 'safeguard must be a boolean (true/false), NOT: ', safeguard);\r\n\r\n  // encode the supplied ref into a string representation\r\n  let encoding = ref;            // ... by default, a string is left un-touched\r\n  if (isPlainObject(encoding)) { // ... encode objects\r\n    encoding = demarkObjEncoding + JSON.stringify(encoding);\r\n  }\r\n\r\n  // safeguard, when requested\r\n  if (safeguard) {\r\n    encoding = demarkSafeguard + obfuscate(encoding);\r\n  }\r\n\r\n  // thats all folks :-)\r\n  return encoding;\r\n}\r\n\r\n\r\n/**\r\n * Decode the supplied ref, reversing the process of `encode()`.\r\n * \r\n * NOTE: `decode()` can be invoked on a non-encoded ref, in which case\r\n *       it will simply pass-through the un-encoded ref.  This is a\r\n *       convenience, and is made possible by embedded-recognition.\r\n * \r\n * @param {any} ref the reference object to decode ... either the\r\n * output of `encode()` (a recognized encoded string), or any other\r\n * reference (simply passed-through).\r\n * \r\n * @return {any} the decoded representation of the supplied ref.\r\n */\r\nexport function decode(ref) {\r\n\r\n  // validate our parameters\r\n  const check = verify.prefix('decode(ref) parameter violation: ');\r\n\r\n  // ... ref\r\n  check(ref, 'ref is required');\r\n\r\n  // simply pass-through any non-strig ref\r\n  if (!isString(ref)) {\r\n    return ref;\r\n  }\r\n\r\n  // KEY: at this point we know ref is a string :-)\r\n  let result = ref;\r\n\r\n  // unwind any safeguards\r\n  if (result.indexOf(demarkSafeguard) === 0) {\r\n    result = result.substring(demarkSafeguard.length);\r\n    result = deobfuscate(result);\r\n  }\r\n\r\n  // unwind any encodings\r\n  if (result.indexOf(demarkObjEncoding) === 0) {\r\n    result = result.substring(demarkObjEncoding.length);\r\n    result = JSON.parse(result);\r\n  }\r\n\r\n  // thats all folks :-)\r\n  return result;\r\n}\r\n\r\n// embedded-recognition keywords\r\nconst demarkObjEncoding = 'obj2str:';\r\nconst demarkSafeguard   = 'afesa'; // ... use a obsecure phrase, so as to NOT \"stand out\"\r\n                                   //     - pig Latin for \"safe\"\r\n                                   //     - preventing it from being uniquely identified\r\n                                   //       and harvested within a global deployment\r\n\r\n\r\nfunction obfuscate(str) {\r\n  if (!window.btoa) {\r\n    throw new Error('*** ERROR *** encode(): ENCODING NOT supported by this browser (btoa).');\r\n  }\r\n  const encoding = window.btoa(str);\r\n  return encoding;\r\n}\r\n\r\nfunction deobfuscate(str) {\r\n  if (!window.atob) {\r\n    throw new Error('*** ERROR *** encode(): DECODING NOT supported by this browser (atob).');\r\n  }\r\n  const clearTxt = window.atob(str);\r\n  return clearTxt;\r\n}\r\n","import verify         from 'util/verify';\r\nimport isString       from 'lodash.isstring';\r\nimport isPlainObject  from 'lodash.isplainobject';\r\nimport noOp           from 'util/noOp';\r\nimport {encode,\r\n        decode}       from 'util/encoder';\r\n\r\n/**\r\n * Store the supplied entry in local device storage.\r\n *\r\n * @param {string} key the unique key that catalogs this entry.\r\n * @param {string|jsonObj} ref the reference to store.\r\n * @param {boolean} [safeguard=false] an indicator as to whether the\r\n * entry should be obfuscated (true) or not (false - the DEFAULT).\r\n */\r\nexport function storeItem(key, ref, safeguard=false) {\r\n\r\n  // validate our parameters\r\n  const check = verify.prefix('storeItem() parameter violation: ');\r\n\r\n  // ... key\r\n  check(key,           'key is required');\r\n  check(isString(key), 'key must be a string, NOT: ', key);\r\n\r\n  // ... ref\r\n  check(ref,                                 'ref is required');\r\n  check(isString(ref) || isPlainObject(ref), 'ref must be a string -or- an object literal, NOT: ', ref);\r\n\r\n  // ... safeguard\r\n  check(safeguard===true || safeguard===false, 'safeguard must be a boolean (true/false), NOT: ', safeguard);\r\n\r\n  // encode the supplied ref into a string representation\r\n  // SUPPORTING:\r\n  //   - object encoding (to a string representation)\r\n  //     NOTE: plain strings are NOT altered in this operation\r\n  //   - safeguard (obfuscation)\r\n  const value = encode(ref, safeguard);\r\n\r\n  // store the entry into our deviceStorage\r\n  deviceStorage.setItem(key, value);\r\n}\r\n\r\n\r\n/**\r\n * Fetch the stored entry from local device storage.\r\n *\r\n * @param {string} key the unique key that catalogs this entry.\r\n * \r\n * @return {any} the entry stored from the supplied key (null for\r\n * none), implicitly unpacked to the original ref (supplied to\r\n * `storeItem()`).\r\n */\r\nexport function fetchItem(key) {\r\n\r\n  // validate our parameters\r\n  const check = verify.prefix('fetchItem() parameter violation: ');\r\n\r\n  // ... key\r\n  check(key,           'key is required');\r\n  check(isString(key), 'key must be a string, NOT: ', key);\r\n\r\n  // retrieve the entry from our deviceStorage\r\n  const value = deviceStorage.getItem(key);\r\n\r\n  // no-op for non-existent entries\r\n  if (!value) {\r\n    return null;\r\n  }\r\n\r\n  // decode the entry, unpacking it into the original form (ref)\r\n  const ref = decode(value);\r\n\r\n  // that's all folks :-)\r\n  return ref;\r\n}\r\n\r\n\r\n\r\n/**\r\n * Remove the stored entry from local device storage.\r\n *\r\n * @param {string} key the unique key of the entry to remove.\r\n */\r\nexport function removeItem(key) {\r\n\r\n  // validate our parameters\r\n  const check = verify.prefix('removeItem() parameter violation: ');\r\n\r\n  // ... key\r\n  check(key,           'key is required');\r\n  check(isString(key), 'key must be a string, NOT: ', key);\r\n\r\n  // remove the entry from our local device storage\r\n  deviceStorage.removeItem(key);\r\n}\r\n\r\n\r\n\r\n\r\n//***\r\n//*** Abstract the Web Storage API (gracefully no-oping for unsupported browsers)\r\n//***\r\n//***  NOTE 1: This API is synchronous!\r\n//***  NOTE 2: Apparently this API is available on both http (non SSL) as well as https (SSL).\r\n//***\r\n\r\n// feature detection\r\n// ... NOTE: can't just assert window.localStorage exists\r\n//           see: https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Feature-detecting_localStorage\r\nconst _localStorageAvailable = storageAvailable('localStorage');\r\nfunction storageAvailable(type) {\r\n  let storage;\r\n  try {\r\n    storage = window[type];\r\n    let x = '__storage_test__';\r\n    storage.setItem(x, x);\r\n    storage.removeItem(x);\r\n    return true;\r\n  }\r\n  catch(e) {\r\n    return e instanceof DOMException && (\r\n      // everything except Firefox\r\n      e.code === 22 ||\r\n      // Firefox\r\n      e.code === 1014 ||\r\n      // test name field too, because code might not be present\r\n      // everything except Firefox\r\n      e.name === 'QuotaExceededError' ||\r\n      // Firefox\r\n      e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\r\n           // acknowledge QuotaExceededError only if there's something already stored\r\n           (storage && storage.length !== 0);\r\n  }\r\n}\r\n\r\n// log warning when deviceStorage is NOT in affect\r\nif (!_localStorageAvailable) {\r\n  console.warn('***WARNING*** deviceStorage module ... localStorage (Web Storage API) is NOT available in this browser ... all deviceStorage usage will silently no-op!!');\r\n}\r\n\r\n// our localStorage pass-through that gracefully no-ops for unsupported browsers\r\nconst deviceStorage = _localStorageAvailable ? {\r\n  setItem:    (keyName, keyValue) => window.localStorage.setItem(keyName, keyValue),\r\n  getItem:    (keyName)           => window.localStorage.getItem(keyName),\r\n  removeItem: (keyName)           => window.localStorage.removeItem(keyName),\r\n} : {\r\n  setItem:    noOp,\r\n  getItem:    noOp,\r\n  removeItem: noOp,\r\n};\r\n\r\n// TEMP crude test of deviceStorage ... invoke these separately!\r\n// deviceStorage.setItem('WowZeeKey', 'WowZeeValue');\r\n// console.log(`test deviceStorage ... '${deviceStorage.getItem('WowZeeKey')}'`);\r\n","import {storeItem,\r\n        fetchItem,\r\n        removeItem}   from 'util/deviceStorage';\r\n\r\n/**\r\n * Store credentials on local device in an encoded form.\r\n * \r\n * @param {string} email the email (id) to store.\r\n * @param {string} pass the password to store.\r\n */\r\nexport function storeCredentials(email, pass) {\r\n  storeItem(credentialsKey,\r\n            {email, pass},\r\n            true); // safeguard\r\n}\r\n\r\n/**\r\n * Fetch credentials stored on local device (if any).\r\n * \r\n * @return {object} the credentials object if any (null for none):\r\n *   {\r\n *     email: string,\r\n *     pass:  string\r\n *   }\r\n */\r\nexport function fetchCredentials() {\r\n  return fetchItem(credentialsKey);\r\n}\r\n\r\n/**\r\n * Remove credentials from local device.\r\n */\r\nexport function removeCredentials() {\r\n  removeItem(credentialsKey);\r\n}\r\n\r\nconst credentialsKey = 'credentials';\r\n","import {createLogic}        from 'redux-logic';\r\nimport _auth                from './featureName';\r\nimport _authAct             from './actions';\r\nimport {curUser}            from './state';\r\nimport signInFormMeta       from './signInFormMeta';\r\nimport discloseError        from 'util/discloseError';\r\nimport {toast}              from 'util/notify';\r\nimport {fetchCredentials,\r\n        storeCredentials,\r\n        removeCredentials}  from './credentialsStorage';\r\n\r\n/**\r\n * Monitor authorization startup, fetching credentials stored on device (if any).\r\n */\r\nexport const checkDeviceCredentials = createLogic({\r\n\r\n  name: `${_auth}.checkDeviceCredentials`,\r\n  type: String(_authAct.autoSignIn),\r\n\r\n  process({getState, action, fassets}, dispatch, done) {\r\n\r\n    const credentials = fetchCredentials();\r\n    if (credentials) {\r\n      dispatch( _authAct.autoSignIn.haveDeviceCredentials(credentials) );\r\n    }\r\n    else {\r\n      dispatch( _authAct.autoSignIn.noDeviceCredentials() );\r\n    }\r\n\r\n    done();\r\n  },\r\n\r\n});\r\n\r\n\r\n/**\r\n * Auto SignIn, when device credentials exist.\r\n */\r\nexport const autoSignIn = createLogic({\r\n\r\n  name: `${_auth}.autoSignIn`,\r\n  type: String(_authAct.autoSignIn.haveDeviceCredentials),\r\n  \r\n  process({getState, action, fassets}, dispatch, done) {\r\n    const {email, pass} = action.credentials;\r\n    dispatch( _authAct.signIn(email, pass) );\r\n    done();\r\n  },\r\n\r\n});\r\n\r\n\r\n/**\r\n * Manual SignIn, when NO device credentials exist, or user signs out.\r\n */\r\nexport const manualSignIn = createLogic({\r\n\r\n  name: `${_auth}.manualSignIn'`,\r\n  type: [\r\n    String(_authAct.autoSignIn.noDeviceCredentials),\r\n    String(_authAct.signOut),\r\n  ],\r\n\r\n  process({getState, action}, dispatch, done) {\r\n    dispatch( _authAct.signIn.open() );\r\n    done();\r\n  },\r\n\r\n});\r\n\r\n\r\n/**\r\n * Interactive SignIn form processor.\r\n */\r\nexport const processSignIn = createLogic({\r\n\r\n  name: `${_auth}.processSignIn`,\r\n  type: String(_authAct.signIn.process),\r\n  \r\n  process({getState, action}, dispatch, done) {\r\n    dispatch( _authAct.signIn(action.values.email, action.values.pass) );\r\n    done();\r\n  },\r\n\r\n});\r\n\r\n\r\n/**\r\n * SignIn logic.\r\n */\r\nexport const signIn = createLogic({\r\n\r\n  name: `${_auth}.signIn`,\r\n  type: String(_authAct.signIn),\r\n  warnTimeout: 0, // long-running logic ... UNFORTUNATELY signin using our firebase service is sometimes EXCRUCIATINGLY SLOW!\r\n\r\n  async process({getState, action, fassets}, dispatch, done) {\r\n    try {\r\n      // signin via our authService\r\n      const user = await fassets.authService.signIn(action.email, action.pass);\r\n\r\n      // retain these credentials on our device (to streamline subsequent app launch)\r\n      storeCredentials(action.email, action.pass);\r\n\r\n      // communicate a new user is in town\r\n      dispatch( _authAct.signIn.complete(user) );\r\n\r\n      done();\r\n    }\r\n    catch(err) {\r\n      discloseError({err,\r\n                     showUser: err.isUnexpected()}); // expected errors are shown to the user via the re-direction to the signIn screen (see next step)\r\n\r\n      // re-direct to SignIn screen, prepopulated with appropriate msg\r\n      dispatch( _authAct.signIn.open(action, err.formatUserMsg()) ); // NOTE: action is a cheap shortcut to domain (contains email/pass) ... pre-populating sign-in form with last user input\r\n\r\n      done();\r\n    }\r\n  },\r\n\r\n});\r\n\r\n\r\n/**\r\n * Supplement signed-in user's originalLoc (in support of re-setting\r\n * \"guest\" users on sign-out.\r\n */\r\n// ?? OBSOLETE:\r\n//? export const supplementSignedInUserLoc = createLogic({\r\n//? \r\n//?   name: `${_auth}.supplementSignedInUserLoc`,\r\n//?   type: String(_authAct.signIn.complete),\r\n//? \r\n//?   transform({getState, action, fassets}, next, reject) {\r\n//?     action.user.originalLoc = fassets.sel.getLocation(getState());\r\n//?     next(action);\r\n//?   },\r\n//? \r\n//? });\r\n\r\n\r\n/**\r\n * Supplement signIn complete action by triggering profile.changed action,\r\n * causing eateries view to populate.\r\n */\r\nexport const supplementSignInComplete = createLogic({\r\n\r\n  name: `${_auth}.supplementSignInComplete`,\r\n  type: String(_authAct.signIn.complete),\r\n\r\n  process({getState, action}, dispatch, done) {\r\n    // NOTE: Currently, this is the only place where userProfileChanged is dispatched.\r\n    //       It stimulates the eateries view to get the ball rolling (displaying the correct pool)\r\n    //       In the future, userProfileChanged is dispatched dynamically, when the user has the ability to change their pool.\r\n    dispatch( _authAct.userProfileChanged(action.user) ); // use the same user from our our monitored action!!\r\n    done();\r\n  },\r\n\r\n});\r\n\r\n\r\n/**\r\n * SignIn cleanup.\r\n */\r\nexport const signInCleanup = createLogic({\r\n\r\n  name: `${_auth}.signInCleanup`,\r\n  type: String(_authAct.signIn.complete),\r\n\r\n  process({getState, action}, dispatch, done) {\r\n    // console.log(`xx logic ${featureName}.signInCleanup: user.status: '${curUser(getState()).getAuthStatus()}'`);\r\n    dispatch( _authAct.signIn.close() ); // we are done with our signIn form\r\n    done();\r\n  },\r\n\r\n});\r\n\r\n\r\n/**\r\n * Check to see if account email has been verified.\r\n */\r\nexport const checkEmailVerified = createLogic({\r\n\r\n  name: `${_auth}.checkEmailVerified`,\r\n  type: String(_authAct.signIn.checkEmailVerified),\r\n\r\n  async transform({getState, action, fassets}, next, reject) {\r\n    try {\r\n      // fetch the most up-to-date user\r\n      const user = await fassets.authService.refreshUser();\r\n\r\n      if (user.emailVerified) {\r\n        toast({ msg:`your email has been verified: ${curUser(getState()).email}` });\r\n      }\r\n      else {\r\n        toast.warn({ msg:`your email has NOT YET been verified: ${curUser(getState()).email}` });\r\n      }\r\n\r\n      // supplement action with the most up-to-date user\r\n      action.user = user;\r\n      \r\n      // continue the action\r\n      next(action);\r\n    }\r\n    catch(err) {\r\n      // report unexpected error to user\r\n      discloseError({err});\r\n\r\n      // nix the entire action\r\n      reject();\r\n    }\r\n  },\r\n\r\n});\r\n\r\n\r\n/**\r\n * Resend Email Verification.\r\n */\r\nexport const resendEmailVerification = createLogic({\r\n\r\n  name: `${_auth}.resendEmailVerification`,\r\n  type: String(_authAct.signIn.resendEmailVerification),\r\n\r\n  transform({getState, action, fassets}, next) {\r\n    toast({ msg:`resending email to: ${curUser(getState()).email}` });\r\n    fassets.authService.resendEmailVerification()\r\n    next(action);\r\n  },\r\n\r\n});\r\n\r\n\r\n/**\r\n * Supplement signOut action with active user (in support of re-setting\r\n * \"guest\" users on sign-out.\r\n */\r\nexport const supplementSignOutUser = createLogic({\r\n\r\n  name: `${_auth}.supplementSignOutUser`,\r\n  type: String(_authAct.signOut),\r\n\r\n  transform({getState, action, fassets}, next, reject) {\r\n    action.user = curUser(getState());\r\n    next(action);\r\n  },\r\n\r\n});\r\n\r\n\r\n/**\r\n * SignOut logic.\r\n */\r\nexport const signOut = createLogic({\r\n\r\n  name: `${_auth}.signOut`,\r\n  type: String(_authAct.signOut),\r\n\r\n  async process({getState, action, fassets}, dispatch, done) {\r\n    try {\r\n      await fassets.authService.signOut();\r\n    }\r\n    catch(err) {\r\n      // report unexpected error to user\r\n      discloseError({err});\r\n    }\r\n    finally {\r\n      removeCredentials();\r\n      done();\r\n    }\r\n  },\r\n\r\n});\r\n\r\n\r\n\r\n// promote all logic modules for this feature\r\n// ... NOTE: individual logic modules are unit tested using the named exports.\r\nexport default [\r\n\r\n  checkDeviceCredentials,\r\n  autoSignIn,\r\n  manualSignIn,\r\n\r\n  // signIn logic (NOTE: form logic just be registered BEFORE app-specific logic)\r\n  ...signInFormMeta.registrar.formLogic(), // inject the standard SignIn form-based logic modules\r\n  processSignIn,\r\n\r\n//supplementSignedInUserLoc,// ?? OBSOLETE:\r\n  signIn,\r\n  supplementSignInComplete,\r\n  signInCleanup,\r\n\r\n  checkEmailVerified,\r\n  resendEmailVerification,\r\n\r\n  supplementSignOutUser,\r\n  signOut,\r\n];\r\n","import {generateActions} from 'action-u';\r\nimport _baseUI           from './featureName';\r\n\r\nexport default generateActions.root({\r\n  [_baseUI]: { // prefix all actions with our feature name, guaranteeing they unique app-wide!\r\n\r\n    toggleUITheme: { // actions.toggleUITheme(): Action\r\n                     // > toggle the UI Theme ('light'/'dark')\r\n                     actionMeta: {},\r\n    },\r\n\r\n    setResponsiveMode: {  // actions.setResponsiveMode(responsiveMode): Action\r\n                          // > change the responsiveMode to the supplied value ('md'/'lg'/'off')\r\n                          actionMeta: {\r\n                            traits: ['responsiveMode'],\r\n                          },\r\n    },\r\n\r\n    changeView: {  // actions.changeView(viewName): Action\r\n                   // > change the curView to the supplied viewName\r\n                   actionMeta: {\r\n                     traits: ['viewName'],\r\n                   },\r\n    },\r\n\r\n  },\r\n});\r\n","/**\r\n * Expose our featureName through a mini-meta module that is\r\n * \"importable\" in all use-cases (a single-source-of-truth).\r\n */\r\nexport default 'baseUI';\r\n","import {storeItem,\r\n        fetchItem,\r\n        removeItem}   from 'util/deviceStorage';\r\n\r\n/**\r\n * Store uiTheme on local device.\r\n * \r\n * @param {string} uiTheme the UI Theme to store.\r\n */\r\nexport function storeUITheme(uiTheme) {\r\n  storeItem(uiThemeKey, uiTheme);\r\n}\r\n\r\n/**\r\n * Fetch uiTheme stored on local device (if any).\r\n * \r\n * @return {string} the persisted UI Theme (null for none).\r\n */\r\nexport function fetchUITheme() {\r\n  return fetchItem(uiThemeKey);\r\n}\r\n\r\n/**\r\n * Remove uiTheme from local device.\r\n */\r\nexport function removeUITheme() {\r\n  removeItem(uiThemeKey);\r\n}\r\n\r\nconst uiThemeKey = 'uiTheme';\r\n","import {storeItem,\r\n        fetchItem,\r\n        removeItem}   from 'util/deviceStorage';\r\n\r\n/**\r\n * Store the responsiveMode on local device.\r\n * \r\n * @param {string} responsiveMode the \"responsive mode\" to store.\r\n */\r\nexport function storeResponsiveMode(responsiveMode) {\r\n  storeItem(responsiveModeKey, responsiveMode);\r\n}\r\n\r\n/**\r\n * Fetch responsiveMode stored on local device (if any).\r\n * \r\n * @return {string} the persisted \"responsive mode\" (null for none).\r\n */\r\nexport function fetchResponsiveMode() {\r\n  return fetchItem(responsiveModeKey);\r\n}\r\n\r\n/**\r\n * Remove responsiveMode from local device.\r\n */\r\nexport function removeResponsiveMode() {\r\n  removeItem(responsiveModeKey);\r\n}\r\n\r\nconst responsiveModeKey = 'responsiveMode';\r\n","import {expandWithFassets}    from 'feature-u';\r\nimport {combineReducers}      from 'redux';\r\nimport {reducerHash}          from 'astx-redux-util';\r\nimport {slicedReducer}        from 'feature-redux';\r\nimport _baseUI                from './featureName';\r\nimport _baseUIAct             from './actions';\r\nimport {fetchUITheme}         from './uiThemeStorage';\r\nimport {fetchResponsiveMode}  from './responsiveModeStorage';\r\n\r\n\r\n// ***\r\n// *** Our feature reducer, managing our state.\r\n// ***\r\n\r\nconst reducer = slicedReducer(_baseUI, expandWithFassets( (fassets) => combineReducers({\r\n\r\n  // uiTheme: 'light'/'dark'\r\n  uiTheme: reducerHash({\r\n    [_baseUIAct.toggleUITheme]: (state, action) => state==='dark' ? 'light' : 'dark',\r\n  }, fetchUITheme() ), // initialState (default to a persistent state)\r\n\r\n  // responsiveMode: 'md'/'lg'/'off'\r\n  responsiveMode: reducerHash({\r\n    [_baseUIAct.setResponsiveMode]: (state, action) => action.responsiveMode,\r\n  }, fetchResponsiveMode() || 'sm' ), // initialState (from device storage, default to small (a tablet))\r\n\r\n  // loc: {lat, lng} ... device GPS location\r\n  curView: reducerHash({\r\n    [_baseUIAct.changeView]:   (state, action) => action.viewName,\r\n    [fassets.actions.signOut]: (state, action) => 'eateries', // AI: Innappropriate app knowledge dependancy (really part of an @@INIT app payload) ... AI: streamline in \"INITIALIZATION\" journal entry\r\n  }, 'uninitialized'), // initialState\r\n\r\n}) ) );\r\n\r\nexport default reducer;\r\n\r\n\r\n// ***\r\n// *** Various Selectors\r\n// ***\r\n\r\n/** Our feature state root (via slicedReducer as a single-source-of-truth) */\r\nconst getFeatureState           = (appState) => reducer.getSlicedState(appState);\r\nconst gfs = getFeatureState;      // ... concise alias (used internally)\r\n\r\n                                  /** UI Theme: 'light'/'dark' */\r\nexport const getUITheme         = (appState) => gfs(appState).uiTheme || 'light'; // default to 'light' (on first occurrence -or- deviceStorage() NOT supported)\r\n\r\n                                  /** Responsive Mode: 'md'/'lg'/'off' */\r\nexport const getResponsiveMode  = (appState) => gfs(appState).responsiveMode;\r\n\r\n                                  /** current view (ex: 'eateries') */\r\nexport const curView            = (appState) => gfs(appState).curView;\r\n","import {useTheme}           from '@material-ui/core/styles';\r\nimport useMediaQuery        from '@material-ui/core/useMediaQuery';\r\nimport {useSelector}        from 'react-redux'\r\nimport {getResponsiveMode}  from 'features/common/baseUI/state'\r\n\r\n\r\n/**\r\n * A react hook promoting a boolean indicator (true/false) as to\r\n * whether the device's width represents a typical cell phone.\r\n * \r\n * @return {boolean} see description (above)\r\n */\r\nexport function useForCellPhone() {\r\n  const theme       = useTheme();\r\n  const isCellPhone = useMediaQuery(theme.breakpoints.down('xs')); // available breakpoints: xs/sm/md/lg/xl\r\n\r\n  return isCellPhone;\r\n}\r\n\r\n\r\n/**\r\n * A react hook promoting a boolean indicator (true/false) as to\r\n * whether the device's width is sufficient to be considered a tablet\r\n * (or greater - such as a desktop).\r\n *\r\n * @return {boolean} see description (above)\r\n *\r\n * @deprecated ... currently NOT used\r\n */\r\nexport function useForTabletPlus() {\r\n  const theme        = useTheme();\r\n  const isTabletPlus = useMediaQuery(theme.breakpoints.up('md')); // breakpoints: xs/sm/md/lg/xl\r\n\r\n  return isTabletPlus;\r\n}\r\n\r\n\r\n/**\r\n * A react hook promoting a boolean indicator (true/false) as to\r\n * whether the device's width is sufficient to be filled with more\r\n * content (such as a tablet or desktop).\r\n *\r\n * This algorithm is based on the breakpoint defined in the\r\n * reactiveMOde state, which can be controlled by the user -AND-\r\n * disabled.\r\n *\r\n * @return {boolean} see description (above)\r\n */\r\n\r\nexport function useForWiderDevice() {\r\n  const responsiveMode  = useSelector( (appState) => getResponsiveMode(appState), [] );\r\n  const theme           = useTheme();\r\n  const isWiderDevice   = useMediaQuery(theme.breakpoints.up(responsiveMode)); // NOTE: theme.breakpoints.up('off'): false\r\n\r\n  return isWiderDevice;\r\n}\r\n","import React  from 'react';\r\nimport Fade   from '@material-ui/core/Fade';\r\nimport Slide  from '@material-ui/core/Slide';\r\nimport Zoom   from '@material-ui/core/Zoom';\r\n\r\n//***\r\n//*** Common Transition components used throughout our app :-)\r\n//***\r\n\r\nexport const TransitionFade  = React.forwardRef( (props, ref) => <Fade  ref={ref} timeout=\"1000\"                   {...props} /> );\r\nexport const TransitionSlide = React.forwardRef( (props, ref) => <Slide ref={ref} direction=\"right\" timeout=\"1000\" {...props} /> );\r\nexport const TransitionZoom  = React.forwardRef( (props, ref) => <Zoom  ref={ref} timeout=\"1000\"                   {...props} /> );\r\n","import React,\r\n       {useCallback}     from 'react';\r\n\r\nimport {useSelector,\r\n        useDispatch}     from 'react-redux'\r\nimport {makeStyles}      from '@material-ui/core/styles';\r\nimport {useForCellPhone} from 'util/responsiveBreakpoints';\r\n\r\nimport _authAct          from '../actions';\r\nimport * as _authSel     from '../state';\r\n\r\nimport Avatar            from '@material-ui/core/Avatar';\r\nimport Button            from '@material-ui/core/Button';\r\nimport CheckIcon         from '@material-ui/icons/Check';\r\nimport Dialog            from '@material-ui/core/Dialog';\r\nimport DialogContent     from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle       from '@material-ui/core/DialogTitle';\r\nimport LockIcon          from '@material-ui/icons/LockOpen';\r\nimport MailIcon          from '@material-ui/icons/Mail';\r\nimport SignOutIcon       from '@material-ui/icons/ExitToApp';\r\nimport Typography        from '@material-ui/core/Typography';\r\nimport {TransitionZoom}  from 'util/Transition';\r\nimport CenterItems       from 'util/CenterItems';\r\n\r\n\r\n/**\r\n * SignInVerifyScreen requesting email verification completion.\r\n */\r\nexport default function SignInVerifyScreen() {\r\n\r\n  const email = useSelector((appState) => _authSel.curUser(appState).email, []);\r\n\r\n  const dispatch                = useDispatch();\r\n  const checkEmailVerified      = useCallback(() => dispatch( _authAct.signIn.checkEmailVerified() ),      [dispatch]);\r\n  const resendEmailVerification = useCallback(() => dispatch( _authAct.signIn.resendEmailVerification() ), [dispatch]);\r\n  const signOut                 = useCallback(() => dispatch( _authAct.signOut() ),                        [dispatch]);\r\n  const isCellPhone             = useForCellPhone();\r\n  const classes                 = useStyles();\r\n\r\n  return (\r\n    <Dialog open={true}\r\n            fullScreen={isCellPhone}\r\n            TransitionComponent={TransitionZoom}>\r\n\r\n      <DialogTitle disableTypography className={classes.titleBar}>\r\n        <Typography className={classes.title} variant=\"h6\" color=\"inherit\" noWrap>\r\n          Visualize It\r\n        </Typography>\r\n      </DialogTitle>\r\n\r\n      <DialogContent>\r\n\r\n        <CenterItems>\r\n          <Avatar className={classes.lockAvatar}>\r\n            <LockIcon/>\r\n          </Avatar>\r\n        </CenterItems>\r\n        <CenterItems>\r\n          <Typography variant=\"h6\" noWrap>\r\n            Sign In Verification\r\n          </Typography>\r\n        </CenterItems>\r\n\r\n        <DialogContentText className={classes.entry}>\r\n          Your account email has not been verified.\r\n        </DialogContentText>\r\n\r\n        <DialogContentText className={classes.entry}>\r\n          Please follow the instructions from the email sent to: {email}\r\n        </DialogContentText>\r\n\r\n        <div className={classes.entry}>\r\n          <CenterItems>\r\n            <Typography variant=\"body2\">\r\n              ... once completed:\r\n            </Typography>\r\n          </CenterItems>\r\n          <CenterItems>\r\n            <Button variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={checkEmailVerified}>\r\n              <CheckIcon className={classes.icon}/>\r\n              Continue\r\n            </Button>\r\n          </CenterItems>\r\n        </div>\r\n\r\n        <div className={classes.entry}>\r\n          <CenterItems>\r\n            <Button variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={resendEmailVerification}>\r\n              <MailIcon className={classes.icon}/>\r\n              Resend Email\r\n            </Button>\r\n          </CenterItems>\r\n        </div>\r\n\r\n        <div className={classes.entry}>\r\n          <CenterItems>\r\n            <Button variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={signOut}>\r\n              <SignOutIcon className={classes.icon}/>\r\n              Sign Out\r\n            </Button>\r\n          </CenterItems>\r\n        </div>\r\n\r\n      </DialogContent>\r\n\r\n    </Dialog>\r\n  );\r\n}\r\n\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n\r\n  titleBar: {\r\n    display:         'flex',\r\n    alignItems:      'center', // vertically align title text with close (X) to it's right (leave this even though we do NOT have a close in this dialog)\r\n    padding:         '10px 15px',\r\n    color:           theme.palette.common.white,\r\n    backgroundColor: theme.palette.primary.main, // theme.palette.primary.main (bluish) or theme.palette.secondary.main (redish)\r\n  },\r\n\r\n  title: {\r\n    flexGrow: 1, // moves right-most toolbar items to the right\r\n  },\r\n\r\n  lockAvatar: {\r\n    margin:          theme.spacing(1),\r\n    backgroundColor: theme.palette.primary.main,\r\n  },\r\n\r\n  entry: {\r\n    margin:   '30px 0px',\r\n  },\r\n\r\n  icon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  \r\n  inProgress: {\r\n    margin: theme.spacing(4),\r\n  },\r\n\r\n}) );\r\n","import React        from 'react';\r\nimport TextField    from '@material-ui/core/TextField';\r\nimport PropTypes    from 'prop-types';\r\nimport verify       from 'util/verify';\r\n\r\n/**\r\n * An IForm text input element that:\r\n *   - defines a common visualization,\r\n *   - manifests validation messages,\r\n *   - interfacing with IForm (accessors, and handlers)\r\n *\r\n * Usage:\r\n *   <ITextField fieldName=\"myFieldName\" ... the IFormMeta fieldName\r\n *               iForm={IForm}\r\n *               ... extra props from material-ui TextField comp\r\n *                   EX:\r\n *                   autoFocus\r\n *                   type=\"number\"\r\n *                   helperText=\"... help text here\"/>\r\n *                   ... etc.\r\n */\r\nexport default function ITextField({fieldName, iForm, ...extraProps}) {\r\n\r\n  // validate properties\r\n  const check = verify.prefix('<ITextField> property violation: ')\r\n\r\n  // ... fieldName\r\n  check(fieldName, 'fieldName is required');\r\n\r\n  // ... iForm\r\n  check(iForm, 'iForm is required');\r\n  check(iForm.handleFieldTouched, `iForm prop MUST be an IFormMeta object ... in fieldName: '${fieldName}'`); // NOTE: duck type check\r\n\r\n  // ... fieldName must be defined in iForm\r\n  const fieldLabel = iForm.getLabel(fieldName);\r\n  check(fieldLabel, `supplied fieldName '${fieldName}' does NOT exist in the supplied iForm: '${iForm.getLabel()}'`);\r\n\r\n  // ... insure NO clashes with props we use internally\r\n  //     NOTE: we allow helperText to be supplied (and overwrite on error situations)\r\n  ['label', 'value', 'disabled', 'onChange', 'onBlur', 'error'].forEach(\r\n    (prop) => check(!extraProps[prop], `'${prop}' prop cannot be used (it is managed internally) ... for fieldName: '${fieldName}'`)\r\n  );\r\n\r\n  // compute field success/error adornments\r\n  // ... dynamically exposed based on user field touches\r\n  const managedProps = {};\r\n  if (iForm.isValidationExposed(fieldName)) {\r\n    const fieldMsg = iForm.getMsg(fieldName);   // null/undefined for NO msg (i.e. valid/clean)\r\n    if (fieldMsg) { // error adornment\r\n      managedProps.error      = true;     // mark field with error color\r\n      managedProps.helperText = fieldMsg; // overwrite helperText to hold the field error message\r\n    }\r\n  }\r\n\r\n  // emit an ITextField that is auto-wired to the supplied iForm\r\n  return (\r\n    <TextField label={fieldLabel}\r\n               value={iForm.getValue(fieldName)}\r\n               disabled={iForm.inProcess()}\r\n               onChange={(event) => iForm.handleFieldChanged(fieldName, event.target.value)}\r\n               onBlur={() => iForm.handleFieldTouched(fieldName)}\r\n               {...extraProps}\r\n               {...managedProps}/>\r\n  );\r\n}\r\n\r\nITextField.propTypes = {\r\n  fieldName:    PropTypes.string.isRequired,\r\n  iForm:        PropTypes.any.isRequired,\r\n};\r\n","import React             from 'react';\r\n\r\nimport {useSelector,\r\n        useDispatch}     from 'react-redux'\r\nimport {makeStyles}      from '@material-ui/core/styles';\r\nimport {useForCellPhone} from 'util/responsiveBreakpoints';\r\n\r\nimport signInFormMeta    from '../signInFormMeta';\r\nimport ITextField        from 'util/iForms/comp/ITextField';\r\nimport {toast}           from 'util/notify';\r\n\r\nimport Avatar            from '@material-ui/core/Avatar';\r\nimport Button            from '@material-ui/core/Button';\r\nimport Dialog            from '@material-ui/core/Dialog';\r\nimport DialogContent     from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle       from '@material-ui/core/DialogTitle';\r\nimport FormHelperText    from '@material-ui/core/FormHelperText';\r\nimport InProgress        from '@material-ui/core/LinearProgress';  // -or- '@material-ui/core/CircularProgress';\r\nimport LockIcon          from '@material-ui/icons/LockOpen';\r\nimport SignInIcon        from '@material-ui/icons/ExitToApp';\r\nimport Typography        from '@material-ui/core/Typography';\r\nimport {TransitionZoom}  from 'util/Transition';\r\nimport CenterItems       from 'util/CenterItems';\r\n\r\n\r\n/**\r\n * SignInScreen: gather user sign-in credentials.\r\n */\r\nexport default function SignInScreen() {\r\n\r\n  const dispatch    = useDispatch();\r\n  const formState   = useSelector((appState) => signInFormMeta.formStateSelector(appState), []);\r\n  const isCellPhone = useForCellPhone();\r\n  const classes     = useStyles();\r\n\r\n  const iForm = signInFormMeta.IForm(formState, dispatch); // AI: unsure if I should wrap in useMemo()\r\n\r\n  const formLabel     = iForm.getLabel();\r\n  const formInProcess = iForm.inProcess();\r\n  const formErrMsg    = iForm.getMsg();\r\n\r\n  return (\r\n    <Dialog open={true}\r\n            fullScreen={isCellPhone}\r\n            TransitionComponent={TransitionZoom}>\r\n\r\n      <DialogTitle disableTypography className={classes.titleBar}>\r\n        <Typography className={classes.title} variant=\"h6\" color=\"inherit\" noWrap>\r\n          Visualize It\r\n        </Typography>\r\n      </DialogTitle>\r\n\r\n      <DialogContent>\r\n\r\n        <form onSubmit={iForm.handleProcess}>\r\n          <fieldset className={classes.invisible} disabled={formInProcess}>\r\n\r\n            <CenterItems>\r\n              <Avatar className={classes.lockAvatar}>\r\n                <LockIcon/>\r\n              </Avatar>\r\n            </CenterItems>\r\n            <CenterItems>\r\n              <Typography variant=\"h6\" noWrap>\r\n                {formLabel}\r\n              </Typography>\r\n            </CenterItems>\r\n\r\n            <DialogContentText className={classes.entry}>\r\n              Welcome to Visualize It ... please {formLabel}!\r\n            </DialogContentText>\r\n\r\n            <div className={classes.entry}>\r\n              <ITextField fieldName=\"email\"\r\n                          iForm={iForm}\r\n                          autoFocus\r\n                          required\r\n                          fullWidth\r\n                          type=\"email\"\r\n                          placeholder=\"jon.snow@gmail.com\"\r\n                          helperText=\"your email is your ID\"/>\r\n            </div>\r\n\r\n            <div className={classes.entry}>\r\n              <ITextField fieldName=\"pass\"\r\n                          iForm={iForm}\r\n                          required\r\n                          fullWidth\r\n                          type=\"password\"/>\r\n            </div>\r\n\r\n            <CenterItems>\r\n              <Button type=\"submit\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\">\r\n                <SignInIcon className={classes.icon}/>\r\n                {formLabel}\r\n              </Button>\r\n            </CenterItems>\r\n            <FormHelperText error>{formErrMsg}</FormHelperText>\r\n\r\n            {formInProcess && (\r\n               <div className={classes.entry}>\r\n                 <InProgress className={classes.inProgress} color=\"secondary\"/>\r\n               </div>\r\n             )}\r\n\r\n            <div className={classes.entry}>\r\n              <CenterItems>\r\n                <Typography variant=\"body2\" color=\"secondary\">\r\n                  ... don't have an account?\r\n                </Typography>\r\n              </CenterItems>\r\n              <CenterItems>\r\n                <Button variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        onClick={()=>toast.warn({ msg:'Sign Up has not yet been implemented.' })}>\r\n                  <SignInIcon className={classes.icon}/>\r\n                  Sign Up\r\n                </Button>\r\n              </CenterItems>\r\n            </div>\r\n\r\n          </fieldset>\r\n        </form>\r\n\r\n      </DialogContent>\r\n\r\n    </Dialog>\r\n  );\r\n\r\n}\r\n\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n  titleBar: {\r\n    display:         'flex',\r\n    alignItems:      'center', // vertically align title text with close (X) to it's right (leave this even though we do NOT have a close in this dialog)\r\n    padding:         '10px 15px',\r\n    color:           theme.palette.common.white,\r\n    backgroundColor: theme.palette.primary.main, // theme.palette.primary.main (bluish) or theme.palette.secondary.main (redish)\r\n  },\r\n\r\n  title: {\r\n    flexGrow: 1, // moves right-most toolbar items to the right\r\n  },\r\n\r\n  lockAvatar: {\r\n    margin:          theme.spacing(1),\r\n    backgroundColor: theme.palette.primary.main,\r\n  },\r\n\r\n  entry: {\r\n    margin:   '30px 0px',\r\n  },\r\n\r\n  // our fieldset is strictly strictly to disable all inputs/submit when form is in-process\r\n  invisible: {\r\n    border:  '0 none',\r\n    margin:  0,\r\n    padding: 0,\r\n  },\r\n\r\n  icon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  \r\n  inProgress: {\r\n    margin: theme.spacing(4),\r\n  },\r\n\r\n}) );\r\n","import React, {useState} from 'react';\r\nimport PropTypes         from 'prop-types';\r\n\r\nimport {makeStyles}      from '@material-ui/core/styles';\r\nimport {useForCellPhone} from 'util/responsiveBreakpoints';\r\n\r\nimport Button            from '@material-ui/core/Button';\r\nimport Progress          from '@material-ui/core/LinearProgress';  // -or- '@material-ui/core/CircularProgress';\r\nimport Dialog            from '@material-ui/core/Dialog';\r\nimport DialogContent     from '@material-ui/core/DialogContent';\r\nimport DialogTitle       from '@material-ui/core/DialogTitle';\r\nimport Typography        from '@material-ui/core/Typography';\r\nimport {TransitionZoom}  from 'util/Transition';\r\nimport {alert}           from 'util/notify';\r\n\r\n\r\n/**\r\n * A modal SplashScreen used when there is nothing else to display :-)\r\n *\r\n * The SplashScreen will responsively/dynamically utilize the full\r\n * screen for cell phone devices.\r\n *\r\n * The SplashScreen can be instantiated with a direct message to display:\r\n * ```js\r\n * <SplashScreen msg=\"hello world\" [err={error}]/>\r\n * ```\r\n * \r\n * In support of the programmatic API, a single SplashScreen must be statically\r\n * instantiated in the root of your DOM (without any msg):\r\n * ```js\r\n * <SplashScreen/>\r\n * ```\r\n *\r\n * Supporting the following programmatic API:\r\n * ```js\r\n *   + splash(msg, [err]): void ... display the supplied msg/err in the programmatic SplashScreen\r\n *   + splash(): void           ... clear the programmatic SplashScreen\r\n * ```\r\n */\r\nexport default function SplashScreen({msg, err}) {\r\n\r\n  const isCellPhone = useForCellPhone();\r\n  const classes     = useStyles();\r\n\r\n  // conditionally render SplashScreenProgrammatic when NO msg is supplied\r\n  return msg ? <SplashScreenCommon msg={msg} err={err} open={true} fullScreen={isCellPhone} classes={classes}/>\r\n             : <SplashScreenProgrammatic                           fullScreen={isCellPhone} classes={classes}/>;\r\n}\r\n\r\nSplashScreen.propTypes = {\r\n  msg: PropTypes.string,\r\n  err: PropTypes.object,\r\n};\r\n\r\nSplashScreen.defaultProps = {\r\n  msg: '',\r\n  err: null,\r\n};\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n  title: {\r\n    color:           theme.palette.common.white,\r\n    backgroundColor: theme.palette.primary.main, // theme.palette.primary.main (bluish) or theme.palette.secondary.main (redish)\r\n  },\r\n\r\n  progress: {\r\n    margin: theme.spacing(4),\r\n  },\r\n}) );\r\n\r\n\r\n// ***\r\n// *** Our programmatic API (see docs above)\r\n// ***\r\n\r\n// <SplashScreenProgrammatic fullScreen= classes= />\r\nfunction SplashScreenProgrammatic({fullScreen, classes}) {\r\n\r\n  // maintain our programmatic state ... the msg/err to display\r\n  const [splashState, setSplashState] = useState({\r\n    msg: '',\r\n    err: null,\r\n  });\r\n\r\n  // broaden the scope of our splashState setter (used in our `splash(msg, [err])` programmatic API)\r\n  if (_setSplashState && _setSplashState!==setSplashState) { // validate that only one instance exists\r\n    throw new Error('***ERROR*** <SplashScreen/> (supporting the programmatic `splash(msg, [err])` API) should only be instantiated ONE TIME (in the app root DOM)');\r\n  }\r\n  _setSplashState = setSplashState; // THIS should work ... no need for: _setSplashState = useCallback(...);\r\n\r\n  // render our component\r\n  return <SplashScreenCommon msg={splashState.msg} err={splashState.err} open={splashState.msg ? true : false} fullScreen={fullScreen} classes={classes} />;\r\n}\r\n\r\n// our programmatic API\r\nexport function splash(msg='', err=null) {\r\n  // implement in terms of <SplashScreenProgrammatic> state\r\n  if (!_setSplashState) {\r\n    throw new Error('***ERROR*** the programmatic `splash(msg, [err])` API requires <SplashScreen/> be instantiated in the app root DOM');\r\n  }\r\n  _setSplashState({msg, err});\r\n}\r\nlet _setSplashState = null; // expose our inner function\r\n\r\n\r\n// ***\r\n// *** Our \"common\" rendering agent shared by BOTH `<SplashScreen>` and `<SplashScreenProgrammatic>`\r\n// ***\r\n\r\nlet _errLastReported = null;\r\n\r\n// <SplashScreenCommon msg= open= fullScreen= classes= />\r\nfunction SplashScreenCommon({msg, err, open, fullScreen, classes}) {\r\n\r\n  // setup any error rendering constructs\r\n  const errCntl = !err ? null : (\r\n    <>\r\n      <br/>\r\n      <Typography variant=\"subtitle2\" color=\"secondary\">Encountered ERROR: {err.formatUserMsg()}</Typography>\r\n      <Button variant=\"contained\" color=\"secondary\" onClick={handleErr}>\r\n        <Typography variant=\"subtitle2\">Show Detail</Typography>\r\n      </Button>\r\n    </>\r\n  );\r\n  function handleErr() {\r\n    alert.error({ msg: `An unexpected error occurred:\r\n\r\n${err}\r\n\r\nIf this problem persists, please contact your tech support.`\r\n    });\r\n  }\r\n\r\n  // when supplied, log the details of the error (with traceback) for tech review\r\n  // NOTE 1: we refrain from using console.warn() and console.error() \r\n  //         because of BAD semantics inferred by react-native/expo:\r\n  //          - console.warn():  generates yellow popup\r\n  //          - console.error(): kills app with \"red screen of death\"\r\n  // NOTE 2: react-native/expo appears to be doing something non standard\r\n  //         when passing error as the 2nd parameter of log():\r\n  //             log('msg', error)\r\n  //         ... in this case is merely emitting error.toString()\r\n  //         ... we can however receive a stack trace by calling log(error) as the first parameter\r\n  if (err && err !== _errLastReported) {\r\n    _errLastReported = err;\r\n    const prefix = err.isUnexpected() ? '*** Unexpected Error:\\n\\n' : '*** Expected Error:\\n\\n';\r\n    console.log(prefix + err);\r\n    if (err.isUnexpected()) { // produce stack traces only for unexpected errors\r\n      console.log('Stack Trace ...');\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  // render our component\r\n  return (\r\n    <Dialog open={open}\r\n            fullScreen={fullScreen}\r\n            TransitionComponent={TransitionZoom}>\r\n      \r\n      <DialogTitle className={classes.title}>\r\n        <center className={classes.title}>Visualize It</center>\r\n      </DialogTitle>\r\n      \r\n      <DialogContent>\r\n        <center>\r\n          <br/>\r\n          <img width=\"120px\" src='/visualize-it-logo.png' alt='visualize-it'/>\r\n          <br/>\r\n          <Progress className={classes.progress} color=\"secondary\"/>\r\n          <Typography variant=\"body2\">{msg}</Typography>\r\n          {errCntl}\r\n          <br/>\r\n        </center>\r\n      </DialogContent>\r\n      \r\n    </Dialog>\r\n  );\r\n}\r\n","import React               from 'react';\r\nimport * as _authSel       from './state';\r\nimport {featureRoute, \r\n        PRIORITY}          from 'feature-router';\r\n\r\nimport SignInVerifyScreen  from './comp/SignInVerifyScreen';\r\nimport SignInScreen        from './comp/SignInScreen';\r\nimport SplashScreen        from 'util/SplashScreen';\r\n\r\n// ***\r\n// *** The routes for this feature.\r\n// ***\r\n\r\nexport default featureRoute({\r\n\r\n  priority: PRIORITY.HIGH,\r\n\r\n  content({fassets, appState}) {\r\n\r\n    const user = _authSel.curUser(appState);\r\n\r\n    // when user is FULLY signedIn/verified\r\n    // ... allow down-stream features to route further (i.e. app-specific screens)\r\n    if (user.isUserSignedIn()) {\r\n      return null;\r\n    }\r\n\r\n    // when user is signed in BUT unverified\r\n    // ... display email verification screen\r\n    if (user.isUserSignedInUnverified()) {\r\n      return <SignInVerifyScreen/>;\r\n    }\r\n\r\n\r\n    // ***\r\n    // *** at this point we know user is unauthorized (either signed out, or in-transition)\r\n    // ***\r\n\r\n    // display interactive SignIn, when form is active (accomplished by our logic)\r\n    if (_authSel.isSignInFormActive(appState)) {\r\n      return <SignInScreen/>;\r\n    }\r\n\r\n    // display interactive SignUp, when form is active (accomplished by our logic)\r\n    // TODO: check for signUpForm (WHEN SUPPORTED)\r\n    \r\n    // fallback: communicate route transition condition\r\n    // NOTES:\r\n    //  1) we MUST issue a route to prevent downstream feature visualization too early\r\n    //  2) it can occur under the following conditions:\r\n    //     a) a slow server-side sign-in process\r\n    //        ... and so the message wording should NOT convey an error\r\n    //     b) during transition between startup/auth features\r\n    //        ... where logic is in the process of activating one of the auth form screens\r\n    //        ... and so the message wording should NOT convey an error\r\n    //     c) an error condition (say some change that impacts our route logic)\r\n    //        ... this is an unexpected condition\r\n    //        ... SO, we expose the user-status context in the message (for diagnostics)\r\n    const msg = `authorization in progress (${user.getAuthStatus()})`;\r\n    return <SplashScreen msg={msg}/>;\r\n  },\r\n\r\n});\r\n","import React,\r\n       {useState,\r\n        useCallback,\r\n        useMemo}      from 'react';\r\nimport PropTypes      from 'prop-types';\r\n\r\nimport {useFassets}   from 'feature-u';\r\n\r\nimport IconButton     from '@material-ui/core/IconButton';\r\nimport Menu           from '@material-ui/core/Menu';\r\nimport UserIcon       from '@material-ui/icons/AccountCircle';\r\nimport Typography     from '@material-ui/core/Typography';\r\n\r\n\r\n/**\r\n * UserMenu: our UserMenu component that accumulates menu items via use contract.\r\n */\r\nexport default function UserMenu({curUser}) {\r\n\r\n  const [anchorUserMenu, setAnchorUserMenu] = useState(null);\r\n  const userMenuOpen = useMemo(() => Boolean(anchorUserMenu), [anchorUserMenu]);\r\n\r\n  const openUserMenu = useCallback((event) => setAnchorUserMenu(event.currentTarget), []);\r\n  _closeUserMenu     = useCallback(()      => setAnchorUserMenu(null),                []);\r\n\r\n  const userMenuItems        = useFassets('AppMotif.UserMenuItem.*@withKeys');\r\n  const orderedUserMenuItems = useMemo(() => (\r\n    [...userMenuItems].sort(([item1Key], [item2Key]) => item1Key.localeCompare(item2Key))\r\n  ), [userMenuItems]);\r\n\r\n  return (\r\n    <div>\r\n      <IconButton color=\"inherit\"\r\n                  onClick={openUserMenu}>\r\n        <UserIcon/>\r\n        <Typography variant=\"subtitle2\" color=\"inherit\" noWrap>\r\n          &nbsp;{curUser.name}\r\n        </Typography>\r\n      </IconButton>\r\n      <Menu anchorEl={anchorUserMenu}\r\n            anchorOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'right',\r\n            }}\r\n            transformOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'right',\r\n            }}\r\n            open={userMenuOpen}\r\n            onClose={closeUserMenu}>\r\n        {orderedUserMenuItems.map( ([fassetsKey, UserMenuItem]) => <UserMenuItem key={fassetsKey}/> )}\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n\r\nUserMenu.propTypes = {\r\n  curUser: PropTypes.object.isRequired,\r\n};\r\n\r\n\r\n\r\n/**\r\n * Utility function that closes our user menu.\r\n */\r\nexport function closeUserMenu() { // exported for use by our own: UserMenuItem\r\n  if (_closeUserMenu) {\r\n    _closeUserMenu();\r\n  }\r\n}\r\nlet _closeUserMenu = null;\r\n","import React           from 'react';\r\nimport PropTypes       from 'prop-types';\r\nimport MenuItem        from '@material-ui/core/MenuItem';\r\nimport {closeUserMenu} from './UserMenu';\r\n\r\n/**\r\n * UserMenuItem: our UserMenuItem - a MenuItem wrapper that auto-closes the UserMenu.\r\n */\r\nexport default function UserMenuItem(props) {\r\n\r\n  // value-added onClick that auto-closes the UserMenu\r\n  const myOnClick = (...args) => {\r\n    // auto-close the UserMenu\r\n    closeUserMenu()\r\n\r\n    // pass-through to client onClick()\r\n    if (props.onClick) {\r\n      props.onClick(...args);\r\n    }\r\n  };\r\n\r\n  // wrap <MenuItem>\r\n  return (\r\n    <MenuItem {...props} onClick={myOnClick}>{props.children}</MenuItem>\r\n  );\r\n}\r\n\r\nUserMenuItem.propTypes = {\r\n  children: PropTypes.node.isRequired, // UserMenuItem content is required (i.e. the label)\r\n};\r\n","import React,\r\n       {useCallback} from 'react';\r\nimport {useDispatch} from 'react-redux'\r\nimport UserMenuItem  from 'features/common/baseUI/comp/UserMenuItem';\r\nimport _authAct      from '../actions';\r\nimport {toast,\r\n        confirm}     from 'util/notify';\r\n\r\n/**\r\n * AuthUserMenu: our user-profile menu items (in the App Header)\r\n */\r\nexport default function AuthUserMenu() {\r\n\r\n  const dispatch = useDispatch();\r\n  const signOut  = useCallback(() => {\r\n    confirm.warn({ \r\n      msg: 'Are you sure you wish to sign out?', \r\n      actions: [\r\n        { txt: 'Sign Out', action: () => dispatch( _authAct.signOut() ) },\r\n        { txt: 'Go Back' }\r\n      ]\r\n    });\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <>\r\n      <UserMenuItem onClick={doL8tr}>User Profile</UserMenuItem>\r\n      <UserMenuItem onClick={signOut}>Sign Out</UserMenuItem>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction doL8tr() {\r\n  toast.warn({msg: 'NOT implemented yet (coming soon)!'})\r\n}\r\n","import {createFeature}  from 'feature-u';\r\nimport _auth            from './featureName';\r\nimport _authAct         from './actions'; // TODO: QUIRKINESS of IFormMeta (aggravated by feature-u) ... actions MUST be expanded BEFORE IFormMeta instance (signInFormMeta)\r\nimport reducer,\r\n       {curUser}        from './state';\r\nimport logic            from './logic';\r\nimport route            from './route';\r\nimport AuthUserMenu     from './comp/AuthUserMenu';\r\n\r\n// feature: auth\r\n//          promote complete user authentication service (full details in README)\r\nexport default createFeature({\r\n  name: _auth,\r\n\r\n  // our public face ...\r\n  fassets: {\r\n    define: {\r\n      // actions:\r\n      'actions.userProfileChanged': _authAct.userProfileChanged, // userProfileChanged(user) NOTE: PUBLIC for eateries to monitor, and for future use (when user can change their pool)\r\n      'actions.signOut':            _authAct.signOut,            // signOut()\r\n      'actions.signIn.complete':    _authAct.signIn.complete,    // signIn.complete(user)\r\n\r\n      // selectors:\r\n      'sel.curUser': curUser, // full blown User object\r\n    },\r\n\r\n    defineUse: {\r\n      // inject our user-profile menu items (in the App Header)\r\n      'AppMotif.UserMenuItem.cc5_AuthUserMenu': AuthUserMenu,\r\n    },\r\n  },\r\n\r\n  reducer,\r\n  logic,\r\n  route,\r\n\r\n  appDidStart({fassets, appState, dispatch}) {\r\n    // kick-start our authorization process\r\n    dispatch( _authAct.autoSignIn() );\r\n  },\r\n\r\n});\r\n","/**\r\n * AuthServiceAPI is a \"pseudo\" interface specifying the AuthService API\r\n * which all implementations (i.e. derivations) must conform.\r\n * \r\n * NOTE: This represents a persistent service, where the active user\r\n *       is retained between service invocations.\r\n */\r\nexport default class AuthServiceAPI {\r\n\r\n  /**\r\n   * Sign in to our authorization provider (asynchronously).\r\n   * \r\n   * @param {String} email the identifying user email\r\n   * @param {String} pass the user password\r\n   *\r\n   * @returns {User} the signed-in User object.  NOTE: This\r\n   * returned user may still be in an unverified state.\r\n   */\r\n  async signIn(email, pass) {\r\n    throw new Error(`***ERROR*** ${this.constructor.name}.signIn() is a required service method that has NOT been implemented`);\r\n  }\r\n\r\n\r\n  /**\r\n   * Refresh the current signed-in user (asynchronously).\r\n   *\r\n   * This method is typically used to insure the authorization status\r\n   * is up-to-date.\r\n   * \r\n   * This method can only be called, once a successful signIn() has\r\n   * completed, because of the persistent nature of this service.\r\n   * \r\n   * @returns {User} the refreshed signed-in User object.\r\n   * NOTE: The returned user may still be in an unverified state.\r\n   */\r\n  async refreshUser() {\r\n    throw new Error(`***ERROR*** ${this.constructor.name}.refreshUser() is a required service method that has NOT been implemented`);\r\n  }\r\n\r\n\r\n  /**\r\n   * Resend an email notification to the current signed-in user.\r\n   *\r\n   * This method is used, upon user request, to resend the email\r\n   * containing instructions on how to verify their identity.\r\n   * \r\n   * This method can only be called, once a successful signIn() has\r\n   * completed, because of the persistent nature of this service.\r\n   */\r\n  resendEmailVerification() {\r\n    throw new Error(`***ERROR*** ${this.constructor.name}.resendEmailVerification() is a required service method that has NOT been implemented`);\r\n  }\r\n\r\n\r\n  /**\r\n   * Sign-out the current signed-in user (asynchronously).\r\n   *\r\n   * This method can only be called, once a successful signIn() has\r\n   * completed, because of the persistent nature of this service.\r\n   */\r\n  async signOut() {\r\n    throw new Error(`***ERROR*** ${this.constructor.name}.signOut() is a required service method that has NOT been implemented`);\r\n  }\r\n\r\n};\r\n","import {createFeature} from 'feature-u';\r\nimport AuthServiceAPI  from './AuthServiceAPI';\r\n\r\n// feature: authService\r\n//          promote a persistent authentication service API (retaining\r\n//          active user) through the `authService` use contract\r\n//          (full details in README)\r\nexport default createFeature({\r\n  name: 'authService',\r\n\r\n  // our public face ...\r\n  fassets: {\r\n    use: [\r\n      ['authService', {required: true, type: objectOfTypeAuthServiceAPI}],\r\n    ],\r\n  }\r\n});\r\n\r\nfunction objectOfTypeAuthServiceAPI(fassetsValue) {\r\n  return fassetsValue instanceof AuthServiceAPI ? null : 'object of type AuthServiceAPI, NOT: ' + fassetsValue;\r\n}\r\n","// various featureFlags used throughout the application\r\nexport default {\r\n\r\n  // should app use WIFI?\r\n  // ... regulates various services (real/mocked)\r\n  useWIFI: true,\r\n\r\n  // should app emit diagnostic logs?\r\n  //  - false:     no logs\r\n  //  - true:      generate 'non verbose' logs (e.g. actions will NOT include redux state)\r\n  //  - 'verbose': generate 'verbose'     logs (e.g. actions WILL     include redux state)\r\n  log:     false,\r\n\r\n  // should app enable diagnostic sandbox controls?\r\n  sandbox: false,\r\n};\r\n","import firebase       from 'firebase/app';\r\nimport                     'firebase/auth';\r\nimport                     'firebase/database';\r\nimport AuthServiceAPI from '../authService/AuthServiceAPI';\r\nimport User           from '../authService/User';\r\n\r\n/**\r\n * AuthServiceFirebase is the **real** AuthServiceAPI derivation\r\n * using the Firebase service APIs.\r\n * \r\n * NOTE: This represents a persistent service, where the active user\r\n *       is retained between service invocations.\r\n */\r\nexport default class AuthServiceFirebase extends AuthServiceAPI {\r\n\r\n  /**\r\n   * Our \"current\" active user, retained between service invocations,\r\n   * null for none (i.e. signed-out).\r\n   * \r\n   * NOTE: Firebase also maintains it's rendition of current user,\r\n   *       available via `firebase.auth().currentUser`.  However, this\r\n   *       service supplements the user with additional information\r\n   *       from the app's DB userProfile.\r\n   */\r\n  currentAppUser = null; // type: User (our application User object)\r\n\r\n  /**\r\n   * Sign in to our authorization provider (asynchronously).\r\n   * \r\n   * @param {String} email the identifying user email\r\n   * @param {String} pass the user password\r\n   *\r\n   * @returns {User} the signed-in User object.  NOTE: This\r\n   * returned user may still be in an unverified state.\r\n   */\r\n  async signIn(email, pass) {\r\n\r\n    // detect guest signin and return immediately\r\n    if (pass === 'guestNO' && email.indexOf('guestNO@') === 0) { // New Orleans guest ... ex: guestNO@gmail.com/guestNO\r\n      // NOTE: appears to be working without a delay from say a timeout\r\n      this.currentAppUser = new User({\r\n        name:          'Harry',\r\n        email,\r\n        emailVerified: true,\r\n        pool:          'mockNO',\r\n        guestLoc:      {lat: 30.010479, lng: -90.119414}, // New Orleans, LA\r\n      });\r\n      return this.currentAppUser;\r\n    }\r\n    \r\n    try {\r\n      // signin through firebase authentication\r\n      //    fbUser:  <firebase.User>: https://firebase.google.com/docs/reference/js/firebase.User\r\n      //    same as: firebase.auth().currentUser\r\n      const userCredential = await firebase.auth().signInWithEmailAndPassword(email, pass);\r\n      const fbUser         = userCredential.user;\r\n\r\n      // supplement the signed-in fbUser with our app's DB userProfile\r\n      const dbRef = firebase.database().ref(`/userProfiles/${fbUser.uid}`);\r\n      try { // detect user profile issue\r\n        const snapshot    = await dbRef.once('value');\r\n        const userProfile = snapshot.val();\r\n        // console.log(`xx AuthServiceFirebase.signIn() userProfile: `, userProfile)\r\n        \r\n        // communicate issue: missing userProfile in our DB\r\n        if (!userProfile) {\r\n          throw new Error(`***ERROR*** No userProfile exists for user: ${fbUser.user.email}`)\r\n                      .defineAttemptingToMsg('sign in to app (your user profile does NOT exist)');\r\n        }\r\n        \r\n        // retain/communicate our user object, populated from both the fbUser and userProfile\r\n        this.currentAppUser = new User({\r\n          name:          userProfile.name,\r\n          email:         fbUser.email,\r\n          emailVerified: fbUser.emailVerified,\r\n          pool:          userProfile.pool,\r\n        });\r\n        // console.log(`xx MOCK RECORDING from AuthServiceFirebase.signIn(...): returning User: ${JSON.stringify(this.currentAppUser.toStruct())}`);\r\n        return this.currentAppUser;\r\n      }\r\n      catch(err) { // user profile issue\r\n        // re-throw enhanced err\r\n        if (!err.attemptingToMsg) // ... qualify only if NOT done above\r\n          err.defineAttemptingToMsg('sign in to app (a problem was encountered fetching your user profile)');\r\n        throw err;\r\n      }\r\n    }\r\n    catch(err) { // general issue\r\n      // NOTE: When firebase:\r\n      //       - provides an err.code, this enumerates a user specific credentials problem (like \"invalid password\")\r\n      //         ... we do NOT expose this to the user (so as to NOT give hacker insight)\r\n      //             rather we generalize it to the user ('Invalid SignIn credentials.')\r\n      //       - when NO err.code is supplied, it represents an unexpected condition\r\n      if (err.code) { // expected condition\r\n        err.defineUserMsg('Invalid SignIn credentials.'); // make generic ... do NOT expose err.code to the user\r\n      }\r\n      else { // unexpected condition\r\n        if (!err.attemptingToMsg) // ... qualify only if NOT done above\r\n          err.defineAttemptingToMsg('sign in to app');\r\n      }\r\n\r\n      // re-throw enhanced err\r\n      throw err;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Refresh the current signed-in user (asynchronously).\r\n   *\r\n   * This method is typically used to insure the authorization status\r\n   * is up-to-date.\r\n   * \r\n   * This method can only be called, once a successful signIn() has\r\n   * completed, because of the persistent nature of this service.\r\n   * \r\n   * @returns {User} the refreshed signed-in User object.\r\n   * NOTE: The returned user may still be in an unverified state.\r\n   */\r\n  async refreshUser() {\r\n\r\n    // verify we have a current user to refresh\r\n    if (this.currentAppUser === null) {\r\n      // unexpected condition\r\n      throw new Error('***ERROR*** (within app logic) AuthServiceFirebase.refreshUser(): may only be called once a successful signIn() has completed.')\r\n              .defineAttemptingToMsg('refresh a non-existent user (not yet signed in)');\r\n    }\r\n\r\n    try {\r\n      // refresh our current signed-in user\r\n      await firebase.auth().currentUser.reload();\r\n\r\n      // NOTE: the service (above) returns void\r\n      //       ... however, the firebase.auth().currentUser has been updated!\r\n      const fbUser = firebase.auth().currentUser;\r\n\r\n      // refresh our signed-in user\r\n      // ... just for good measure, we create a new instance of this.currentAppUser, rather than mutating the existing one\r\n      //     - just in case it is held directly in redux\r\n      //     - even though client SHOULD use user.toStruct()\r\n      this.currentAppUser = new User({\r\n        name:          this.currentAppUser.name,  // keep same (from our db profile)\r\n        email:         fbUser.email,              // refresh   (from current firebase auth)\r\n        emailVerified: fbUser.emailVerified,      // refresh   (from current firebase auth)\r\n        pool:          this.currentAppUser.pool,  // keep same (from our db profile)\r\n      });\r\n\r\n      // communicate our refreshed signed-in user\r\n      return this.currentAppUser;\r\n    }\r\n    catch(err) {\r\n      // re-throw enhanced err\r\n      throw err.defineAttemptingToMsg('refresh the signed-in user');\r\n    }\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Resend an email notification to the current signed-in user.\r\n   *\r\n   * This method is used, upon user request, to resend the email\r\n   * containing instructions on how to verify their identity.\r\n   * \r\n   * This method can only be called, once a successful signIn() has\r\n   * completed, because of the persistent nature of this service.\r\n   */\r\n  resendEmailVerification() {\r\n    // verify we have a current user to resend to\r\n    if (this.currentAppUser === null) {\r\n      // unexpected condition\r\n      throw new Error('***ERROR*** (within app logic) AuthServiceFirebase.resendEmailVerification(): may only be called once a successful signIn() has completed.')\r\n        .defineAttemptingToMsg('resend an email verification to a non-existent user (not yet signed in)');\r\n    }\r\n\r\n    // issue the email request\r\n    firebase.auth().currentUser.sendEmailVerification();\r\n  }\r\n\r\n\r\n  /**\r\n   * Sign-out the current signed-in user (asynchronously).\r\n   *\r\n   * This method can only be called, once a successful signIn() has\r\n   * completed, because of the persistent nature of this service.\r\n   */\r\n  async signOut() {\r\n\r\n    // verify we have a current user to signOut\r\n    if (this.currentAppUser === null) {\r\n      // unexpected condition\r\n      throw new Error('***ERROR*** (within app logic) AuthServiceFirebase.signOut(): may only be called once a successful signIn() has completed.')\r\n              .defineAttemptingToMsg('sign-out a non-existent user (not yet signed in)');\r\n    }\r\n    \r\n    try {\r\n      // sign out of firebase\r\n      await firebase.auth().signOut();\r\n    \r\n      // reset our local User object, now that we are signed-out\r\n      this.currentAppUser = null;\r\n    }\r\n    catch(err) {\r\n      // re-throw enhanced err\r\n      throw err.defineAttemptingToMsg('sign-out the user');\r\n    }\r\n  }\r\n\r\n};\r\n","import {createFeature}     from 'feature-u';\r\nimport featureFlags        from 'featureFlags';\r\nimport AuthServiceFirebase from './AuthServiceFirebase';\r\n\r\n// feature: authServiceFirebase \r\n//          defines the real 'authService' (via the Firebase API),\r\n//          conditionally promoted when WIFI is available(i.e. **not**\r\n//          mocking)\r\nexport default createFeature({\r\n  name:    'authServiceFirebase',\r\n\r\n  enabled: featureFlags.useWIFI,\r\n\r\n  // our public face ...\r\n  fassets: {\r\n    defineUse: {\r\n      'authService': new AuthServiceFirebase(),\r\n    },\r\n  },\r\n\r\n});\r\n","import AuthServiceAPI from '../authService/AuthServiceAPI';\r\nimport User           from '../authService/User';\r\nimport featureFlags   from 'featureFlags';\r\n\r\n/**\r\n * AuthServiceMock is the **mock** AuthServiceAPI derivation.\r\n * \r\n * NOTE: This represents a persistent service, where the active user\r\n *       is retained between service invocations.\r\n */\r\nexport default class AuthServiceMock extends AuthServiceAPI {\r\n\r\n  constructor() {\r\n    super();\r\n    !featureFlags.useWIFI && console.log('***AuthServiceMock*** mocking AuthService (via AuthServiceMock)');\r\n  }\r\n\r\n  /**\r\n   * Our \"current\" active user, retained between service invocations,\r\n   * null for none (i.e. signed-out).\r\n   */\r\n  currentAppUser = null; // type: User (our application User object)\r\n\r\n\r\n  async signIn(email, pass) { // ... see AuthServiceAPI\r\n\r\n    //***\r\n    //*** stimulate various errors with variations in email/pass\r\n    //***\r\n\r\n    // unexpected condition\r\n    if (pass === 'unexpect') {\r\n      throw new Error(`***ERROR*** Simulated Unexpected Condition`)\r\n                  .defineAttemptingToMsg('sign in to app');\r\n    }\r\n\r\n    // expected condition\r\n    if (pass === 'expect') {\r\n      throw new Error(`***ERROR*** Invalid Password`) // do NOT expose details to the user (e.g. Invalid Password)\r\n                  .defineUserMsg('Invalid SignIn credentials.') // keep generic\r\n                  .defineAttemptingToMsg('sign in to app');\r\n    }\r\n\r\n    //***\r\n    //*** sign in the supplied user\r\n    //***\r\n\r\n    // define our mock user\r\n    this.currentAppUser = new User({\r\n      \"name\":          \"MockGuy\",\r\n      email,\r\n      \"emailVerified\": false,\r\n      \"pool\":          \"mock\"\r\n    });\r\n\r\n    // simulate user unverified\r\n    if (pass === 'unverify') {\r\n      return this.currentAppUser;\r\n    }\r\n\r\n    // all other cases: user is verified\r\n    this.currentAppUser.emailVerified = true;\r\n    return this.currentAppUser;\r\n\r\n  }\r\n\r\n\r\n  async refreshUser() { // ... see AuthServiceAPI\r\n    // very simple mock ... assume they have now been verified\r\n    this.currentAppUser = this.currentAppUser.clone();\r\n    this.currentAppUser.emailVerified = true;\r\n    return this.currentAppUser;\r\n  }\r\n\r\n\r\n  resendEmailVerification() { // ... see AuthServiceAPI\r\n    // NOTHING TO DO :-)\r\n  }\r\n\r\n\r\n  async signOut() { // ... see AuthServiceAPI\r\n    this.currentAppUser = null; // reset our local User object, now that we are signed-out\r\n  }\r\n\r\n};\r\n","import {createFeature}  from 'feature-u';\r\nimport featureFlags     from 'featureFlags';\r\nimport AuthServiceMock  from './AuthServiceMock';\r\n\r\n// feature: authServiceMock\r\n//          defines the mock 'authService' implementation,\r\n//          conditionally promoted when WIFI is NOT available(i.e. mocking)\r\nexport default createFeature({\r\n  name:    'authServiceMock',\r\n\r\n  enabled: !featureFlags.useWIFI,\r\n\r\n  // our public face ...\r\n  fassets: {\r\n    defineUse: {\r\n      'authService': new AuthServiceMock(),\r\n    },\r\n  },\r\n\r\n});\r\n","import firebase  from 'firebase/app';\r\nimport {decode}  from 'util/encoder';\r\n\r\n// initialize the Google Firebase service\r\n// ... a feature-u app-life-cycle-hook\r\nexport default async function initializeFirebase({showStatus, fassets, appState, dispatch}) {\r\n\r\n  // inform user what we are doing\r\n  showStatus('Initializing Firebase');\r\n  \r\n  // fetch our FireBase App Configuration from our own deployment site: `public/fbac`\r\n  const resp = await fetch('fbac'); // NOTE: relative path support server deployment in sub-directory\r\n  \r\n  // console.log(`xx resp.ok: ${resp.ok}, resp.status: ${resp.status} ... resp: `, resp);\r\n  if (!resp.ok) {\r\n    // NOTE: Due to routing considerations, a non-existent resource is allowed,\r\n    //       AND returns the entire content of index.html\r\n    //       IN OTHER WORDS: this condition is NEVER EXECUTED (i.e. resp.ok is ALWAYS true)\r\n    //       ... (see check below)\r\n    throw new Error(`**ERROR** Accessing /fbac resource was REJECTED with status: ${resp.status}`);\r\n  }\r\n  \r\n  // convert response to text\r\n  const txt = await resp.text();\r\n  \r\n  // check for non-existent resource (see NOTE above)\r\n  if (txt.includes('<html')) {\r\n    // NOTE: this is the only real error we will ever emit\r\n    throw new Error(`**ERROR** Non Existent Resource: /fbac`);\r\n  }\r\n  \r\n  // decode our credentials\r\n  // console.log(`xx /fbac resource content: '${txt}'`);\r\n  const firebaseAppConfig = decode(txt);\r\n  // console.log('xx firebaseAppConfig: ', firebaseAppConfig);\r\n  \r\n  // process our credentials\r\n  // NOTE: THE initializeApp() invocation generates absolutely NO error condition\r\n  //       - for example if the API key is invalid it executes through (even with a try/catch), \r\n  //         and we receive runtime errors when attempting to use the service (ex: login screen)\r\n  //         ... Error: Your API key is invalid, please check you have copied it correctly.\r\n  await firebase.initializeApp(firebaseAppConfig);\r\n}\r\n","import {createFeature}     from 'feature-u';\r\nimport featureFlags        from 'featureFlags';\r\nimport initializeFirebase  from './initializeFirebase';\r\n\r\n// feature: initFirebase\r\n//          initialize the Google Firebase service (when needed)\r\nexport default createFeature({\r\n  name: 'initFirebase',\r\n\r\n  // firebase is only required when we are using real services (i.e. when WIFI enabled)\r\n  enabled: featureFlags.useWIFI,\r\n\r\n  appInit: initializeFirebase,\r\n});\r\n","import {createLogic}          from 'redux-logic';\r\nimport _baseUI                from './featureName';\r\nimport _baseUIAct             from './actions';\r\nimport {getUITheme,\r\n        getResponsiveMode}    from './state';\r\nimport {storeUITheme}         from './uiThemeStorage';\r\nimport {storeResponsiveMode}  from './responsiveModeStorage';\r\n\r\n/**\r\n * Monitor UI Theme changes, persisting the latest theme in our device storage.\r\n */\r\nexport const persistUITheme = createLogic({\r\n\r\n  name: `${_baseUI}.persistUITheme`,\r\n  type: String(_baseUIAct.toggleUITheme),\r\n\r\n  process({getState, action, fassets}, dispatch, done) {\r\n    storeUITheme( getUITheme(getState()) );\r\n    done();\r\n  },\r\n\r\n});\r\n\r\n\r\n/**\r\n * Monitor responsiveMode changes, persisting the latest in our device storage.\r\n */\r\nexport const persistResponsiveMode = createLogic({\r\n\r\n  name: `${_baseUI}.persistResponsiveMode`,\r\n  type: String(_baseUIAct.setResponsiveMode),\r\n\r\n  process({getState, action, fassets}, dispatch, done) {\r\n    storeResponsiveMode( getResponsiveMode(getState()) );\r\n    done();\r\n  },\r\n\r\n});\r\n\r\n\r\n// promote all logic modules for this feature\r\n// ... NOTE: individual logic modules are unit tested using the named exports.\r\nexport default [\r\n  persistUITheme,\r\n  persistResponsiveMode,\r\n];\r\n","import React,\r\n       {useMemo}       from 'react';\r\n\r\nimport {useFassets}    from 'feature-u';\r\nimport {makeStyles}    from '@material-ui/core/styles';\r\n\r\nimport Drawer          from '@material-ui/core/Drawer';\r\nimport List            from '@material-ui/core/List';\r\nimport Toolbar         from '@material-ui/core/Toolbar';\r\n\r\n// AI: temp to see some hard-coded entries\r\nimport ListItem        from '@material-ui/core/ListItem';\r\nimport ListItemText    from '@material-ui/core/ListItemText';\r\nimport Divider         from '@material-ui/core/Divider';\r\n\r\n// AI: test in support of MenuPallet\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport Paper          from '@material-ui/core/Paper';\r\nimport Typography     from '@material-ui/core/Typography';\r\n\r\n// AI: test in support of CustomizedTreeView\r\nimport PropTypes from 'prop-types';\r\nimport SvgIcon from '@material-ui/core/SvgIcon';\r\nimport { fade, /*makeStyles,*/ withStyles } from '@material-ui/core/styles';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\n//import Collapse from '@material-ui/core/Collapse';\r\nimport { useSpring, animated } from 'react-spring/web.cjs'; // web.cjs is required for IE 11 support\r\n\r\n\r\n// AI: test in support of SimpleTreeView\r\n//import { makeStyles } from '@material-ui/core/styles';\r\n//import TreeView from '@material-ui/lab/TreeView';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\n//import TreeItem from '@material-ui/lab/TreeItem';\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * LeftNav: our LeftNav component that accumulates menu items via use contract.\r\n */\r\nexport default function LeftNav() {\r\n\r\n  const leftNavItems        = useFassets('AppMotif.LeftNavItem.*@withKeys');\r\n  const orderedLeftNavItems = useMemo(() => (\r\n    [...leftNavItems].sort(([item1Key], [item2Key]) => item1Key.localeCompare(item2Key))\r\n  ), [leftNavItems]);\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Drawer className={classes.leftNav}\r\n            variant=\"permanent\"\r\n            classes={{\r\n              paper: classes.leftNavPaper,\r\n            }}>\r\n\r\n      <Toolbar variant=\"dense\"\r\n               comment=\"spacer (hidden UNDER AppBar) so our LeftNav isn't covered up by the AppBar\"/>\r\n\r\n      <List>\r\n        {/* AI: temp to see some hard-coded entries  */}\r\n\r\n        {/* SIMPLE TEST\r\n        <ListItem button>\r\n          <ListItemText primary=\"Test 1\"/>\r\n        </ListItem>\r\n        <Divider/>\r\n         */}\r\n\r\n        <MenuPallet name=\"ACME System\">\r\n          <Typography variant=\"body2\"\r\n                      color=\"inherit\"\r\n                      noWrap>\r\n            WowZee WowZee WooWoo ... This can be anything ... I hope it works.\r\n          </Typography>\r\n          <Typography variant=\"body2\"\r\n                      color=\"inherit\"\r\n                      noWrap>\r\n            Here we go!!!\r\n          </Typography>\r\n        </MenuPallet>\r\n        <Divider/>\r\n\r\n        <MenuPallet name=\"Plumbing Comps\">\r\n          <CustomizedTreeView/>\r\n        </MenuPallet>\r\n        <Divider/>\r\n\r\n        <MenuPallet name=\"Electrical Comps\">\r\n          <SimpleTreeView/>\r\n        </MenuPallet>\r\n        <Divider/>\r\n\r\n        {/* AI: production entries (via use contract) */}\r\n        {orderedLeftNavItems.map( ([fassetsKey, LeftNavItem]) => <LeftNavItem key={fassetsKey}/> )}\r\n      </List>\r\n    </Drawer>\r\n  );\r\n}\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n\r\n  leftNav: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n\r\n  leftNavPaper: { // match same width in our LeftNav Drawer usage\r\n    width: drawerWidth,\r\n\r\n    //? // AI: try some simple css (advanced) TO implement resizing\r\n    //? // RESULT: KINDA WORKS \r\n    //? //         - only operates in Chrome (NOT Edge) ... didn't test anything else\r\n    //? //         - resizes the LeftNav GREAT\r\n    //? //         - does NOT propagate to other elms (just overlays the main page) ... prob need some programmatic event handler\r\n    //? //         - kinda quirky (with little corner frame)\r\n    //? resize: 'horizontal', // KOOL: kinda works\r\n    //? // NOT NEEDED: border: '1px solid #333',\r\n    //? // NOT NEEDED: overflow: 'auto',\r\n  },\r\n\r\n}) );\r\n\r\n\r\n//****************************************************************************************\r\n//*** AI: hard-coded test to:\r\n//***     apply technique to allow LeftNav to accommodate a pallet for Systems/Components\r\n//***      WITH tree support\r\n//****************************************************************************************\r\n\r\nfunction MenuPallet({name, children}) {\r\n\r\n  const classes = usePalletStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClick = () => { // AI: do we need useMemo here?\r\n    setOpen(!open);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ListItem button onClick={handleClick}>\r\n        <ListItemIcon>\r\n          <InboxIcon/>{/* AI: parameterize */}\r\n        </ListItemIcon>\r\n        <ListItemText primary={name}/>\r\n        {open ? <ExpandLess/> : <ExpandMore/>}\r\n      </ListItem>\r\n      {/* AI NOTE: removed \"unmountOnExit\" attribute, because it was causing tree expansion to loose state */}\r\n      <Collapse in={open} timeout=\"auto\">\r\n        <Paper className={classes.pallet}>\r\n          {children}\r\n        </Paper>\r\n      </Collapse>\r\n    </>\r\n  );\r\n}\r\n\r\nconst usePalletStyles = makeStyles( theme => ({ // AI: really is useStyles(), but now we don't want to conflict with this module\r\n  pallet: {\r\n    margin:  theme.spacing(0, 2, 2, 2),\r\n    padding: theme.spacing(1),\r\n  },\r\n}) );\r\n\r\n\r\n\r\n\r\n//****************************************************************************************\r\n//*** AI: hard-coded test to see tree view\r\n//***     TAKEN FROM: Customized tree view\r\n//***                 https://material-ui.com/components/tree-view/#custom-icons-border-and-animation\r\n//****************************************************************************************\r\n\r\n// NOTE: Trees are currently part of the Material-UI lab (incubator NOT ready for core), and must be installed separately\r\n//       $ npm install --save @material-ui/lab\r\n\r\n// ALSO: this advanced demo requires react-spring (an animation library)\r\n//       $ npm install --save react-spring\r\n\r\n\r\nfunction MinusSquare(props) {\r\n  return (\r\n    <SvgIcon fontSize=\"inherit\" {...props}>\r\n      {/* tslint:disable-next-line: max-line-length */}\r\n      <path d=\"M22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0zM17.873 11.023h-11.826q-.375 0-.669.281t-.294.682v0q0 .401.294 .682t.669.281h11.826q.375 0 .669-.281t.294-.682v0q0-.401-.294-.682t-.669-.281z\" />\r\n    </SvgIcon>\r\n  );\r\n}\r\n\r\nfunction PlusSquare(props) {\r\n  return (\r\n    <SvgIcon fontSize=\"inherit\" {...props}>\r\n      {/* tslint:disable-next-line: max-line-length */}\r\n      <path d=\"M22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0zM17.873 12.977h-4.923v4.896q0 .401-.281.682t-.682.281v0q-.375 0-.669-.281t-.294-.682v-4.896h-4.923q-.401 0-.682-.294t-.281-.669v0q0-.401.281-.682t.682-.281h4.923v-4.896q0-.401.294-.682t.669-.281v0q.401 0 .682.281t.281.682v4.896h4.923q.401 0 .682.281t.281.682v0q0 .375-.281.669t-.682.294z\" />\r\n    </SvgIcon>\r\n  );\r\n}\r\n\r\nfunction CloseSquare(props) {\r\n  return (\r\n    <SvgIcon className=\"close\" fontSize=\"inherit\" {...props}>\r\n      {/* tslint:disable-next-line: max-line-length */}\r\n      <path d=\"M17.485 17.512q-.281.281-.682.281t-.696-.268l-4.12-4.147-4.12 4.147q-.294.268-.696.268t-.682-.281-.281-.682.294-.669l4.12-4.147-4.12-4.147q-.294-.268-.294-.669t.281-.682.682-.281.696 .268l4.12 4.147 4.12-4.147q.294-.268.696-.268t.682.281 .281.669-.294.682l-4.12 4.147 4.12 4.147q.294.268 .294.669t-.281.682zM22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0z\" />\r\n    </SvgIcon>\r\n  );\r\n}\r\n\r\nfunction TransitionComponent(props) {\r\n  const style = useSpring({\r\n    from: { opacity: 0, transform: 'translate3d(20px,0,0)' },\r\n    to: { opacity: props.in ? 1 : 0, transform: `translate3d(${props.in ? 0 : 20}px,0,0)` },\r\n  });\r\n\r\n  return (\r\n    <animated.div style={style}>\r\n      <Collapse {...props} />\r\n    </animated.div>\r\n  );\r\n}\r\n\r\nTransitionComponent.propTypes = {\r\n  /**\r\n   * Show the component; triggers the enter or exit states\r\n   */\r\n  in: PropTypes.bool,\r\n};\r\n\r\nconst StyledTreeItem = withStyles(theme => ({\r\n  iconContainer: {\r\n    '& .close': {\r\n      opacity: 0.3,\r\n    },\r\n  },\r\n  group: {\r\n    marginLeft: 12,\r\n    paddingLeft: 12,\r\n    borderLeft: `1px dashed ${fade(theme.palette.text.primary, 0.4)}`,\r\n  },\r\n}))(props => <TreeItem {...props} TransitionComponent={TransitionComponent} />);\r\n\r\n\r\nconst useTreeStyles = makeStyles( theme => ({ // AI: really is useStyles(), but now we don't want to conflict with this module\r\n  root: {\r\n    // height: 264, // WowZee: NOT specifying height FIXED the tree, allowing it's height to grow dynamically\r\n    flexGrow: 1,\r\n    maxWidth: 400,\r\n  },\r\n}) );\r\n\r\nfunction CustomizedTreeView() {\r\n  const classes = useTreeStyles();\r\n\r\n  return (\r\n    <TreeView className={classes.root}\r\n              defaultExpanded={['1']}\r\n              defaultCollapseIcon={<MinusSquare />}\r\n              defaultExpandIcon={<PlusSquare />}\r\n              defaultEndIcon={<CloseSquare />}>\r\n      <StyledTreeItem nodeId=\"1\" label=\"Main\">\r\n        <StyledTreeItem nodeId=\"2\" label=\"Hello\" />\r\n        <StyledTreeItem nodeId=\"3\" label=\"Sub-Children\">\r\n          <StyledTreeItem nodeId=\"6\" label=\"Hello\" />\r\n          <StyledTreeItem nodeId=\"7\" label=\"Sub-Children\">\r\n            <StyledTreeItem nodeId=\"9\" label=\"Child 1\" />\r\n            <StyledTreeItem nodeId=\"10\" label=\"Child 2\" />\r\n            <StyledTreeItem nodeId=\"11\" label=\"Child 3\" />\r\n          </StyledTreeItem>\r\n          <StyledTreeItem nodeId=\"8\" label=\"Hello\" />\r\n        </StyledTreeItem>\r\n        <StyledTreeItem nodeId=\"4\" label=\"World\" />\r\n        <StyledTreeItem nodeId=\"5\" label=\"Something Else\" />\r\n      </StyledTreeItem>\r\n    </TreeView>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n//****************************************************************************************\r\n//*** AI: hard-coded test to see SIMPLE tree view\r\n//***     TAKEN FROM: Tree View\r\n//***                 https://material-ui.com/components/tree-view/#tree-view\r\n//****************************************************************************************\r\n\r\n// NOTE: Trees are currently part of the Material-UI lab (incubator NOT ready for core), and must be installed separately\r\n//       $ npm install --save @material-ui/lab\r\n\r\n\r\nconst useSimpleTreeStyles = makeStyles( theme => ({ // AI: really is useStyles(), but now we don't want to conflict with this module\r\n  root: {\r\n    // height: 216, // WowZee: NOT specifying height FIXED the tree, allowing it's height to grow dynamically\r\n    flexGrow: 1,\r\n    maxWidth: 400,\r\n  },\r\n}) );\r\n\r\nfunction SimpleTreeView() {\r\n  const classes = useSimpleTreeStyles();\r\n\r\n  return (\r\n    <TreeView className={classes.root}\r\n              defaultCollapseIcon={<ExpandMoreIcon />}\r\n              defaultExpandIcon={<ChevronRightIcon />}>\r\n      <TreeItem nodeId=\"1\" label=\"Applications\">\r\n        <TreeItem nodeId=\"2\" label=\"Calendar\" />\r\n        <TreeItem nodeId=\"3\" label=\"Chrome\" />\r\n        <TreeItem nodeId=\"4\" label=\"Webstorm\" />\r\n      </TreeItem>\r\n      <TreeItem nodeId=\"5\" label=\"Documents\">\r\n        <TreeItem nodeId=\"6\" label=\"Material-UI\">\r\n          <TreeItem nodeId=\"7\" label=\"src\">\r\n            <TreeItem nodeId=\"8\" label=\"index.js\" />\r\n            <TreeItem nodeId=\"9\" label=\"tree-view.js\" />\r\n          </TreeItem>\r\n        </TreeItem>\r\n      </TreeItem>\r\n    </TreeView>\r\n  );\r\n}\r\n","import React,\r\n       {useMemo}      from 'react';\r\nimport PropTypes      from 'prop-types';\r\n\r\nimport {useFassets}   from 'feature-u';\r\nimport {useSelector}  from 'react-redux'\r\n\r\nimport {makeStyles}   from '@material-ui/core/styles';\r\n\r\nimport LeftNav        from './LeftNav';\r\nimport UserMenu       from './UserMenu';\r\n\r\nimport AppBar         from '@material-ui/core/AppBar';\r\nimport IconButton     from '@material-ui/core/IconButton';\r\nimport MenuIcon       from '@material-ui/icons/Menu';\r\nimport Toolbar        from '@material-ui/core/Toolbar';\r\nimport Typography     from '@material-ui/core/Typography';\r\n\r\nimport {toast}        from 'util/notify';\r\n\r\n/**\r\n * AppMotif is a re-usable top-level component that establishes\r\n * the following application characteristics:\r\n * \r\n * - a **Left Nav** menu\r\n * - a **User Menu** menu\r\n * - a **Current View** state _(orchestrating which application view is active)_\r\n * - a **Tool Bar** with various artifacts (ex: title bar and footer)\r\n * \r\n * While these controls are promoted through AppMotif, it's content\r\n * is accumulated from external features through various **Use\r\n * Contracts**.\r\n\r\n * AppMotif is auto injected through the MainLayout component,\r\n * however, it is only active when an active user is **signed-in**.\r\n * \r\n * The main page content is rendered as children of this component\r\n * (like eateries, discovery, etc.).\r\n *\r\n * USAGE:\r\n * ```\r\n *   <AppMotif>\r\n *     ... app page content here\r\n *   </AppMotif>\r\n * ```\r\n * \r\n * Please refer to the **`baseUI` README** for more information.\r\n */\r\nexport default function AppMotif({children}) {\r\n\r\n  const fassets = useFassets();\r\n\r\n  const curUser = useSelector( (appState) => fassets.sel.curUser(appState), [fassets] );\r\n  const curView = useSelector( (appState) => fassets.sel.curView(appState), [fassets] );\r\n\r\n  const classes = useStyles();\r\n\r\n  // define our auxiliary view content\r\n  const viewAuxiliaryContent    = fassets.get('AppMotif.auxViewContent.*@withKeys');\r\n  const curViewAuxiliaryContent = useMemo(() => resolveCurViewAuxiliaryContent(curView, viewAuxiliaryContent), [curView, viewAuxiliaryContent]);\r\n  const {TitleComp, FooterComp} = curViewAuxiliaryContent;\r\n\r\n  // no-op when no user is signed-in\r\n  if (!curUser.isUserSignedIn()) {\r\n    return (\r\n      <>\r\n        {children}\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.app}>\r\n\r\n      {/* Title Bar */}\r\n      <AppBar className={classes.appBar}\r\n              position=\"fixed\"> {/* NOTE: eatery-nod-w used position \"absolute\" ... don't see any diff */}\r\n        <Toolbar className={classes.toolbar}\r\n                 variant=\"dense\"\r\n                 disableGutters={false}> {/*NOTE: doesn't seem that disableGutters does anything */}\r\n\r\n          {/* AI: Consider for some App Menu */}\r\n          <IconButton className={classes.menuButton}\r\n                      color=\"inherit\"\r\n                      onClick={() => toast.warn({msg: 'App Menu NOT implemented yet (coming soon)!'}) }>\r\n            <MenuIcon/>\r\n          </IconButton>\r\n\r\n          {/* Title */}\r\n          <div className={classes.title}>\r\n            <TitleComp/>\r\n          </div>\r\n\r\n          {/* User Profile Menu */}\r\n          <UserMenu curUser={curUser}/>\r\n\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      {/* Left Nav */}\r\n      <LeftNav/>\r\n\r\n      {/* Page Content */}\r\n      <main className={classes.content}>\r\n\r\n        <Toolbar variant=\"dense\"\r\n                 comment=\"spacer (hidden UNDER AppBar) so our main content isn't covered up by the AppBar\"/>\r\n\r\n        {children}\r\n      </main>\r\n\r\n      {/* Optional Bottom Bar */}\r\n      {FooterComp && (\r\n         <AppBar className={classes.bottomBar}\r\n                 position=\"absolute\">\r\n           <Toolbar className={classes.toolbar}\r\n                    variant=\"dense\"\r\n                    disableGutters={false}>\r\n             <FooterComp/>\r\n           </Toolbar>\r\n         </AppBar>\r\n       )}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nAppMotif.propTypes = {\r\n  children: PropTypes.node.isRequired, // main page content (like eateries and discovery)\r\n};\r\n\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n\r\n  app: {\r\n    display: 'flex', // KJB: does not seem to be doing anything\r\n  },\r\n\r\n  appBar: {\r\n    zIndex:     theme.zIndex.drawer + 1, // NOTE: forces AppBar to be OVER LeftNav (a drawer) ... this is new for fixed LeftNav\r\n  },\r\n\r\n  bottomBar: {\r\n    top:        'auto',\r\n    bottom:     0,\r\n  },\r\n\r\n  toolbar: {\r\n    // ***Dashboard Sample***\r\n    // paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n\r\n  menuButton: {\r\n    marginRight: 36, // proper spacing between menu button and title\r\n  },\r\n\r\n  title: {\r\n    flexGrow: 1, // moves right-most toolbar items to the right\r\n  },\r\n\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',                 // content window is height is same as our viewport (100%)\r\n    overflow: 'auto',                // add scrollbar ONLY when necessary\r\n  },\r\n}) );\r\n\r\n\r\nfunction resolveCurViewAuxiliaryContent(curView, viewAuxiliaryContent) {\r\n  const matchKey = `AppMotif.auxViewContent.${curView}`;\r\n  const [, curViewAuxiliaryContent] = viewAuxiliaryContent.find( ([key]) => key === matchKey ) || fallbackViewAuxiliaryContent;\r\n  return curViewAuxiliaryContent;\r\n}\r\n\r\nconst fallbackViewAuxiliaryContent = ['AppMotif.auxViewContent.FALLBACK', {\r\n  // TODO: unsure if we need a customizable Title in our header\r\n  //       - temporarily make \"App Motif\" \"Visualize It\" \r\n  //       = research further\r\n  TitleComp: () => (\r\n    <Typography variant=\"h6\"\r\n                color=\"inherit\"\r\n                noWrap>\r\n      Visualize It\r\n    </Typography>\r\n  ),\r\n}];\r\n","import React,\r\n       {useMemo}          from 'react';\r\nimport {useSelector}      from 'react-redux'\r\nimport PropTypes          from 'prop-types';\r\nimport {makeStyles}       from '@material-ui/core/styles';\r\nimport {MuiThemeProvider,      // NOTE: MuiThemeProvider **SHOULD** be at the root of ALL visible components\r\n        createMuiTheme}   from '@material-ui/core/styles';\r\nimport CssBaseline        from '@material-ui/core/CssBaseline';\r\nimport AppMotif           from './AppMotif';\r\nimport Notify             from 'util/notify';\r\nimport SplashScreen       from 'util/SplashScreen';\r\nimport {getUITheme}       from '../state';\r\n\r\n\r\n/**\r\n * MainLayout is a re-usable top-level component that promotes the\r\n * proper Material-UI (MUI) theming/styling WITH a responsive layout.\r\n * \r\n * The following items are provided through this component:\r\n *\r\n * - a **Responsive Design** that auto adjusts for desktops, cell\r\n *   phones, and portable devices\r\n *\r\n * - a **UI Theme** allowing the user to choose from light/dark\r\n *   renditions\r\n *\r\n * - an **About Dialog** is promoted from information gleaned from the\r\n *   `package.json`\r\n *\r\n * - the **Notify** utility is activated, supporting programmatic\r\n *   **toasts, alerts, and confirmations**\r\n *\r\n * - the **SplashScreen** utility is activated, supporting the programmatic\r\n *   `splash(msg)` API\r\n * \r\n * Please refer to the **`baseUI` README** for more information.\r\n */\r\nexport default function MainLayout({children}) {\r\n\r\n  const uiTheme    = useSelector((appState) => getUITheme(appState), []);\r\n  const themeInUse = useMemo(() => uiTheme==='dark' ? darkTheme : lightTheme, [uiTheme]);\r\n  const classes    = useStyles();\r\n\r\n  return (\r\n    <MuiThemeProvider theme={themeInUse}>\r\n      <CssBaseline/>\r\n      <Notify/>\r\n      <SplashScreen/>\r\n      <main className={classes.main}>\r\n        <AppMotif>\r\n          {children}\r\n        </AppMotif>\r\n      </main>\r\n    </MuiThemeProvider>\r\n  );\r\n}\r\n\r\nMainLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\n\r\nconst lightTheme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true,\r\n  },\r\n\r\n  palette: {\r\n    type: 'light',\r\n    // AI: More theming to consider\r\n    primary: {\r\n      main: '#336600', // subtle dark green -or- 365735\r\n    },\r\n    secondary: {\r\n      main: '#000',\r\n    },\r\n  },\r\n});\r\n\r\nconst darkTheme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true,\r\n  },\r\n  palette: {\r\n    type: 'dark',\r\n    primary: {\r\n      main: '#336600',\r\n    },\r\n    secondary: {\r\n      main: '#000',\r\n    },\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n  main: {\r\n    width:        'auto',\r\n    display:      'block', // Fix IE 11 issue.\r\n // marginLeft:   theme.spacing(3), // N/A: bad news for the overall layout\r\n // marginRight:  theme.spacing(3),\r\n\r\n // reactive design // N/A:  THIS IS CAUSING HAVOC on my main content container overall width\r\n // [theme.breakpoints.up(400 + theme.spacing(3 * 2))]: {\r\n //   width:       400,\r\n //   marginLeft:  'auto',\r\n //   marginRight: 'auto',\r\n // },\r\n  },\r\n}) );\r\n","import React,\r\n       {useMemo,\r\n        useCallback} from 'react';\r\n\r\nimport {useSelector,\r\n        useDispatch} from 'react-redux'\r\n\r\nimport _baseUIAct    from '../actions';\r\nimport {getUITheme}  from '../state';\r\n\r\nimport Chip          from '@material-ui/core/Chip';\r\nimport Divider       from '@material-ui/core/Divider';\r\nimport MoonIcon      from '@material-ui/icons/Brightness3';\r\nimport SunIcon       from '@material-ui/icons/WbSunny';\r\nimport UserMenuItem  from 'features/common/baseUI/comp/UserMenuItem';\r\n\r\n\r\n/**\r\n * ToggleUITheme: our user-profile menu items (in the App Header)\r\n * \r\n * NOTE: Because this is a \"custom\" component that is held in Menu\r\n *       (a ButtonBase MenuItem) it must be able to hold a ref ... hence\r\n *       the React.forwardRef()!\r\n *       see: https://material-ui.com/guides/migration-v3/#button\r\n *            https://material-ui.com/guides/composition/#caveat-with-refs\r\n *            AVOIDS following log:\r\n *            Warning: Function components cannot be given refs. Attempts to access\r\n *                     this ref will fail. Did you mean to use React.forwardRef()?\r\n * NOTE: Subsequent Discovery: I think this is really due to the fact that\r\n *       we were injecting <Divider/> too!\r\n *       This React.forwardRef() was NOT needed in src/features/common/auth/comp/AuthUserMenu.js,\r\n *       where it simply injected a series of <UserMenuItem>s in a React.Fragment ... hmmmm\r\n */\r\nconst ToggleUITheme = React.forwardRef( (props, ref) => {\r\n  const uiTheme = useSelector((appState) => getUITheme(appState), []);\r\n\r\n  const ChipIcon = useMemo(() => uiTheme==='light' ? MoonIcon  : SunIcon,    [uiTheme]);\r\n  const label    = useMemo(() => uiTheme==='light' ? 'to dark' : 'to light', [uiTheme]);\r\n\r\n  const dispatch      = useDispatch();\r\n  const toggleUITheme = useCallback(() => dispatch( _baseUIAct.toggleUITheme() ), [dispatch]);\r\n\r\n  return (\r\n    <span {...props} ref={ref}>\r\n      <UserMenuItem onClick={toggleUITheme}>\r\n        <Chip label={label}\r\n              icon={<ChipIcon/>}/>\r\n      </UserMenuItem>\r\n      <Divider/>\r\n    </span>\r\n  );\r\n});  \r\nexport default ToggleUITheme;\r\n","import React,\r\n       {useMemo,\r\n        useCallback} from 'react';\r\n\r\nimport {useSelector,\r\n        useDispatch} from 'react-redux'\r\n\r\nimport _baseUIAct           from '../actions';\r\nimport {getResponsiveMode}  from '../state';\r\n\r\nimport Chip          from '@material-ui/core/Chip';\r\nimport Divider       from '@material-ui/core/Divider';\r\nimport CheckedIcon    from '@material-ui/icons/Check';\r\nimport UserMenuItem  from 'features/common/baseUI/comp/UserMenuItem';\r\n\r\nimport {confirm}     from 'util/notify';\r\n\r\n\r\n/**\r\n * MaintainResponsiveMode: our user-profile menu items (in the App Header)\r\n * \r\n * NOTE: Because this is a \"custom\" component that is held in Menu\r\n *       (a ButtonBase MenuItem) it must be able to hold a ref ... hence\r\n *       the React.forwardRef()!\r\n *       see: https://material-ui.com/guides/migration-v3/#button\r\n *            https://material-ui.com/guides/composition/#caveat-with-refs\r\n *            AVOIDS following log:\r\n *            Warning: Function components cannot be given refs. Attempts to access\r\n *                     this ref will fail. Did you mean to use React.forwardRef()?\r\n * NOTE: Subsequent Discovery: I think this is really due to the fact that\r\n *       we were injecting <Divider/> too!\r\n *       This React.forwardRef() was NOT needed in src/features/common/auth/comp/AuthUserMenu.js,\r\n *       where it simply injected a series of <UserMenuItem>s in a React.Fragment ... hmmmm\r\n */\r\nconst MaintainResponsiveMode = React.forwardRef( (props, ref) => {\r\n\r\n  const responsiveMode = useSelector((appState) => getResponsiveMode(appState), []);\r\n\r\n  const ChipIcon = useMemo(() => responsiveMode==='off' ? ()=>null : CheckedIcon, [responsiveMode]);\r\n\r\n  const dispatch                = useDispatch();\r\n  const maintainResponsiveMode  = useCallback(() => {\r\n    confirm.success({ \r\n      msg: `This app is designed with mobile devices in mind (i.e. cell phones).\r\n\r\nWhen the \"responsive\" mode is enabled, selected screens will dynamically adjust to take advantage of the additional screen real estate.  As an example, a simple list can morph into a detailed table.\r\n\r\nYou can define the \"responsive\" boundary where additional content is manifest (based on the screen width), or disable it altogether.\r\n\r\nSet the \"responsive\" boundary to:\r\n(** is current)`,\r\n      actions: [\r\n        ...defineActions(responsiveMode, dispatch),\r\n        { txt: 'Close' },\r\n      ]\r\n    });\r\n  }, [dispatch, responsiveMode]);\r\n\r\n  return (\r\n    <span {...props} ref={ref}>\r\n      <UserMenuItem onClick={maintainResponsiveMode}>\r\n        <Chip label=\"responsive\"\r\n              icon={<ChipIcon/>}/>\r\n      </UserMenuItem>\r\n      <Divider/>\r\n    </span>\r\n  );\r\n});  \r\nexport default MaintainResponsiveMode;\r\n\r\n\r\nconst breakpoints = [\r\n//{name: 'Phone',      value: 'xs'},  // xs, extra-small:    0px ... breakpoint ranges are from this point TO the next range (inclusive)\r\n  {name: 'Tablet',     value: 'sm'},  // sm, small:        600px\r\n  {name: 'Desktop',    value: 'md'},  // md, medium:       960px\r\n  {name: 'Landscape',  value: 'lg'},  // lg, large:       1280px\r\n//{name: 'Super-Wide', value: 'xl'},  // xl, extra-large: 1920px\r\n  {name: 'Disable',    value: 'off'},\r\n];\r\n\r\nconst defineActions = (curResponsiveMode, dispatch) => breakpoints.map( (breakpoint) => ({\r\n  txt:    `${ curResponsiveMode===breakpoint.value ? '**' : '' }${breakpoint.name}`,\r\n  action: () => dispatch( _baseUIAct.setResponsiveMode(breakpoint.value) ),\r\n}) );\r\n","import React         from 'react';\r\n\r\nimport {alert}       from 'util/notify';\r\n\r\nimport Divider       from '@material-ui/core/Divider';\r\nimport UserMenuItem  from 'features/common/baseUI/comp/UserMenuItem';\r\n\r\n\r\n/**\r\n * About: display info about this app (gleaned from package.json)\r\n *\r\n * NOTE: These env vars require the following .env file (in your project root per CRA):\r\n *\r\n *   .env\r\n *   ====\r\n *   REACT_APP_NAME=$npm_package_name\r\n *   REACT_APP_VERSION=$npm_package_version\r\n *   REACT_APP_DESCRIPTION=$npm_package_description\r\n *   REACT_APP_ABOUT_DOCS=$npm_package_about_docs\r\n *   REACT_APP_ABOUT_HIST=$npm_package_about_hist\r\n *\r\n * NOTE: Because this is a \"custom\" component that is held in Menu\r\n *       (a ButtonBase MenuItem) it must be able to hold a ref ... hence\r\n *       the React.forwardRef()!\r\n *       see: https://material-ui.com/guides/migration-v3/#button\r\n *            https://material-ui.com/guides/composition/#caveat-with-refs\r\n *            AVOIDS following log:\r\n *            Warning: Function components cannot be given refs. Attempts to access\r\n *                     this ref will fail. Did you mean to use React.forwardRef()?\r\n * NOTE: Subsequent Discovery: I think this is really due to the fact that\r\n *       we were injecting <Divider/> too!\r\n *       This React.forwardRef() was NOT needed in src/features/common/auth/comp/AuthUserMenu.js,\r\n *       where it simply injected a series of <UserMenuItem>s in a React.Fragment ... hmmmm\r\n */\r\nconst About = React.forwardRef( (props, ref) => (\r\n  <span {...props} ref={ref}>\r\n    <Divider/>\r\n    <UserMenuItem onClick={showAbout}>About ...</UserMenuItem>\r\n  </span>\r\n) );\r\nexport default About;\r\n\r\nfunction showAbout() {\r\n  const name    = process.env.REACT_APP_NAME        || 'UNKNOWN name (from package.json: name)';\r\n  const desc    = process.env.REACT_APP_DESCRIPTION || 'UNKNOWN desc (from package.json: description)';\r\n  const ver     = process.env.REACT_APP_VERSION     || 'UNKNOWN (from package.json: version)';\r\n  const docsUrl = process.env.REACT_APP_ABOUT_DOCS;\r\n  const histUrl = process.env.REACT_APP_ABOUT_HIST;\r\n\r\n  const msg = `${name}\\n\\n${desc}\\n\\nversion: ${ver}`;\r\n\r\n  const actions = [];\r\n  if (docsUrl)\r\n    actions.push({ txt: 'Docs',    action: () => window.open(docsUrl, '_blank') });\r\n  if (histUrl)\r\n    actions.push({ txt: 'History', action: () => window.open(histUrl, '_blank') });\r\n  actions.push({ txt: 'Close' });\r\n\r\n  alert.success({msg, actions});\r\n}\r\n","import React                  from 'react';\r\nimport {createFeature,\r\n        fassetValidations}    from 'feature-u';\r\n\r\nimport _baseUI                from './featureName';\r\nimport _baseUIAct             from './actions';\r\nimport reducer                from './state';\r\nimport * as _baseUISel        from './state';\r\nimport logic                  from './logic';\r\n\r\nimport MainLayout             from './comp/MainLayout';\r\nimport ToggleUITheme          from './comp/ToggleUITheme';\r\nimport MaintainResponsiveMode from './comp/MaintainResponsiveMode';\r\nimport About                  from './comp/About';\r\n\r\n// feature: baseUI <<< full details in README\r\n//          Provides a UI foundation for an entire application.\r\n//          It manages the following characteristics:\r\n//          - a Responsive Design that auto adjusts for desktops, cell phones, and\r\n//            portable devices.\r\n//          - a UI Theme allowing the user to choose from light/dark renditions\r\n//          - when an active user is signed-in, the following items are also\r\n//            manifest:\r\n//            - a \"Left Nav\" menu\r\n//            - a \"User Menu\" menu\r\n//            - a \"Current View\" state (orchestrating which application view is active)\r\n//            - a \"Tool Bar\" with various artifacts (ex: title bar and footer)\r\nexport default createFeature({\r\n  name: _baseUI,\r\n\r\n  // our public face ...\r\n  fassets: {\r\n\r\n    define: {\r\n      'actions.changeView': _baseUIAct.changeView, // changeView(viewName)\r\n      'sel.curView':        _baseUISel.curView,    // curView(appState): string\r\n    },\r\n\r\n    defineUse: {\r\n      // inject User Menu entries\r\n      // ... to ToggleUITheme ('light'/'dark')\r\n      'AppMotif.UserMenuItem.aa1_UIThemeToggle': ToggleUITheme,\r\n      // ... to MaintainResponsiveMode ('md'/'lg'/'off')\r\n      'AppMotif.UserMenuItem.aa2_MaintainResponsiveMode': MaintainResponsiveMode,\r\n      // ... to display About info (gleaned from package.json)\r\n      'AppMotif.UserMenuItem.zz8_About': About,\r\n    },\r\n\r\n    use: [\r\n      // full details in README\r\n      ['AppMotif.UserMenuItem.*',   {required: true,  type: fassetValidations.comp}],\r\n      ['AppMotif.LeftNavItem.*',    {required: false, type: fassetValidations.comp}], // ?? eventually make a required dependency\r\n      ['AppMotif.auxViewContent.*', {required: false, type: fassetValidations.any}],\r\n    ],\r\n  },\r\n\r\n  reducer,\r\n  logic,\r\n\r\n  // inject our baseUI components into the root of our app\r\n  appWillStart({fassets, curRootAppElm}) {\r\n    return (\r\n      <MainLayout>\r\n        {curRootAppElm}\r\n      </MainLayout>\r\n    );\r\n  }\r\n\r\n});\r\n","import {createLogic}      from 'redux-logic';\r\nimport _logActions        from './featureName';\r\nimport featureFlags       from 'featureFlags';\r\n\r\nlet lastState = null;\r\n\r\n/**\r\n * Log all dispatched actions.\r\n *\r\n * TODO: retrofit to use real logger:\r\n *       using the following Log levels:\r\n *         - TRACE:   see dispatched actions\r\n *         - VERBOSE: see dispatched actions INCLUDING action content (CAUTION: action content can be BIG)\r\n */\r\nexport const actionLogger = createLogic({\r\n\r\n  name: `${_logActions}.actionLogger`,\r\n  type: '*', // monitor ALL action types\r\n\r\n  transform({getState, action}, next) {\r\n\r\n    if (featureFlags.log === 'verbose') { // group action/state together\r\n      console.group(`Action: ${action.type}`);\r\n    }\r\n\r\n    console.log('Dispatched Action: ', action);\r\n\r\n    // TODO: retrofit to use log-u:\r\n    // // log dispatched action\r\n    // if (log.isVerboseEnabled()) {\r\n    //   log.verbose(()=> `Dispatched Action: ${FMT(action.type)} with content:\\n${FMT(action)}`);\r\n    // }\r\n    // else {\r\n    //   log.trace(()=>   `Dispatched Action: ${FMT(action.type)}`);\r\n    // }\r\n\r\n    // continue processing\r\n    next(action);\r\n  },\r\n\r\n  process({getState, action, fassets}, dispatch, done) {\r\n\r\n    if (featureFlags.log === 'verbose') { // state can be big ... log conditionally\r\n\r\n      const curState = getState();\r\n      if (curState === lastState) {\r\n        console.log('Current State: UNCHANGED');\r\n      }\r\n      else {\r\n        console.log('Current State: ', curState);\r\n      }\r\n      lastState = curState;\r\n\r\n      console.groupEnd();\r\n    }\r\n\r\n    done();\r\n  },\r\n\r\n});\r\n\r\n\r\n// promote all logic modules for this feature\r\n// ... NOTE: individual logic modules are unit tested using the named exports.\r\nexport default [\r\n  actionLogger,\r\n];\r\n","/**\r\n * Expose our featureName through a mini-meta module that is\r\n * \"importable\" in all use-cases (a single-source-of-truth).\r\n */\r\nexport default 'logActions';\r\n","import {createFeature}  from 'feature-u';\r\nimport _logActions      from './featureName';\r\nimport logic            from './logic';\r\nimport featureFlags     from 'featureFlags';\r\n\r\n// feature: logActions\r\n//          log all dispatched actions and resulting state (full details in README)\r\nexport default createFeature({\r\n  name:    _logActions,\r\n  enabled: featureFlags.log ? true : false, // NOTE: feature-u requires boolean, but featureFlags.log can be a string (e.g. 'verbose')\r\n  logic,\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n           .register(swUrl)\n           .then(registration => {\n             registration.onupdatefound = () => {\n               const installingWorker = registration.installing;\n               if (installingWorker == null) {\n                 return;\n               }\n               installingWorker.onstatechange = () => {\n                 if (installingWorker.state === 'installed') {\n                   if (navigator.serviceWorker.controller) {\n                     // At this point, the updated precached content has been fetched,\n                     // but the previous service worker will still serve the older\n                     // content until all client tabs are closed.\n                     console.log(\n                       'New content is available and will be used when all ' +\n                       'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                     );\n\n                     // Execute callback\n                     if (config && config.onUpdate) {\n                       config.onUpdate(registration);\n                     }\n                   } else {\n                     // At this point, everything has been precached.\n                     // It's the perfect time to display a\n                     // \"Content is cached for offline use.\" message.\n                     console.log('Content is cached for offline use.');\n\n                     // Execute callback\n                     if (config && config.onSuccess) {\n                       config.onSuccess(registration);\n                     }\n                   }\n                 }\n               };\n             };\n           })\n           .catch(error => {\n             console.error('Error during service worker registration:', error);\n           });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createFeature}    from 'feature-u';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// feature: pwa\r\n//          orchestrates the Progressive Web App hooks (as defined by Create React App)\r\nexport default createFeature({\r\n  name:    'pwa',\r\n\r\n  appInit({showStatus, fassets, appState, dispatch}) {\r\n    // FROM: CRA (Create React App):\r\n    // If you want your app to work offline and load faster, you can change\r\n    // unregister() to register() below. Note this comes with some pitfalls.\r\n    // Learn more about service workers: http://bit.ly/CRA-PWA\r\n    serviceWorker.unregister();\r\n  }\r\n});\r\n","import konvaSandbox                  from './konvaSandbox/feature';\r\nimport auth                          from './common/auth/feature';\r\nimport authService                   from './common/auth/subFeatures/authService/feature';\r\nimport authServiceFirebase           from './common/auth/subFeatures/authServiceFirebase/feature';\r\nimport authServiceMock               from './common/auth/subFeatures/authServiceMock/feature';\r\nimport initFirebase                  from './common/initFirebase/feature';\r\nimport baseUI                        from './common/baseUI/feature';\r\nimport logActions                    from './common/diagnostic/logActions/feature';\r\nimport pwa                           from './common/pwa/feature';\r\n\r\n// accumulate/promote ALL features that make up our app\r\nexport default [\r\n\r\n\r\n  //***\r\n  //*** app-specific features\r\n  //***\r\n\r\n  konvaSandbox,\r\n\r\n  //***\r\n  //*** common app-neutral features\r\n  //***\r\n\r\n  baseUI,\r\n  \r\n  auth,\r\n  authService,\r\n  authServiceFirebase,\r\n  authServiceMock,\r\n  \r\n  initFirebase,\r\n  \r\n  pwa,\r\n\r\n  // diagnostic features ...\r\n  logActions,\r\n];\r\n","import React                  from 'react';\r\nimport {createReducerAspect}  from 'feature-redux';\r\nimport {createLogicAspect}    from 'feature-redux-logic';\r\nimport {createRouteAspect}    from 'feature-router';\r\nimport SplashScreen           from 'util/SplashScreen';\r\n\r\n\r\n//***\r\n//*** define/configure the aspects representing our app's run-time stack\r\n//***\r\n\r\n// redux - extending: Feature.reducer\r\nconst reducerAspect = createReducerAspect();\r\n\r\n// redux-logic - extending: Feature.logic\r\nconst logicAspect   = createLogicAspect();\r\n\r\n// Feature Routes - extending: Feature.route\r\nconst routeAspect   = createRouteAspect();\r\n// ... define fallback screen (used when no routes are in effect)\r\nrouteAspect.config.fallbackElm$ = <SplashScreen msg=\"I'm trying to think but it hurts!\"/>;\r\n\r\n\r\n//***\r\n//*** promote the aspects representing our app's run-time stack\r\n//***\r\n\r\nexport default [\r\n  reducerAspect,\r\n  logicAspect,\r\n  routeAspect,\r\n];\r\n","import ReactDOM     from 'react-dom';\r\nimport {launchApp}  from 'feature-u';\r\nimport features     from 'features';\r\nimport aspects      from 'aspects';\r\nimport {splash}     from 'util/SplashScreen';\r\n\r\n// launch our app, exposing the Fassets object (facilitating cross-feature-communication)\r\nexport default launchApp({\r\n\r\n  features,\r\n  aspects,\r\n\r\n  registerRootAppElm(rootAppElm) {\r\n    ReactDOM.render(rootAppElm,\r\n                    document.getElementById('root'));\r\n  },\r\n\r\n  showStatus(msg='', err=null) {\r\n    splash(msg, err);\r\n  },\r\n});\r\n","import 'util/ErrorExtensionPolyfill';\r\nexport {default} from 'app'; // redirect to app.js\r\n"],"sourceRoot":""}
{"version":3,"sources":["util/ErrorExtensionPolyfill.js","featureFlags.js","features/common/baseUI/comp/LeftNavCollapsibleItem.js","util/verify.js","util/logger.js","features/common/tabManager/tabRegistry.js","util/isComponent.js","featureResources.js","util/genDualClickHandler.js","features/sandbox/comp/SampleMenuPallet.js","core/SmartComp.js","features/sandbox/konvaSandbox/generalComps.js","core/SmartView.js","core/SceneView.js","core/SmartScene.js","features/sandbox/konvaSandbox/draggableScene.js","features/sandbox/konvaSandbox/index.js","util/ReactSmartView.js","features/sandbox/comp/KonvaMenuPallet.js","features/sandbox/feature.js","features/sandbox/initSandbox.js","util/encoder.js","features/common/initFirebase/initializeFirebase.js","features/common/initFirebase/feature.js","features/common/baseUI/actions.js","features/common/baseUI/featureName.js","util/noOp.js","util/deviceStorage.js","features/common/baseUI/uiThemeStorage.js","features/common/baseUI/responsiveModeStorage.js","features/common/baseUI/state.js","util/reduxFnRef.js","features/common/baseUI/logic.js","features/common/baseUI/comp/LeftNav.js","features/common/baseUI/comp/UserMenu.js","util/notify.js","features/common/baseUI/comp/AppMotif.js","util/Transition.js","util/SplashScreen.js","util/responsiveBreakpoints.js","features/common/baseUI/comp/MainLayout.js","features/common/baseUI/comp/UserMenuItem.js","features/common/baseUI/comp/ToggleUITheme.js","features/common/baseUI/comp/MaintainResponsiveMode.js","features/common/baseUI/comp/About.js","features/common/baseUI/feature.js","features/common/tabManager/actions.js","features/common/tabManager/featureName.js","features/common/tabManager/state.js","features/common/tabManager/logic.js","features/common/tabManager/comp/TabManager.js","util/CenterItems.js","features/common/tabManager/comp/StartUpPage.js","features/common/tabManager/route.js","features/common/tabManager/feature.js","features/common/diagnostic/logActions/logic.js","features/common/diagnostic/logActions/featureName.js","features/common/diagnostic/logActions/feature.js","features/common/pwa/serviceWorker.js","features/common/pwa/feature.js","features/index.js","aspects/index.js","app.js","index.js"],"names":["Error","prototype","defineUserMsg","userMsg","this","expected","isExpected","isUnexpected","defineAttemptingToMsg","attemptingToMsg","formatUserMsg","prior_toString","toString","call","LeftNavCollapsibleItem","name","PaletteIcon","PaletteIconDefault","children","classes","useStyles","useState","open","setOpen","toggleExpansion","useCallback","ListItem","button","onClick","ListItemIcon","ListItemText","primary","Collapse","in","timeout","Paper","className","pallet","makeStyles","theme","margin","spacing","padding","verify","condition","msg","prefix","msgPrefix","createLogger","check","isString","_enabled","logger","obj","force","console","log","isEnabled","enable","disable","tabRegistry","registerTab","tabId","tabName","tabCreator","comp","isValidElementType","getTabName","tab","getTabCreator","genDualClickHandler","onSingleClick","onDoubleClick","delay","timeoutID","rest","clearTimeout","setTimeout","React","memo","tabActivationHandlers","dataNodes","dispatch","useDispatch","activateTab","useFassets","handleActivateTab","preview","dualHandleActivateTab","genTabActivationHandlers","rootHandler","accumulativeId","rootId","handlers","forEach","dataNode","id","nodes","label","useTabActivationHandlers","sampleData","TreeView","root","defaultCollapseIcon","defaultExpandIcon","genTreeItemFromData","map","TreeItem","key","nodeId","flexGrow","maxWidth","registerTabsFromData","SmartComp","containingKonvaLayer","constructor","Valve1","container","shape","Konva","Rect","x","y","width","height","fill","stroke","strokeWidth","add","Valve2","shadowBlur","cornerRadius","Valve3","SmartView","scene","method","konvaStage","draggable","containingHtmlElm","SceneView","checkMounted","undefined","Stage","mount","SmartScene","comps","unknownArgs","Array","isArray","Number","isInteger","unknownArgKeys","Object","keys","length","arguments","konvaLayer","containingKonvaStage","Layer","ToggleDraggableScenesButton","Text","text","on","e","viewTestingDraggableScene","draggableScene","generalComps","ToggleDraggableScenesButton2","viewTestingDraggableScene2","konvaSandbox","desc","smartView","ReactSmartView","view","otherProps","stageElm","useRef","useEffect","current","ref","style","backgroundColor","border","node","createFeature","enabled","featureFlags","appInit","showStatus","fassets","appState","actions","addLeftNavItem","Divider","encode","safeguard","isPlainObject","encoding","demarkObjEncoding","JSON","stringify","demarkSafeguard","str","window","btoa","obfuscate","decode","result","indexOf","atob","deobfuscate","substring","parse","a","fetch","resp","ok","status","txt","includes","firebaseAppConfig","firebase","initializeApp","generateActions","toggleUITheme","actionMeta","setResponsiveMode","traits","changeView","removeLeftNavItem","noOp","storeItem","value","deviceStorage","setItem","fetchItem","getItem","_localStorageAvailable","type","storage","removeItem","DOMException","code","storageAvailable","warn","keyName","keyValue","localStorage","uiThemeKey","responsiveModeKey","reducer","slicedReducer","expandWithFassets","combineReducers","uiTheme","reducerHash","_baseUIAct","state","action","responsiveMode","curView","viewName","leftNavItems","leftNavKey","fn","LeftNavComp","fnRef","gfs","getSlicedState","getUITheme","getResponsiveMode","getOrderedLeftNavItems","createSelector","entries","encodedLeftNavComp","sort","k1","k2","localeCompare","createLogic","String","process","done","getState","LeftNav","orderedLeftNavItems","useSelector","Drawer","leftNav","variant","paper","leftNavPaper","Toolbar","comment","List","flexShrink","UserMenu","curUser","anchorUserMenu","setAnchorUserMenu","userMenuOpen","useMemo","Boolean","openUserMenu","event","currentTarget","_closeUserMenu","userMenuItems","orderedUserMenuItems","item1Key","item2Key","IconButton","color","Menu","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","onClose","closeUserMenu","fassetsKey","UserMenuItem","Notify","props","maxSnack","dense","variantSuccess","NotifyAPI_withSnackBar","whiteSpace","variantInfo","variantWarning","variantError","_singleton","NotifyAPI","args","duration","level","position","modal","levelVariant","indx","isFunction","autoHideDuration","actionsCbMap","reduce","identityFn","actionButtons","Button","size","snackbarKey","enqueueSnackbar","closeSnackbar","clientAction","target","textContent","Fragment","Component","success","info","error","p","withSnackbar","notify","directive","display","toastBase","funcQual","toast","alertBase","alert","confirmBase","confirm","AppMotif","sel","viewAuxiliaryContent","get","curViewAuxiliaryContent","matchKey","find","fallbackViewAuxiliaryContent","resolveCurViewAuxiliaryContent","TitleComp","FooterComp","app","AppBar","appBar","toolbar","disableGutters","menuButton","chooseFileSystemEntries","fileHandle","getFile","file","fileContent","message","title","content","bottomBar","displayName","zIndex","drawer","top","bottom","marginRight","overflow","Typography","noWrap","TransitionZoom","forwardRef","Fade","Slide","direction","Zoom","SplashScreen","err","isCellPhone","useTheme","useMediaQuery","breakpoints","down","useForCellPhone","SplashScreenCommon","fullScreen","SplashScreenProgrammatic","defaultProps","palette","common","white","main","progress","splashState","setSplashState","_setSplashState","splash","_errLastReported","errCntl","Dialog","TransitionComponent","DialogTitle","DialogContent","src","alt","MainLayout","themeInUse","darkTheme","lightTheme","CssBaseline","createMuiTheme","typography","useNextVariants","fontSize","light","dark","contrastText","secondary","MenuItem","ToggleUITheme","ChipIcon","MoonIcon","SunIcon","Chip","icon","MaintainResponsiveMode","CheckedIcon","maintainResponsiveMode","defineActions","curResponsiveMode","breakpoint","About","showAbout","push","define","defineUse","use","required","fassetValidations","any","logic","appWillStart","curRootAppElm","ratify","closeTab","activeTabId","_tabManagerAct","pgmDirectives","next_activeTabId","previewTabId","next_previewTabId","tabs","newTabs","removeTabId","addNewTab","filter","getActiveTabId","getPreviewTabId","getTabs","transform","next","reject","req_tabId","req_preview","cur_previewTabId","cur_targetTab","closeTabIndx","findIndex","nextTabIndx","nextTabId","TabManager","_tabManagerSel","handleTabChanged","Tabs","onChange","indicatorColor","textColor","scrollButtons","Tab","tabPreview","tabPermanent","Grid","justify","item","stopPropagation","TabCreator","fontStyle","TabPanel","hidden","Box","CenterItems","alignItems","StartUpPage","entry","marginTop","featureRoute","getTotalTabs","route","lastState","group","curState","groupEnd","location","hostname","match","sandbox","baseUI","tabManager","initFirebase","navigator","serviceWorker","ready","then","registration","unregister","logActions","reducerAspect","createReducerAspect","logicAspect","createLogicAspect","routeAspect","createRouteAspect","config","fallbackElm$","launchApp","features","aspects","registerRootAppElm","rootAppElm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0dc0cccc.chunk.js","sourcesContent":["/**\r\n * Standardize the ability to handle ALL errors more generically, by\r\n * adding these value-added extensions to ALL Error objects (via this\r\n * Error class polyfill - a monkey patch).\r\n * \r\n * All Error instances (created anywhere) are extended to include the\r\n * following characteristics:\r\n * \r\n * - A new error.userMsg property is defined.\r\n * \r\n *   This message is intended to be seen by users, so it should be\r\n *   suitable for human consumption:\r\n *     - both in meaning, \r\n *     - and in sanitation (so as to not reveal any internal\r\n *       architecture)\r\n * \r\n *   By default, error.userMsg = 'Unexpected Condition'\r\n *   and can be changed by: \r\n *     + error.defineUserMsg(userMsg): error\r\n * \r\n * - There is a delineation of expected vs. unexpected conditions.  For\r\n *   example:\r\n * \r\n *     - An error communicating \"invalid password\" is an expected\r\n *       condition, because it is stimulated by user input.\r\n * \r\n *     - Contrast that with an error communicating \"DB is down\", which is\r\n *       an unexpected condition, because this is outside the user's\r\n *       control.\r\n * \r\n *   This distinction is controlled by whether an error.userMsg has\r\n *   been defined (expected) or not (unexpected).\r\n * \r\n *   In other words, all errors start out as unexpected, and can be\r\n *   changed to expected by simply invoking:\r\n *     + error.defineUserMsg(userMsg): error\r\n * \r\n *   This distinction may be programmatically delineated through one of\r\n *   the following methods:\r\n *     + error.isExpected(): boolean\r\n *     + error.isUnexpected(): boolean\r\n * \r\n * - A new error.attemptingToMsg property is defined.\r\n * \r\n *   This message is also intended to be seen by users, and provides\r\n *   additional detail of what was being attempted (over and above the\r\n *   error.userMsg).\r\n * \r\n *   By default, error.attemptingToMsg = ''\r\n *   and can be changed by: \r\n *     + error.defineAttemptingToMsg(attemptingToMsg): error\r\n * \r\n * - A new error.formatUserMsg() is provided that combines all\r\n *   user-specific messages (userMsg and attemptingToMsg).\r\n * \r\n *     + error.formatUserMsg(): string\r\n * \r\n * - The toString() method has been extended to suffix the base\r\n *   toString() with user-specific messages.\r\n * \r\n * - All of the new \"defining\" methods return the receiving error,\r\n *   so as to allow them to be conveniently chained.  For example:\r\n * \r\n *     throw new Error('catastrophic details here').defineAttemptingToMsg('sign in');\r\n * \r\n * **Usage Scenarios** are as follows:\r\n * \r\n * - Error Origination\r\n * \r\n *   In throwing a new Error, you can:\r\n *     throw new Error('internal technical error details')\r\n *                 .defineUserMsg('You did not bla')           // ONLY INVOKE if this is an expected condition - otherwise default to: 'Unexpected Condition'\r\n *                 .defineAttemptingToMsg('log into the app'); // optionally provide additional clarification in either case (expected/unexpected)\r\n * \r\n * - Error Pass Through\r\n * \r\n *   Within a mid-level service, you may capture an error from a lower\r\n *   point and supplement it as follows:\r\n * \r\n *     catch(err) {\r\n *       throw err.defineUserMsg('You did not bla')           // ONLY INVOKE if this is an expected condition - otherwise default to: 'Unexpected Condition'\r\n *                .defineAttemptingToMsg('log into the app'); // optionally provide additional clarification in either case (expected/unexpected)\r\n *     }\r\n * \r\n * - Error Consumption (by client)\r\n * \r\n *   Using these enhancements, the client can abstractly apply various\r\n *   heuristics, such as:\r\n *\r\n *     - if logging is necessary\r\n *       * if so, reveal complete context (internal details and user context)\r\n *     - if user notification necessary\r\n *       * if so supply info suitable for human consumption\r\n * \r\n *   For more usage scenarios, please refer to the discloseError.js utility.\r\n */\r\n\r\n/* eslint-disable no-extend-native */  // we are very careful NOT to break native behavior of the Error object\r\n\r\nif (!Error.prototype.defineUserMsg) { // key off of one of several extension points\r\n\r\n  /**\r\n   * Define a user-specific message, that is applicable for human\r\n   * consumption:\r\n   *  - both in meaning, \r\n   *  - and in sanitization (so as to not reveal any internal architecture).\r\n   *\r\n   * This method also delineates the error as an expected condition.\r\n   *\r\n   * @param {String} userMsg the user message to define\r\n   *\r\n   * @return {Error} self, supporting convenient Error method chaining.\r\n   */\r\n  Error.prototype.defineUserMsg = function(userMsg) {\r\n    this.userMsg  = userMsg;\r\n    this.expected = true;\r\n    return this;\r\n  };\r\n  Error.prototype.userMsg = \"Unexpected Condition\"; // prototype provides the default\r\n\r\n\r\n  /**\r\n   * Return an indicator as to whether this error was\r\n   * expected (say user input error),\r\n   * or not (say a catastrophic error).\r\n   *\r\n   * @return {boolean} error expected (true) or not (false).\r\n   */\r\n  Error.prototype.isExpected = function() {\r\n    return this.expected;\r\n  };\r\n  Error.prototype.expected = false; // prototype provides the default\r\n\r\n\r\n  /**\r\n   * Return an indicator as to whether this error was\r\n   * unexpected (say a catastrophic error),\r\n   * or not (say user input error).\r\n   *\r\n   * @return {boolean} error unexpected (true) or not (false).\r\n   */\r\n  Error.prototype.isUnexpected = function() {\r\n    return !this.expected;\r\n  };\r\n\r\n\r\n  /**\r\n   * Define a user-specific 'attempting to' message, that provides\r\n   * additional details of what was being attempted.\r\n   *\r\n   * Errors with this context are prefixed with ' ... attempting to: ',\r\n   * so word your phrasing appropriately.\r\n   * \r\n   * Multiple attempting-to phrases can be used, which will be\r\n   * combined with the ', -and- ' phrase.\r\n   *\r\n   * @param {String} attemptingToMsg the user-specific attempting\r\n   * to' message.\r\n   *\r\n   * @return {Error} self, supporting convenient Error method chaining.\r\n   */\r\n  Error.prototype.defineAttemptingToMsg = function(attemptingToMsg) {\r\n    if (this.attemptingToMsg) // append multiples\r\n      this.attemptingToMsg += `, -and- ${attemptingToMsg}`;\r\n    else                      // initial definition\r\n      this.attemptingToMsg += ` ... attempting to: ${attemptingToMsg}`;\r\n    return this;\r\n  };\r\n  Error.prototype.attemptingToMsg = ''; // prototype provides the default\r\n\r\n\r\n  /**\r\n   * Format a user-specific message, combining all user-specific contexts.\r\n   *\r\n   * @return {string} formatted user message.\r\n   */\r\n  Error.prototype.formatUserMsg = function() {\r\n    return this.userMsg + this.attemptingToMsg;\r\n  };\r\n\r\n\r\n  /**\r\n   * Extend the Error toString() to prefix user-specific context.\r\n   */\r\n  const prior_toString = Error.prototype.toString; // monkey patch\r\n  Error.prototype.toString = function() {\r\n    return prior_toString.call(this) + '\\n\\nUser Msg: ' + this.formatUserMsg();\r\n  };\r\n\r\n\r\n  // L8TR:\r\n  // /**\r\n  //  * Define an indicator as to the cause of this error ... used to apply\r\n  //  * various heuristics, such as whether logging is necessary.\r\n  //  *\r\n  //  * The following indicators are available:\r\n  //  *   Error.Cause {\r\n  //  *     UNEXPECTED_CONDITION        [default]\r\n  //  *     RECOGNIZED_USER_ERROR\r\n  //  *   }\r\n  //  *\r\n  //  * @param {String} cause one of Error.Cause.\r\n  //  *\r\n  //  * @return {Error} self, supporting convenient Error method chaining.\r\n  //  */\r\n  // Error.prototype.defineCause = function(cause) {\r\n  //   this.cause = cause;\r\n  //   return this;\r\n  // };\r\n  // \r\n  // Error.Cause = {\r\n  //   UNEXPECTED_CONDITION:    'UNEXPECTED_CONDITION',\r\n  //   RECOGNIZED_USER_ERROR: 'RECOGNIZED_USER_ERROR'\r\n  // };\r\n  // \r\n  // Error.prototype.cause = Error.Cause.UNEXPECTED_CONDITION; // prototype provides the default\r\n\r\n}\r\n","// various featureFlags used throughout the application\r\nexport default {\r\n\r\n  // should app use WIFI?\r\n  // ... regulates various services (real/mocked)\r\n  useWIFI: false,\r\n\r\n  // should app emit diagnostic logs?\r\n  //  - false:     no logs\r\n  //  - true:      generate 'non verbose' logs (e.g. actions will NOT include redux state)\r\n  //  - 'verbose': generate 'verbose'     logs (e.g. actions WILL     include redux state)\r\n  log:     false,\r\n\r\n  // should app enable diagnostic sandbox controls?\r\n  sandbox: true,\r\n};\r\n","import React,\r\n       {useState,\r\n        useCallback}       from 'react';\r\nimport Collapse            from '@material-ui/core/Collapse';\r\nimport ExpandLessIcon      from '@material-ui/icons/ExpandMore';   // in effect WHEN EXPANDED  ... i.e. clicking will collapse\r\nimport ExpandMoreIcon      from '@material-ui/icons/ChevronRight'; // in effect WHEN COLLAPSED ... i.e. clicking will expand\r\nimport ListItem            from '@material-ui/core/ListItem';\r\nimport ListItemIcon        from '@material-ui/core/ListItemIcon';\r\nimport ListItemText        from '@material-ui/core/ListItemText';\r\nimport PaletteIconDefault  from '@material-ui/icons/Palette';\r\nimport Paper               from '@material-ui/core/Paper';\r\nimport {makeStyles}        from '@material-ui/core/styles';\r\n\r\n\r\n/**\r\n * LeftNavCollapsibleItem: A top-level LeftNav entry that adorns it's children\r\n *                         (the pallet) with a collapsible control.\r\n *\r\n * The pallet (i.e. the children) will typically contain an expandable\r\n * tree ... however this is not required.\r\n */\r\nexport default function LeftNavCollapsibleItem({name, PaletteIcon=PaletteIconDefault, children}) {\r\n\r\n  const classes         = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const toggleExpansion = useCallback(() => {\r\n    setOpen(!open);\r\n  }, [open]);\r\n\r\n  return (\r\n    <>\r\n    <ListItem button onClick={toggleExpansion}>\r\n      <ListItemIcon>\r\n        <PaletteIcon/>\r\n      </ListItemIcon>\r\n      <ListItemText primary={name}/>\r\n      {open ? <ExpandLessIcon/> : <ExpandMoreIcon/>}\r\n    </ListItem>\r\n    <Collapse in={open}\r\n              // NOTE: removed unmountOnExit (was causing tree expansion to loose state)\r\n              timeout=\"auto\">\r\n      <Paper className={classes.pallet}>\r\n        {children}\r\n      </Paper>\r\n    </Collapse>\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n  pallet: {\r\n    margin:  theme.spacing(0, 2, 2, 2),\r\n    padding: theme.spacing(1),\r\n  },\r\n}) );\r\n","/**\r\n * A convenience assertion utility, typically used to validate\r\n * pre-conditions of a routine.\r\n *\r\n * **Advanced**: verify.prefix(msgPrefix) returns a higher-order\r\n *               verify() function where all messages are prefixed.\r\n *\r\n * @param {truthy} condition - a \"truthy\" condition which\r\n * must be satisfied.\r\n *\r\n * @param {string} msg - a message clarifying the condition being\r\n * checked.\r\n * \r\n * @throws {Error} an Error is thrown when the supplied condition is\r\n * NOT met.\r\n * \r\n * @private\r\n */\r\nexport default function verify(condition, msg) {\r\n  if (!condition) {\r\n    // TODO: don't think there is any benefit in logging this console.error \r\n    // console.error(`verify() constraint issue: ${msg}`); // supplement exception with error log (for react-native exposure)\r\n    throw new Error(msg);\r\n  }\r\n}\r\n\r\nverify.prefix = function(msgPrefix) {\r\n  return (condition, msg) => verify(condition, msgPrefix+msg);\r\n};\r\n","import verify   from './verify';\r\nimport isString from 'lodash.isstring';\r\n\r\n/*--------------------------------------------------------------------------------\r\n   Simple logging utility with the following features:\r\n   - can be enabled/disabled at run-time\r\n   - all logging probes are prefixed\r\n   - a simple layer on top of console.log()\r\n\r\n   USAGE:\r\n     import {createLogger} from 'util/logger';\r\n     ...\r\n     const log = createLogger('*** My Prefix *** ').enable();\r\n\r\n     ... log('now is the time', myData); // emits: *** My Prefix *** now is the time\r\n\r\n   API:\r\n     log(msg [,obj]): void       ... conditionally log probe when enabled\r\n     log.force(msg [,obj]): void ... unconditionally log probe\r\n     log.isEnabled(): true/false ... is logging enabled or disabled\r\n     log.enable():  log          ... enable logging\r\n     log.disable(): log          ... disable logging\r\n   --------------------------------------------------------------------------------*/\r\n\r\nexport function createLogger(prefix) {\r\n\r\n  // validate parameters\r\n  const check = verify.prefix('createLogger() parameter violation: ');\r\n  check(prefix,           'prefix is required');\r\n  check(isString(prefix), 'prefix must be a string');\r\n\r\n  // our logger is disabled by default\r\n  let _enabled = false;\r\n\r\n  // create our new logger\r\n  const logger = function(msg, obj) { // our primary logging function\r\n    if (_enabled) {\r\n      logger.force(msg, obj);\r\n    }\r\n  };\r\n\r\n  // inject additional API\r\n\r\n  logger.force = (msg, obj) => {\r\n    msg = prefix + msg;\r\n    if (obj) {\r\n      console.log(msg, obj);\r\n    }\r\n    else {\r\n      console.log(msg);\r\n    }\r\n  };\r\n\r\n  logger.isEnabled = () => _enabled;\r\n\r\n  logger.enable = () => {\r\n    _enabled = true;\r\n    logger('enabling logging');\r\n    return logger;\r\n  };\r\n\r\n  logger.disable = () => {\r\n    logger('disabling logging');\r\n    _enabled = false;\r\n    return logger;\r\n  };\r\n\r\n  // thats all folks\r\n  return logger;\r\n}\r\n","import React          from 'react';\r\nimport verify         from 'util/verify';\r\nimport isString       from 'lodash.isstring';\r\nimport isComponent    from 'util/isComponent';\r\nimport {createLogger} from 'util/logger';\r\n\r\n// our internal diagnostic logger (normally disabled)\r\nconst log = createLogger('***DIAG*** tabRegistry ... ').disable();\r\n\r\n\r\n//***\r\n//*** Our tabRegistry\r\n//***\r\n\r\nconst tabRegistry = {\r\n  // tabId: {\r\n  //   tabName,\r\n  //   tabCreator,\r\n  // },\r\n  // ...\r\n};\r\n\r\n\r\n/**\r\n * Register the supplied entry as a potential tab that can be rendered\r\n * in our system.\r\n *\r\n * @param {string} tabId a globally unique key, identifying the tab in\r\n * question. Typically a federated namespace is employed to insure\r\n * this key is globally unique (ex: compLibName/comp, or\r\n * systemName/view, etc.).\r\n *\r\n * @param {string} tabName the name displayed in the tab.\r\n *\r\n * @param {ReactComp} tabCreator a React Component that instantiates\r\n * the tab content without any additional context (in other words, it\r\n * will be instantiated without any attributes).\r\n */\r\nexport function registerTab(tabId, tabName, tabCreator) {\r\n\r\n  log(`registerTab(tabId: '${tabId}', tabName: '${tabName}')`);\r\n\r\n  // validate our parameters\r\n  const check = verify.prefix('registerTab() parameter violation: ');\r\n\r\n  // ... tabId\r\n  check(tabId,               'tabId is required');\r\n  check(isString(tabId),     'tabId must be a string, NOT: ', tabId);\r\n  check(!tabRegistry[tabId], `tabId '${tabId}' has already been registered (it must be globally unique)`);\r\n\r\n  // ... tabName\r\n  check(tabName,           'tabName is required');\r\n  check(isString(tabName), 'tabName must be a string, NOT: ', tabName);\r\n\r\n  // ... tabCreator\r\n  check(tabCreator,              'tabCreator is required');\r\n  check(isComponent(tabCreator), 'tabCreator must be a React Component, NOT: ', tabCreator);\r\n\r\n  // register this tab entry\r\n  tabRegistry[tabId] = {\r\n    tabName,\r\n    tabCreator,\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * Return the tabName registered to the supplied `tabId`.\r\n *\r\n * @param {string} tabId the registered entry identifier.\r\n *\r\n * @returns {string} the registered tabName ('UNKNOWN' for unregistered tab).\r\n */\r\nexport function getTabName(tabId) {\r\n  const tab = tabRegistry[tabId];\r\n  return tab ? tab.tabName : 'UNKNOWN';\r\n}\r\n\r\n\r\n/**\r\n * Return the tabCreator ReactComp registered to the supplied `tabId`.\r\n *\r\n * @param {string} tabId the registered entry identifier.\r\n *\r\n * @returns {ReactComp} the registered tabCreator ReactComp.\r\n * When NOT registered, a fallback component rendering:\r\n * \"UNKNOWN Tab: {tabId} ... missing Tab Registration :-(\"\r\n */\r\nexport function getTabCreator(tabId) {\r\n  const tab = tabRegistry[tabId];\r\n  return tab ? tab.tabCreator : () => <span>UNKNOWN Tab: {tabId} ... missing Tab Registration :-(</span>;\r\n}\r\n","import {isValidElementType} from 'react-is';\r\n\r\n/**\r\n * Return an indicator as to whether the supplied parameter is a \r\n * react component (true) or not (false).\r\n *\r\n * @private\r\n */\r\nexport default function isComponent(comp) {\r\n  // NOTE: Our unit test checks all three forms of Component creation:\r\n  //       - Stateless Functional Component\r\n  //       - Class Component (extending from React.Component)\r\n  //       - Legacy React.createClass()\r\n  return isValidElementType(comp); \r\n}\r\n","import LeftNavCollapsibleItem  from 'features/common/baseUI/comp/LeftNavCollapsibleItem';\r\nimport {registerTab,\r\n        getTabName,\r\n        getTabCreator}         from 'features/common/tabManager/tabRegistry';\r\n\r\n\r\n\r\n//*** \r\n//*** Promote various feature public assets (i.e. aliases)\r\n//*** ... minimizing feature coupling.\r\n//*** \r\n\r\n// NOTE: This named export supports ES6 imports.\r\n//       Example:\r\n//         import {whatever} from 'featureResources';\r\n//       -or-\r\n//         import * as featureResources from 'featureResources';\r\nexport {\r\n\r\n  LeftNavCollapsibleItem,\r\n\r\n  registerTab,\r\n  getTabName,\r\n  getTabCreator,\r\n\r\n};\r\n\r\n// NOTE: This default export supports CommonJS modules (otherwise Babel does NOT promote them).\r\n//       Example:\r\n//         const {whatever} = require('featureResources');\r\n//       -or-\r\n//         const featureResources = require('featureResources');\r\nexport default {\r\n\r\n  LeftNavCollapsibleItem,\r\n\r\n  registerTab,\r\n  getTabName,\r\n  getTabCreator,\r\n\r\n};\r\n","/**\r\n * genDualClickHandler is a generator function that supports BOTH the\r\n * registration of single/double click handlers.\r\n *\r\n * This is a work-around hack for the LACK of support from React for\r\n * dual single/double click handler!!\r\n * \r\n * React currently support both `onClick` and `onDoubleClick` event\r\n * handlers.  However when BOTH are needed (i.e. registered) on the\r\n * same element, BOTH are fired (`onClick` multiple times, and\r\n * `onDoubleClick` for the double click).\r\n *\r\n * React has really dropped the ball on this, as many threads state\r\n * they are doing the right thing, because `onClick` is **NOT** an\r\n * `onSingleClick`, and that clients should do the kind of HACK found\r\n * here!\r\n\r\n * While it is true that `onClick` is NOT an `onSingleClick`, **THE\r\n * OBVIOUS ANSWER** is for them to **SUPPORT** an `onSingleClick`\r\n * handler, and simplify everyone's life, rather than expecting\r\n * clients to propagated hacks like this!!! _enough ranting_.\r\n *\r\n * @param {function} onSingleClick the callback hook to invoke when a\r\n * **single click** occurs.\r\n *\r\n * @param {function} onDoubleClick the callback hook to invoke when a\r\n * **double click** occurs.\r\n *\r\n * @param {int} [delay=250] the optional delay (in mills) to wait for\r\n * the second click ... DEFAULT: 250.\r\n *\r\n * @returns {function} the generated handler to register to React's\r\n * `onClick` event handler.\r\n */\r\n\r\nexport default function genDualClickHandler(onSingleClick, onDoubleClick, delay=250) {\r\n\r\n  let timeoutID = null;\r\n\r\n  return function (...rest) { // onClick will pass event, but use ...rest to support any signature\r\n    if (!timeoutID) { // FIRST CLICK: create timeout (waiting for potential second click)\r\n      timeoutID = setTimeout(function () {\r\n        onSingleClick(...rest); // invoke onSingleClick() - timeout has passed (with no additional clicks)\r\n        timeoutID = null;       // reset our timeout indicator\r\n      }, delay);\r\n    }\r\n    else { // SECOND CLICK (within timeout period)\r\n      clearTimeout(timeoutID); // clear our timeout\r\n      timeoutID = null;        // reset our timeout indicator\r\n      onDoubleClick(...rest);  // invoke onDoubleClick(event)\r\n    }\r\n  };\r\n\r\n}\r\n","import React                from 'react';\r\n\r\nimport {useDispatch}        from 'react-redux';\r\nimport {useFassets}         from 'feature-u';\r\n\r\nimport {registerTab}        from 'featureResources';\r\nimport genDualClickHandler  from 'util/genDualClickHandler';\r\nimport {createLogger}       from 'util/logger';\r\n\r\nimport ExpandLessIcon       from '@material-ui/icons/ExpandMore';   // in effect WHEN EXPANDED  ... i.e. clicking will collapse\r\nimport ExpandMoreIcon       from '@material-ui/icons/ChevronRight'; // in effect WHEN COLLAPSED ... i.e. clicking will expand\r\nimport TreeItem             from '@material-ui/lab/TreeItem';\r\nimport TreeView             from '@material-ui/lab/TreeView';\r\nimport {makeStyles}         from '@material-ui/core/styles';\r\n\r\n// our internal diagnostic logger (normally disabled)\r\nconst log = createLogger('***DIAG*** <SampleMenuPallet> ... ').disable();\r\n\r\n\r\n/**\r\n * SampleMenuPallet: \r\n *\r\n * A very SIMPLE test pallet fleshing out details of:\r\n *   - a collapsible TreeView\r\n *   - tabManger interactions\r\n *   - optimizing react performance (renders) (see: PERF comments)\r\n */\r\nfunction SampleMenuPallet() {\r\n\r\n  const classes     = useStyles();\r\n\r\n  const tabActivationHandlers = useTabActivationHandlers(sampleData);\r\n\r\n  // KOOL: here is our TreeView/TreeItem generation process driven by our data!\r\n  return (\r\n    <TreeView className={classes.root}\r\n              defaultCollapseIcon={<ExpandLessIcon/>}\r\n              defaultExpandIcon={<ExpandMoreIcon/>}>\r\n      { genTreeItemFromData(sampleData, tabActivationHandlers) }\r\n    </TreeView>\r\n  );\r\n\r\n}\r\n// PERF: memo is critical (re-render is frequent and we do a lot of processing to generate our render)\r\nexport default React.memo(SampleMenuPallet);\r\n\r\n\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n  root: {\r\n    // height: 216, // WowZee: Omitting height FIXED the tree, allowing it's height to grow dynamically\r\n    flexGrow: 1,\r\n    maxWidth: 400,\r\n  },\r\n}) );\r\n\r\n\r\n//******************************************************************************\r\n//*** Data Driven Process\r\n//*** ... a key aspect of this sample is to determine how to drive\r\n//***     our process through data!!\r\n//******************************************************************************\r\n\r\n// NOTE: A KEY aspect of this sample is to determine how to drive our\r\n//       process through data!!\r\n// \r\n//       KEY Processing Points:\r\n//       - leaf nodes (without children) will activate tab entries\r\n//         ... determined by the non-existence of nodes (i.e. no children)\r\n//       - this component (SampleMenuPallet) will combine all ids within the tree depth to assist in it's uniqueness\r\n\r\nconst sampleData = [\r\n  {id: 'P', label: 'Passive',\r\n   nodes: [\r\n     {id: '1', label: 'Resistors'},\r\n     {id: '2', label: 'Capacitors'},\r\n     {id: '3', label: 'Inductors'},\r\n   ],\r\n  },\r\n  {id: 'A', label: 'Active',\r\n   nodes: [\r\n     {id: '1', label: 'Diodes'},\r\n     {id: '2', label: 'Transistors'},\r\n   ],\r\n  },\r\n  {id: 'M', label: 'More',\r\n   nodes: [\r\n     {id: 'D', label: 'Depth',\r\n       nodes: [\r\n         {id: 'D', label: 'Display',\r\n           nodes: [\r\n             {id: 'L', label: 'LCD'},\r\n           ],\r\n         },\r\n         {id: 'P', label: 'Power',\r\n           nodes: [\r\n             {id: 'B', label: 'Battery'},\r\n           ],\r\n         },\r\n       ],\r\n     },\r\n   ],\r\n  },\r\n];\r\n\r\n\r\nconst rootId = 'SampleMenuPallet';\r\n\r\n// our process for Tab Registration from our data structure\r\nfunction registerTabsFromData(dataNodes, accumulativeId=rootId) {\r\n\r\n  // iterate over all our direct children\r\n  dataNodes.forEach( (dataNode) => {\r\n    const id = `${accumulativeId}-${dataNode.id}`;\r\n\r\n    // for non-leaf nodes (with children):\r\n    // ... keep drilling into our structure USING recursion\r\n    if (dataNode.nodes) {\r\n      log(`registerTabsFromData(): TreeItem non-leaf node ... id: ${id}`);\r\n      registerTabsFromData(dataNode.nodes, id);\r\n    }\r\n\r\n    // for leaf nodes (without children):\r\n    // ... register this entry with our Tab Registry\r\n    else {\r\n      log(`registerTabsFromData(): TreeItem leaf node ... id: ${id}`);\r\n      registerTab(id, dataNode.label, () => (\r\n        <span>Dynamic content for {id} / {dataNode.label}</span>\r\n      ));\r\n    }\r\n  });\r\n}\r\nregisterTabsFromData(sampleData); // register our Tabs NOW!!!\r\n\r\n\r\n// pre-carve out all the tabActivationHandlers we need in the entire process\r\n// PERF: this is an optimization that minimizes re-rendering\r\n//       due to anonymous function reference props constantly changing\r\n//       HOWEVER not really a concern\r\n//       ... due to the top-level memoization of SampleMenuPallet\r\nfunction useTabActivationHandlers(dataNodes) {\r\n\r\n  const dispatch    = useDispatch();\r\n  const activateTab = useFassets('actions.activateTab');\r\n\r\n  log(`in useTabActivationHandlers()`);\r\n\r\n  // PERF: consider useCallback()\r\n  //       HOWEVER not really needed\r\n  //       ... due to the top-level memoization of SampleMenuPallet\r\n  // NOTE: technically 2nd param (tabName) is NOT needed, but kept for diagnostic logging\r\n  const handleActivateTab = (tabId, tabName, preview) => {\r\n    log(`handleActivateTab( tabId:'${tabId}', tabName:'${tabName}', preview=${preview} )`);\r\n    dispatch( activateTab(tabId, preview) );\r\n  };\r\n\r\n  const dualHandleActivateTab = genDualClickHandler(\r\n    (tabId, tabName) => handleActivateTab(tabId, tabName, true), // singleClick: preview   tab ... preview is true\r\n    (tabId, tabName) => handleActivateTab(tabId, tabName, false) // doubleClick: permanent tab ... preview is false\r\n  );\r\n\r\n  // PERF: this is ALWAYS GOING TO return a new item \r\n  //       HOWEVER not really a concern\r\n  //       ... due to the top-level memoization of SampleMenuPallet\r\n  return genTabActivationHandlers(dataNodes, dualHandleActivateTab);\r\n\r\n}\r\n\r\n// the recursive generator\r\nfunction genTabActivationHandlers(dataNodes,\r\n                                  rootHandler,\r\n                                  accumulativeId=rootId,\r\n                                  handlers={}) {\r\n\r\n  // iterate over all our direct children\r\n  dataNodes.forEach( (dataNode) => {\r\n    const id = `${accumulativeId}-${dataNode.id}`;\r\n\r\n    // for non-leaf nodes (with children):\r\n    // ... keep drilling into our structure USING recursion\r\n    if (dataNode.nodes) {\r\n      log(`genTabActivationHandlers(): TreeItem non-leaf node ... id: ${id}, label: ${dataNode.label}`);\r\n      genTabActivationHandlers(dataNode.nodes, rootHandler, id, handlers);\r\n    }\r\n\r\n    // for leaf nodes (without children):\r\n    // ... accumulate the needed handler\r\n    else {\r\n      log(`genTabActivationHandlers(): TreeItem leaf node ... id: ${id}, label: ${dataNode.label}`);\r\n      // NOTE: technically 2nd param (tabName) is NOT needed, but kept for diagnostic logging\r\n      handlers[id] = () => rootHandler(id, dataNode.label);\r\n    }\r\n  });\r\n\r\n  return handlers;\r\n}\r\n\r\n\r\n// algorithm that morphs our sampleData into TreeView/TreeItem structure USING recursion\r\nfunction genTreeItemFromData(dataNodes, tabActivationHandlers, accumulativeId=rootId) {\r\n\r\n  return dataNodes.map( (dataNode) => {\r\n\r\n    const id = `${accumulativeId}-${dataNode.id}`;\r\n\r\n    // for non-leaf nodes (with children):\r\n    // ... generate a parent TreeItem with child nodes USING recursion\r\n    if (dataNode.nodes) {\r\n      log(`genTreeItemFromData(): TreeItem non-leaf node ... id: ${id}`);\r\n      return (\r\n        <TreeItem key={id}\r\n                  nodeId={id}\r\n                  label={dataNode.label}>\r\n          {genTreeItemFromData(dataNode.nodes, tabActivationHandlers, id)}\r\n        </TreeItem>\r\n      );\r\n    }\r\n\r\n    // for leaf nodes (without children):\r\n    // ... generate a leaf TreeItem with our registered event handler\r\n    else {\r\n      log(`genTreeItemFromData(): TreeItem leaf node ... id: ${id}`);\r\n      return (\r\n        <TreeItem key={id}\r\n                  nodeId={id}\r\n                  label={dataNode.label}\r\n                  onClick={tabActivationHandlers[id]}/>\r\n      );\r\n    }\r\n  });\r\n\r\n}\r\n\r\n// EXAMPLE GENERATION (except the onClick has changed):\r\n// <TreeItem nodeId=\"P\" label=\"Passive\">\r\n//   <TreeItem nodeId=\"P-1\" label=\"Resistors\"  onClick={ ()=> dualHandleActivateTab('P-1', 'Resistors') }/>\r\n//   <TreeItem nodeId=\"P-2\" label=\"Capacitors\" onClick={ ()=> dualHandleActivateTab('P-2', 'Capacitors') }/>\r\n//   <TreeItem nodeId=\"P-3\" label=\"Inductors\"  onClick={ ()=> dualHandleActivateTab('P-3', 'Inductors') }/>\r\n// </TreeItem>\r\n// <TreeItem nodeId=\"A\" label=\"Active\">\r\n//   <TreeItem nodeId=\"A-1\" label=\"Diodes\"      onClick={ ()=> dualHandleActivateTab('A-1', 'Diodes') }/>\r\n//   <TreeItem nodeId=\"A-2\" label=\"Transistors\" onClick={ ()=> dualHandleActivateTab('A-2', 'Transistors') }/>\r\n// </TreeItem>\r\n// <TreeItem nodeId=\"M\" label=\"More\">\r\n//   <TreeItem nodeId=\"M-D\" label=\"Depth\">\r\n//     <TreeItem nodeId=\"M-D-D\" label=\"Display\">\r\n//       <TreeItem nodeId=\"M-D-D-L\" label=\"LCD\"     onClick={ ()=> dualHandleActivateTab('M-D-D-L', 'LCD') }/>\r\n//     </TreeItem>\r\n//     <TreeItem nodeId=\"M-D-P\" label=\"Power\">\r\n//       <TreeItem nodeId=\"M-D-P-B\" label=\"Battery\"  onClick={ ()=> dualHandleActivateTab('M-D-P-B', 'Battery') }/>\r\n//     </TreeItem>\r\n//   </TreeItem>\r\n// </TreeItem>\r\n","/**\r\n * SmartComp is the abstract base class for all visualize-it\r\n * components.\r\n *\r\n * These are graphical representations of components found in a system:\r\n *\r\n *  - they bind to a data model (for visual affects and animation)\r\n *\r\n *  - their graphics are atomically managed (selection and transformation)\r\n *    ... using a single rooted Konva.Group\r\n *\r\n *  - NOTE: SmartComp is abstract requiring derivation (for code-based compLibs)\r\n *          HOWEVER: there is a concrete derivation that supports \r\n *                   dynamic-based resource-loaded compLibs\r\n *                   (maintained by the visualize-it component editor)\r\n *  \r\n *                 SmartComp        ... abstract\r\n *             isA  ├── DynamicComp ... a concrete derivation for dynamic-based resource-loaded compLibs\r\n *                  │                   ... managed by the visualize-it component editor\r\n *                  └── others      ... for code-based compLibs\r\n */\r\nexport default class SmartComp {\r\n\r\n  /**\r\n   * Create a SmartComp.\r\n   *\r\n   * @param {string} id - The unique identifier of this component. ?? is there more params?\r\n   */\r\n  constructor(id) {\r\n    this.id = id;\r\n  }\r\n\r\n  /**\r\n   * Mount the visuals of this component, binding the graphics to the\r\n   * underlying canvas.\r\n   *\r\n   * Prior to `mount()` execution, the visualize-it object\r\n   * representation is very lightweight.\r\n   *\r\n   * @param {Konva.Layer} containingKonvaLayer - The container of\r\n   * this component (a Konva.Layer).\r\n   */\r\n  mount(containingKonvaLayer) {\r\n    throw new Error(`***ERROR*** SmartComp pseudo-interface-violation: ${this.constructor.name}(id:${this.id}).mount() is an abstract method that MUST BE implemented!`);\r\n  }\r\n\r\n  //? persistenceMethods() {\r\n  //? }\r\n}\r\n","import Konva          from 'konva';\r\nimport SmartComp      from 'core/SmartComp';\r\n\r\n\r\nexport class Valve1 extends SmartComp {\r\n\r\n  // useless-constructor ... because no logic besides super() with identical signature\r\n  // constructor(id) {\r\n  //   super(id);\r\n  // }\r\n\r\n  mount(container) {\r\n    const shape = new Konva.Rect({\r\n      x: 20, // TODO: parameterize with defaults (needed for persistence)\r\n      y: 20,\r\n      width: 100,\r\n      height: 50,\r\n      fill: 'green',\r\n      stroke: 'black',\r\n      strokeWidth: 4\r\n    });\r\n    container.add(shape);\r\n  }\r\n}\r\n\r\nexport class Valve2 extends SmartComp {\r\n\r\n  // useless-constructor ... because no logic besides super() with identical signature\r\n  // constructor(id) {\r\n  //   super(id);\r\n  // }\r\n\r\n  mount(container) {\r\n    const shape = new Konva.Rect({\r\n      x: 150, // TODO: parameterize with defaults (needed for persistence)\r\n      y: 40,\r\n      width: 100,\r\n      height: 50,\r\n      fill: 'red',\r\n      shadowBlur: 10,\r\n      cornerRadius: 10\r\n    });\r\n    container.add(shape);\r\n  }\r\n}\r\n\r\nexport class Valve3 extends SmartComp {\r\n\r\n  // useless-constructor ... because no logic besides super() with identical signature\r\n  // constructor(id) {\r\n  //   super(id);\r\n  // }\r\n\r\n  mount(container) {\r\n    const shape = new Konva.Rect({\r\n      x: 50,  // TODO: parameterize with defaults (needed for persistence)\r\n      y: 120,\r\n      width: 100,\r\n      height: 100,\r\n      fill: 'blue',\r\n      cornerRadius: [0, 10, 20, 30]\r\n    });\r\n    container.add(shape);\r\n  }\r\n}\r\n","import verify  from 'util/verify';\r\n\r\n/**\r\n * SmartView is an abstract base class representing the viewport in\r\n * which scene(s) are displayed/visualized.\r\n * \r\n * Derivations of SmartView will handle the specifics of visualizing a\r\n * single scene (SceneView) or multiple scenes (CollageView).\r\n * \r\n * In all cases, this visualization can be \"displayed\":\r\n *   - in-line:  within the \"contained\" HTML DOM container\r\n *   - external: using an external browser window\r\n * TODO: this MAY BE more of a run-time consideration (rather than\r\n *       specified/retained by constructor params driven by our editor)\r\n */\r\nexport default class SmartView {\r\n\r\n  /**\r\n   * Create a SmartView.\r\n   *\r\n   * @param {string} id - the unique identifier of this view.\r\n   */\r\n  constructor(id, scene) {\r\n    // retain parameters in self\r\n    this.id = id;\r\n  }\r\n  \r\n  /**\r\n   * Verify self has been mounted.\r\n   * @param {string} [method] - the method name on which behalf we are checking.\r\n   */\r\n  checkMounted(method) {\r\n    verify(this.konvaStage, `${this.constructor.name}.${method}() can only be invoked after mounting.`);\r\n  }\r\n\r\n  /**\r\n   * Get/set the draggable flag of our contained scene.\r\n   *\r\n   * @param {boolean} [draggable] - the optional setting that when\r\n   * supplied will set the scene's draggability.\r\n   *\r\n   * @returns {boolean|self} for getter: the current draggable\r\n   * setting of our contained scene, for setter: self (supporting\r\n   * chainable setters).\r\n   */\r\n  draggableScene(draggable) {\r\n    throw new Error(`***ERROR*** SmartView pseudo-interface-violation: ${this.constructor.name}(id:${this.id}).draggableScene() is an abstract method that MUST BE implemented!`);\r\n  }\r\n\r\n\r\n  /**\r\n   * Mount the visuals of this view, binding the graphics to the\r\n   * underlying canvas.\r\n   *\r\n   * Prior to `mount()` execution, the visualize-it object\r\n   * representation is very lightweight.\r\n   *\r\n   * @param {HtmlElm} containingHtmlElm - The container of this view\r\n   * (an HTML Element).\r\n   */\r\n  mount(containingHtmlElm) {\r\n    throw new Error(`***ERROR*** SmartView pseudo-interface-violation: ${this.constructor.name}(id:${this.id}).mount() is an abstract method that MUST BE implemented!`);\r\n  }\r\n\r\n\r\n  //? persistenceMethods() { // simply persists this view with it's internal state (view-size etc), and EACH comp (data node names ONLY)\r\n  //? }\r\n}\r\n","import SmartView      from './SmartView';\r\nimport Konva          from 'konva';\r\nimport {createLogger} from 'util/logger';\r\n\r\n// our internal diagnostic logger (normally disabled, but keep enabled for a while)\r\nconst log = createLogger('***DIAG*** <SceneView> ... ').enable();\r\n\r\n/**\r\n * SceneView is a viewport (a SmartView derivation) in which a single\r\n * scene is displayed/visualized.\r\n */\r\nexport default class SceneView extends SmartView {\r\n\r\n  /**\r\n   * Create a SceneView.\r\n   *\r\n   * @param {string} id - the unique identifier of this view.\r\n   * @param {SmartScene} scene - the scene visualized in this view.\r\n   */\r\n  constructor(id, scene) {\r\n    super(id);\r\n\r\n    // retain derivation-specific parameters in self\r\n    this.scene = scene;\r\n  }\r\n\r\n  /**\r\n   * Get/set the draggable flag of our contained scene.\r\n   *\r\n   * @param {boolean} [draggable] - the optional setting that when\r\n   * supplied will set the scene's draggability.\r\n   *\r\n   * @returns {boolean|self} for getter: the current draggable\r\n   * setting of our contained scene, for setter: self (supporting\r\n   * chainable setters).\r\n   */\r\n  draggableScene(draggable) {\r\n    this.checkMounted('draggableScene');\r\n\r\n    if (draggable===undefined) {     // getter:\r\n      return this.scene.draggable(); // return boolean setting of our scene\r\n    }\r\n    else {                             // setter:\r\n      this.scene.draggable(draggable); //   sets our scene\r\n      return this;                     // return self (for chaining)\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Mount the visuals of this view, binding the graphics to the\r\n   * underlying canvas.\r\n   *\r\n   * Prior to `mount()` execution, the visualize-it object\r\n   * representation is very lightweight.\r\n   *\r\n   * @param {HtmlElm} containingHtmlElm - The container of this view\r\n   * (an HTML Element).\r\n   */\r\n  mount(containingHtmlElm) {\r\n  \r\n    log(`mounting SceneView id: ${this.id}`);\r\n  \r\n    // create our stage where our scene will be mounted\r\n    this.konvaStage = new Konva.Stage({\r\n      container: containingHtmlElm,\r\n      x:         0, // we assume an offset at the origin\r\n      y:         0,\r\n      width:     this.scene.width, // our size is defined within our scene\r\n      height:    this.scene.height,\r\n    });\r\n  \r\n    // mount our scene into this stage\r\n    this.scene.mount(this.konvaStage);\r\n  }\r\n\r\n\r\n  //? persistenceMethods() { // simply persists this view with it's internal state (view-size etc), and EACH comp (data node names ONLY)\r\n  //? }\r\n}\r\n","import Konva     from 'konva';\r\nimport verify    from 'util/verify';\r\nimport isString  from 'lodash.isstring';\r\n\r\n/**\r\n * SmartScene represents a graphical perspective that visualizes a system\r\n * (either in part or whole).\r\n *\r\n * - a scene contains visual components, arranged in a way that\r\n *   resembles a system\r\n *\r\n * - a scene DIRECTLY manges the width/height properties\r\n *\r\n * - multiple scenes may visualize different aspects of a system (for\r\n *   example a functional breakdown)\r\n *   * each scene INTERNALLY correlates to a separate Konva.Layer\r\n *\r\n * - FUTURE: support of user-defined functional layers:\r\n *   - scene may be further sub-divided into MULTIPLE functional layers\r\n *   - components of a scene will belong to one of these functional layers\r\n *     ... Quest: is this a direct containment, or some logical tagging?\r\n *   - this allows the visualization of these functional layers to be toggled on/off\r\n *\r\n * - FUTURE: Animation Consideration:\r\n *   - internally each scene (and their functional layers) is\r\n *     sub-divided into two Konva layers:\r\n *     - a static layer\r\n *     - an animation layer\r\n *     > NEEDS WORK: may want to do things in our static layer (like change component color)\r\n */\r\nexport default class SmartScene {\r\n\r\n  /**\r\n   * Create a SmartScene.\r\n   *\r\n   * **Please Note** this constructor uses named parameters.\r\n   *\r\n   * @param {string} id - the unique identifier of this scene.\r\n   * @param {SmartComp[]} comps - the set of components (SmartComp) that \r\n   * make up this scene (logically our display list).\r\n   * @param {int} width - the width of this scene.\r\n   * @param {int} height - the height of this scene.\r\n   */\r\n  constructor({id,\r\n               comps,\r\n               width,\r\n               height,\r\n               ...unknownArgs}={}) {\r\n\r\n    // validate SmartScene() constructor parameters\r\n    const check = verify.prefix('SmartScene() constructor parameter violation: ');\r\n\r\n    // ... id\r\n    check(id,            'id is required');\r\n    check(isString(id),  'id must be a string');\r\n\r\n    // ... comps\r\n    check(comps,                'comps is required');\r\n    check(Array.isArray(comps), 'comps must be a SmartComp[] array');\r\n\r\n    // ... width\r\n    check(width,                   'width is required');\r\n    check(Number.isInteger(width), `width must be an integer, NOT: ${width}`);\r\n    check(width>0,                 `width must be a positive integer, NOT: ${width}`);\r\n\r\n    // ... height\r\n    check(height,                   'height is required');\r\n    check(Number.isInteger(height), `height must be an integer, NOT: ${height}`);\r\n    check(height>0,                 `height must be a positive integer, NOT: ${height}`);\r\n\r\n    // ... unrecognized named parameter\r\n    const unknownArgKeys = Object.keys(unknownArgs);\r\n    check(unknownArgKeys.length === 0,  `unrecognized named parameter(s): ${unknownArgKeys}`);\r\n\r\n    // ... unrecognized positional parameter\r\n    check(arguments.length === 1,  'unrecognized positional parameters (only named parameters can be specified)');\r\n\r\n    // retain parameters in self\r\n    this.id     = id;\r\n    this.comps  = comps;\r\n    this.width  = width;\r\n    this.height = height;\r\n  //this.x = 0; // ?? crude test to see offset (no longer supported in my SceneView)\r\n  //this.y = 0; \r\n\r\n  }\r\n  \r\n  /**\r\n   * Verify self has been mounted.\r\n   * @param {string} [method] - the method name on which behalf we are checking.\r\n   */\r\n  checkMounted(method) {\r\n    verify(this.konvaLayer, `${this.constructor.name}.${method}() can only be invoked after mounting.`);\r\n  }\r\n\r\n  /**\r\n   * Get/set our draggable scene flag.\r\n   *\r\n   * @param {boolean} [draggable] - the optional setting that when\r\n   * supplied will set the scene's draggability.\r\n   *\r\n   * @returns {boolean|self} for getter: our current draggable\r\n   * setting, for setter: self (supporting chainable setters).\r\n   */\r\n  draggable(draggable) {\r\n    this.checkMounted('draggable');\r\n    if (draggable===undefined) {          // getter:\r\n      return this.konvaLayer.draggable(); // return boolean setting\r\n    }\r\n    else {                                  // setter:\r\n      this.konvaLayer.draggable(draggable); // set internal object\r\n      return this;                          // return self (for chaining)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mount the visuals of this scene, binding the graphics to the\r\n   * underlying canvas.\r\n   *\r\n   * Prior to `mount()` execution, the visualize-it object\r\n   * representation is very lightweight.\r\n   *\r\n   * @param {Konva.Stage} containingKonvaStage - The container of\r\n   * this scene (a Konva.Stage).\r\n   * @param {int} [x=0] - the optional x offset of this scene within it's container\r\n   * @param {int} [y=0] - the optional y offset of this scene within it's container\r\n   */\r\n  mount(containingKonvaStage, x=0, y=0) {\r\n\r\n    // create our layer where our components will be mounted\r\n    this.konvaLayer = new Konva.Layer({\r\n      x,\r\n      y,\r\n    });\r\n\r\n    // mount our components into this layer\r\n    this.comps.forEach( (comp) => comp.mount(this.konvaLayer) );\r\n\r\n    // wire our layer into the supplied containingKonvaStage\r\n    // ... NOTE: This must be added AFTER the layer is populated :-(\r\n    //           UNSURE WHY: seems like a Konva limitation :-(\r\n    containingKonvaStage.add(this.konvaLayer)\r\n  }\r\n\r\n  //? persistenceMethods() {\r\n  //? }\r\n}\r\n","import Konva             from 'konva';\r\n\r\nimport * as generalComps from './generalComps';\r\n\r\nimport SceneView         from 'core/SceneView';\r\nimport SmartScene        from 'core/SmartScene';\r\nimport SmartComp         from 'core/SmartComp';\r\n\r\nimport {createLogger}   from 'util/logger';\r\n\r\n// our internal diagnostic logger (keep enabled)\r\nconst log = createLogger('***DIAG*** draggableScene ... ').enable();\r\n\r\n\r\n//******************************************************************************\r\n//*** viewTestingDraggableScene: a SmartView demonstrating draggable scenes\r\n//******************************************************************************\r\n\r\n//************************\r\n// Specialized Components\r\n\r\nclass ToggleDraggableScenesButton extends SmartComp {\r\n\r\n  mount(containingKonvaLayer) {\r\n    const button = new Konva.Text({\r\n      x: 20,\r\n      y: 3,\r\n      text: 'CLICK to Toggle Draggable Scenes',\r\n      fill: 'blue',\r\n    });\r\n    button.on('click', (e) => { // TODO: CONSIDER (if needed): technique making this handler independent of the component class\r\n      viewTestingDraggableScene.draggableScene( !viewTestingDraggableScene.draggableScene() ); // TODO: CONSIDER (if needed): if we had our parent scene reference, we could invoke it directly with NO global knowledge\r\n      log(`draggableScene() 1 reset to: ${viewTestingDraggableScene.draggableScene()}`);\r\n    });\r\n    containingKonvaLayer.add(button);\r\n  }\r\n}\r\n\r\n\r\n//************************\r\n// Our scene/view objects\r\n\r\nconst scene = new SmartScene({\r\n  id: 'draggableScene',\r\n  comps: [\r\n    new generalComps.Valve1('myValve1'),\r\n    new generalComps.Valve2('myValve2'),\r\n    new generalComps.Valve3('myValve3'),\r\n    new ToggleDraggableScenesButton('myButton'),\r\n  ],\r\n  width:  300, // ?? see different numbers pass through (NO WORKY YET)\r\n  height: 250,\r\n});\r\n\r\nexport const viewTestingDraggableScene = new SceneView('viewTestingDraggableScene', scene);\r\n//? viewTestingDraggableScene.x = 30; // ?? crude test to see offset (no longer supported in my SceneView)\r\n//? viewTestingDraggableScene.y = 30;\r\n\r\n\r\n\r\n\r\n//******************************************************************************\r\n//*** viewTestingDraggableScene2: a SECOND SmartView demonstrating draggable scenes <<< VERY CRUDE TEST FOR NOW\r\n//******************************************************************************\r\n\r\n//************************\r\n// Specialized Components\r\n\r\nclass ToggleDraggableScenesButton2 extends SmartComp {\r\n\r\n  mount(containingKonvaLayer) {\r\n    const button = new Konva.Text({\r\n      x: 20,\r\n      y: 3,\r\n      text: 'CLICK to Toggle Draggable Scenes',\r\n      fill: 'blue',\r\n    });\r\n    button.on('click', (e) => { // TODO: CONSIDER (if needed): technique making this handler independent of the component class\r\n      viewTestingDraggableScene2.draggableScene( !viewTestingDraggableScene2.draggableScene() ); // TODO: CONSIDER (if needed): if we had our parent scene reference, we could invoke it directly with NO global knowledge\r\n      log(`draggableScene() 2 reset to: ${viewTestingDraggableScene2.draggableScene()}`);\r\n    });\r\n    containingKonvaLayer.add(button);\r\n  }\r\n}\r\n\r\n\r\n//************************\r\n// Our scene/view objects\r\n\r\nconst scene2 = new SmartScene({\r\n  id: 'draggableScene',\r\n  comps: [\r\n    new generalComps.Valve1('myValve1'),\r\n    new generalComps.Valve2('myValve2'),\r\n//  new generalComps.Valve3('myValve3'),\r\n    new ToggleDraggableScenesButton2('myButton'),\r\n  ],\r\n  width:  400, // ?? see different numbers pass through (NO WORKY YET)\r\n  height: 400,\r\n});\r\n\r\nexport const viewTestingDraggableScene2 = new SceneView('viewTestingDraggableScene2', scene2);\r\n","import {viewTestingDraggableScene, \r\n        viewTestingDraggableScene2} from './draggableScene';\r\n\r\n//******************************************************************************\r\n//*** konvaSandbox: the data structure driving our Konva demonstrations,\r\n//***               used to generate our LeftNav KonvaMenuPallet\r\n//******************************************************************************\r\n\r\nconst konvaSandbox = {\r\n  id:   'konvaSandbox',\r\n  desc: 'Konva Sandbox',\r\n  nodes: [\r\n    { id: 'basics', desc: 'Basics',\r\n      nodes: [\r\n        { id: 'viewTestingDraggableScene',  desc: 'Draggable Scene',   smartView: viewTestingDraggableScene,  },\r\n        { id: 'viewTestingDraggableScene2', desc: 'Draggable Scend 2', smartView: viewTestingDraggableScene2, },\r\n      ],\r\n    }\r\n  ],\r\n};\r\n\r\nexport default konvaSandbox;\r\n","import React               from 'react';\r\nimport {useRef, useEffect} from 'react';\r\n\r\n// ReactSmartView: a re-usable React Component that mounts (i.e. renders) a SmartView.\r\n//                 NOTE: This is part of util because it is a react utility \r\n//                       used by the interactive tool ... NOT a core offering!\r\nexport default function ReactSmartView({view, ...otherProps}) {\r\n\r\n  const stageElm = useRef(null);\r\n\r\n  useEffect( () => { // runs after the render is committed to the screen - BY DEFAULT after EVERY render ? may need to conditionalize this HOWEVER don't see it invoked more than once\r\n    view.mount(stageElm.current);    \r\n  }, [view]); // ??$$ see if [] fixes? ... the dependency list seems to fix redundant mounts()\r\n\r\n  // ?? crude test\r\n  // ? style={{backgroundColor: 'gray', borderWidth: 5, borderStyle: 'solid', borderColor: 'purple'}}\r\n  // ?? AI: the style characteristics (below) will be eventually gleaned from future SmartView API\r\n  //        ex: view.backgroundColor, view.width, view.height \r\n  //        THE BORDER is provided by US (not sure) to expose the view border and/or ability to edit width/height (unsure about this last one)\r\n// ??$$ we MUST get width from our view (via it's scene)\r\n  return <div ref={stageElm} {...otherProps} style={{backgroundColor: 'gray', width: 300, height: 250, border: '1px solid black'}}/>;\r\n}\r\n","import React                    from 'react';\r\n\r\nimport {useDispatch}            from 'react-redux';\r\nimport {useFassets}             from 'feature-u';\r\n\r\nimport konvaSandbox             from '../konvaSandbox';\r\n\r\nimport {registerTab}            from 'featureResources';\r\nimport genDualClickHandler      from 'util/genDualClickHandler';\r\nimport {createLogger}           from 'util/logger';\r\nimport ReactSmartView           from 'util/ReactSmartView';\r\n\r\nimport {LeftNavCollapsibleItem} from 'featureResources';\r\nimport ExpandLessIcon           from '@material-ui/icons/ExpandMore';   // in effect WHEN EXPANDED  ... i.e. clicking will collapse\r\nimport ExpandMoreIcon           from '@material-ui/icons/ChevronRight'; // in effect WHEN COLLAPSED ... i.e. clicking will expand\r\nimport TreeItem                 from '@material-ui/lab/TreeItem';\r\nimport TreeView                 from '@material-ui/lab/TreeView';\r\nimport {makeStyles}             from '@material-ui/core/styles';\r\n\r\n// our internal diagnostic logger (normally disabled)\r\nconst log = createLogger('***DIAG*** <KonvaMenuPallet> ... ').disable();\r\n\r\n/**\r\n * KonvaMenuPallet: \r\n *\r\n * A sandbox pallet showcasing visualize-it integration's with Konva.\r\n */\r\nfunction KonvaMenuPallet() {\r\n\r\n  const classes     = useStyles();\r\n\r\n  const tabActivationHandlers = useTabActivationHandlers(konvaSandbox.nodes);\r\n\r\n  // KOOL: here is our TreeView/TreeItem generation process driven by our data!\r\n  return (\r\n    <LeftNavCollapsibleItem name={konvaSandbox.desc}>\r\n      <TreeView className={classes.root}\r\n                defaultCollapseIcon={<ExpandLessIcon/>}\r\n                defaultExpandIcon={<ExpandMoreIcon/>}>\r\n        { genTreeItemFromData(konvaSandbox.nodes, tabActivationHandlers) }\r\n      </TreeView>\r\n    </LeftNavCollapsibleItem>\r\n  );\r\n\r\n}\r\n// PERF: memo is critical (re-render is frequent and we do a lot of processing to generate our render)\r\nexport default React.memo(KonvaMenuPallet);\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n  root: {\r\n    // height: 216, // WowZee: Omitting height FIXED the tree, allowing it's height to grow dynamically\r\n    flexGrow: 1,\r\n    maxWidth: 400,\r\n  },\r\n}) );\r\n\r\n\r\n\r\n// our process for Tab Registration from our data structure\r\nfunction registerTabsFromData(nodes, accumulativeId=konvaSandbox.id) {\r\n\r\n  // iterate over all our direct children\r\n  nodes.forEach( (node) => {\r\n    const id = `${accumulativeId}-${node.id}`;\r\n\r\n    // for non-leaf nodes (with children):\r\n    // ... keep drilling into our structure USING recursion\r\n    if (node.nodes) {\r\n      log(`registerTabsFromData(): TreeItem non-leaf node ... id: ${id}`);\r\n      registerTabsFromData(node.nodes, id);\r\n    }\r\n\r\n    // for leaf nodes (without children):\r\n    // ... register this entry with our Tab Registry\r\n    else {\r\n      log(`registerTabsFromData(): TreeItem leaf node ... id: ${id}`);\r\n      registerTab(id, node.desc, () => (\r\n        <ReactSmartView view={node.smartView}/>\r\n      ));\r\n    }\r\n  });\r\n}\r\nregisterTabsFromData(konvaSandbox.nodes, konvaSandbox.id); // register our Tabs NOW!!!\r\n\r\n\r\n\r\n// pre-carve out all the tabActivationHandlers we need in the entire process\r\n// PERF: this is an optimization that minimizes re-rendering\r\n//       due to anonymous function reference props constantly changing\r\n//       HOWEVER not really a concern\r\n//       ... due to the top-level memoization of KonvaMenuPallet\r\nfunction useTabActivationHandlers(nodes) {\r\n\r\n  const dispatch    = useDispatch();\r\n  const activateTab = useFassets('actions.activateTab');\r\n\r\n  log(`in useTabActivationHandlers()`);\r\n\r\n  // PERF: consider useCallback()\r\n  //       HOWEVER not really needed\r\n  //       ... due to the top-level memoization of KonvaMenuPallet\r\n  // NOTE: technically 2nd param (tabName) is NOT needed, but kept for diagnostic logging\r\n  const handleActivateTab = (tabId, tabName, preview) => {\r\n    log(`handleActivateTab( tabId:'${tabId}', tabName:'${tabName}', preview=${preview} )`);\r\n    dispatch( activateTab(tabId, preview) );\r\n  };\r\n\r\n  const dualHandleActivateTab = genDualClickHandler(\r\n    (tabId, tabName) => handleActivateTab(tabId, tabName, true), // singleClick: preview   tab ... preview is true\r\n    (tabId, tabName) => handleActivateTab(tabId, tabName, false) // doubleClick: permanent tab ... preview is false\r\n  );\r\n\r\n  // PERF: this is ALWAYS GOING TO return a new item \r\n  //       HOWEVER not really a concern\r\n  //       ... due to the top-level memoization of KonvaMenuPallet\r\n  return genTabActivationHandlers(nodes, dualHandleActivateTab);\r\n\r\n}\r\n\r\n// the recursive generator\r\nfunction genTabActivationHandlers(nodes,\r\n                                  rootHandler,\r\n                                  accumulativeId=konvaSandbox.id,\r\n                                  handlers={}) {\r\n\r\n  // iterate over all our direct children\r\n  nodes.forEach( (node) => {\r\n    const id = `${accumulativeId}-${node.id}`;\r\n\r\n    // for non-leaf nodes (with children):\r\n    // ... keep drilling into our structure USING recursion\r\n    if (node.nodes) {\r\n      log(`genTabActivationHandlers(): TreeItem non-leaf node ... id: ${id}, desc: ${node.desc}`);\r\n      genTabActivationHandlers(node.nodes, rootHandler, id, handlers);\r\n    }\r\n\r\n    // for leaf nodes (without children):\r\n    // ... accumulate the needed handler\r\n    else {\r\n      log(`genTabActivationHandlers(): TreeItem leaf node ... id: ${id}, desc: ${node.desc}`);\r\n      // NOTE: technically 2nd param (tabName) is NOT needed, but kept for diagnostic logging\r\n      handlers[id] = () => rootHandler(id, node.desc);\r\n    }\r\n  });\r\n\r\n  return handlers;\r\n}\r\n\r\n\r\n// morph our data into TreeView/TreeItem structure USING recursion\r\nfunction genTreeItemFromData(nodes, tabActivationHandlers, accumulativeId=konvaSandbox.id) {\r\n\r\n  return nodes.map( (node) => {\r\n\r\n    const id = `${accumulativeId}-${node.id}`;\r\n\r\n    // for non-leaf nodes (with children):\r\n    // ... generate a parent TreeItem with child nodes USING recursion\r\n    if (node.nodes) {\r\n      log(`genTreeItemFromData(): TreeItem non-leaf node ... id: ${id}`);\r\n      return (\r\n        <TreeItem key={id}\r\n                  nodeId={id}\r\n                  label={node.desc}>\r\n          {genTreeItemFromData(node.nodes, tabActivationHandlers, id)}\r\n        </TreeItem>\r\n      );\r\n    }\r\n\r\n    // for leaf nodes (without children):\r\n    // ... generate a leaf TreeItem with our registered event handler\r\n    else {\r\n      log(`genTreeItemFromData(): TreeItem leaf node ... id: ${id}`);\r\n      return (\r\n        <TreeItem key={id}\r\n                  nodeId={id}\r\n                  label={node.desc}\r\n                  onClick={tabActivationHandlers[id]}/>\r\n      );\r\n    }\r\n  });\r\n\r\n}\r\n","import {createFeature}  from 'feature-u';\r\nimport featureFlags     from 'featureFlags'\r\nimport initSandbox      from './initSandbox';\r\n\r\n// feature: sandbox\r\n//          sandbox to play with konva.js\r\nexport default createFeature({\r\n  name:    'sandbox',\r\n  enabled: featureFlags.sandbox,\r\n  appInit: initSandbox,\r\n});\r\n","import React                    from 'react';\r\nimport Divider                  from '@material-ui/core/Divider';\r\nimport {LeftNavCollapsibleItem} from 'featureResources';\r\nimport SampleMenuPallet         from './comp/SampleMenuPallet';\r\nimport KonvaMenuPallet          from './comp/KonvaMenuPallet';\r\n\r\n\r\n// ***\r\n// *** Initialize the sandbox feature, via the feature-u appInit() life-cycle-hook.\r\n// ***\r\n\r\nexport default function initSandbox({showStatus, fassets, appState, dispatch}) {\r\n\r\n  // register our SampleMenuPallet to the LeftNav\r\n  dispatch( fassets.actions.addLeftNavItem('999-SampleMenuPallet', () => (\r\n    <>\r\n      <KonvaMenuPallet/>\r\n      <Divider/>\r\n      <LeftNavCollapsibleItem name=\"Sample Pallet\">\r\n        <SampleMenuPallet/>\r\n      </LeftNavCollapsibleItem>\r\n      <Divider/>\r\n    </>\r\n  )) );\r\n\r\n}\r\n","import verify         from 'util/verify';\r\nimport isString       from 'lodash.isstring';\r\nimport isPlainObject  from 'lodash.isplainobject';\r\n\r\n\r\n/**\r\n * Encode the supplied ref into a string representation.\r\n *\r\n * - supporting an optional safeguard (obfuscate content making it\r\n *   obscure to public visibility)\r\n *\r\n * - employing embedded-recognition so the process can be reversed using\r\n *   self-recognition\r\n *\r\n * TERMINOLOGY:\r\n *\r\n * - encode:  package content into a string representation (which can\r\n *            be reversed) ... ex: obj2str\r\n *\r\n * - decode:  reverse the process of encode()\r\n *\r\n * - safeguard: obfuscate content so as to make it obscure to public\r\n *              visibility\r\n *              NOTE: this is a \"lighter weight\" process than full\r\n *                    encryption\r\n *\r\n * - embedded-recognition: the ability to recognize and reverse the\r\n *                         process of either encoding and/or\r\n *                         safeguarding, producing the original\r\n *                         ref (that was originally encoded)\r\n *\r\n * @param {string|jsonObj} ref the reference to encode\r\n * @param {boolean} [safeguard=false] an indicator as to whether the\r\n * result should be obfuscated (true) or not (false - the DEFAULT).\r\n * \r\n * @return {string} an encoded representation of the supplied ref.\r\n */\r\nexport function encode(ref, safeguard=false) {\r\n\r\n  // validate our parameters\r\n  const check = verify.prefix('encode(ref) parameter violation: ');\r\n\r\n  // ... ref\r\n  check(ref,                                 'ref is required');\r\n  check(isString(ref) || isPlainObject(ref), 'ref must be a string -or- an object literal. NOT: ', ref);\r\n\r\n  // ... safeguard\r\n  check(safeguard===true || safeguard===false, 'safeguard must be a boolean (true/false), NOT: ', safeguard);\r\n\r\n  // encode the supplied ref into a string representation\r\n  let encoding = ref;            // ... by default, a string is left un-touched\r\n  if (isPlainObject(encoding)) { // ... encode objects\r\n    encoding = demarkObjEncoding + JSON.stringify(encoding);\r\n  }\r\n\r\n  // safeguard, when requested\r\n  if (safeguard) {\r\n    encoding = demarkSafeguard + obfuscate(encoding);\r\n  }\r\n\r\n  // thats all folks :-)\r\n  return encoding;\r\n}\r\n\r\n\r\n/**\r\n * Decode the supplied ref, reversing the process of `encode()`.\r\n * \r\n * NOTE: `decode()` can be invoked on a non-encoded ref, in which case\r\n *       it will simply pass-through the un-encoded ref.  This is a\r\n *       convenience, and is made possible by embedded-recognition.\r\n * \r\n * @param {any} ref the reference object to decode ... either the\r\n * output of `encode()` (a recognized encoded string), or any other\r\n * reference (simply passed-through).\r\n * \r\n * @return {any} the decoded representation of the supplied ref.\r\n */\r\nexport function decode(ref) {\r\n\r\n  // validate our parameters\r\n  const check = verify.prefix('decode(ref) parameter violation: ');\r\n\r\n  // ... ref\r\n  check(ref, 'ref is required');\r\n\r\n  // simply pass-through any non-strig ref\r\n  if (!isString(ref)) {\r\n    return ref;\r\n  }\r\n\r\n  // KEY: at this point we know ref is a string :-)\r\n  let result = ref;\r\n\r\n  // unwind any safeguards\r\n  if (result.indexOf(demarkSafeguard) === 0) {\r\n    result = result.substring(demarkSafeguard.length);\r\n    result = deobfuscate(result);\r\n  }\r\n\r\n  // unwind any encodings\r\n  if (result.indexOf(demarkObjEncoding) === 0) {\r\n    result = result.substring(demarkObjEncoding.length);\r\n    result = JSON.parse(result);\r\n  }\r\n\r\n  // thats all folks :-)\r\n  return result;\r\n}\r\n\r\n// embedded-recognition keywords\r\nconst demarkObjEncoding = 'obj2str:';\r\nconst demarkSafeguard   = 'afesa'; // ... use a obsecure phrase, so as to NOT \"stand out\"\r\n                                   //     - pig Latin for \"safe\"\r\n                                   //     - preventing it from being uniquely identified\r\n                                   //       and harvested within a global deployment\r\n\r\n\r\nfunction obfuscate(str) {\r\n  if (!window.btoa) {\r\n    throw new Error('*** ERROR *** encode(): ENCODING NOT supported by this browser (btoa).');\r\n  }\r\n  const encoding = window.btoa(str);\r\n  return encoding;\r\n}\r\n\r\nfunction deobfuscate(str) {\r\n  if (!window.atob) {\r\n    throw new Error('*** ERROR *** encode(): DECODING NOT supported by this browser (atob).');\r\n  }\r\n  const clearTxt = window.atob(str);\r\n  return clearTxt;\r\n}\r\n","import firebase  from 'firebase/app';\r\nimport {decode}  from 'util/encoder';\r\n\r\n// initialize the Google Firebase service\r\n// ... a feature-u app-life-cycle-hook\r\nexport default async function initializeFirebase({showStatus, fassets, appState, dispatch}) {\r\n\r\n  // inform user what we are doing\r\n  showStatus('Initializing Firebase');\r\n  \r\n  // fetch our FireBase App Configuration from our own deployment site: `public/fbac`\r\n  const resp = await fetch('fbac'); // NOTE: relative path support server deployment in sub-directory\r\n  \r\n  // console.log(`xx resp.ok: ${resp.ok}, resp.status: ${resp.status} ... resp: `, resp);\r\n  if (!resp.ok) {\r\n    // NOTE: Due to routing considerations, a non-existent resource is allowed,\r\n    //       AND returns the entire content of index.html\r\n    //       IN OTHER WORDS: this condition is NEVER EXECUTED (i.e. resp.ok is ALWAYS true)\r\n    //       ... (see check below)\r\n    throw new Error(`**ERROR** Accessing /fbac resource was REJECTED with status: ${resp.status}`);\r\n  }\r\n  \r\n  // convert response to text\r\n  const txt = await resp.text();\r\n  \r\n  // check for non-existent resource (see NOTE above)\r\n  if (txt.includes('<html')) {\r\n    // NOTE: this is the only real error we will ever emit\r\n    throw new Error(`**ERROR** Non Existent Resource: /fbac`);\r\n  }\r\n  \r\n  // decode our credentials\r\n  // console.log(`xx /fbac resource content: '${txt}'`);\r\n  const firebaseAppConfig = decode(txt);\r\n  // console.log('xx firebaseAppConfig: ', firebaseAppConfig);\r\n  \r\n  // process our credentials\r\n  // NOTE: THE initializeApp() invocation generates absolutely NO error condition\r\n  //       - for example if the API key is invalid it executes through (even with a try/catch), \r\n  //         and we receive runtime errors when attempting to use the service (ex: login screen)\r\n  //         ... Error: Your API key is invalid, please check you have copied it correctly.\r\n  await firebase.initializeApp(firebaseAppConfig);\r\n}\r\n","import {createFeature}     from 'feature-u';\r\nimport featureFlags        from 'featureFlags';\r\nimport initializeFirebase  from './initializeFirebase';\r\n\r\n// feature: initFirebase\r\n//          initialize the Google Firebase service (when needed)\r\nexport default createFeature({\r\n  name: 'initFirebase',\r\n\r\n  // firebase is only required when we are using real services (i.e. when WIFI enabled)\r\n  enabled: featureFlags.useWIFI,\r\n\r\n  appInit: initializeFirebase,\r\n});\r\n","import {generateActions} from 'action-u';\r\nimport _baseUI           from './featureName';\r\n\r\nexport default generateActions.root({\r\n  [_baseUI]: { // prefix all actions with our feature name, guaranteeing they unique app-wide!\r\n\r\n    toggleUITheme: { // actions.toggleUITheme(): Action\r\n                     // > toggle the UI Theme ('light'/'dark')\r\n                     actionMeta: {},\r\n    },\r\n\r\n    setResponsiveMode: {  // actions.setResponsiveMode(responsiveMode): Action\r\n                          // > change the responsiveMode to the supplied value ('md'/'lg'/'off')\r\n                          actionMeta: {\r\n                            traits: ['responsiveMode'],\r\n                          },\r\n    },\r\n\r\n    changeView: {  // actions.changeView(viewName): Action\r\n                   // > change the curView to the supplied viewName\r\n                   actionMeta: {\r\n                     traits: ['viewName'],\r\n                   },\r\n    },\r\n\r\n    addLeftNavItem: { // actions.addLeftNavItem(leftNavKey, LeftNavComp): Action\r\n                      // > add a new LeftNav menu item to the LeftNav (ordered by leftNavKey)\r\n                      actionMeta: {\r\n                        traits: ['leftNavKey', 'LeftNavComp'],\r\n                      },\r\n    },\r\n\r\n    removeLeftNavItem: { // actions.removeLeftNavItem(leftNavKey): Action\r\n                         // > removed the supplied LeftNav menu item\r\n                         actionMeta: {\r\n                           traits: ['leftNavKey'],\r\n                         },\r\n    },\r\n\r\n  },\r\n});\r\n","/**\r\n * Expose our featureName through a mini-meta module that is\r\n * \"importable\" in all use-cases (a single-source-of-truth).\r\n */\r\nexport default 'baseUI';\r\n","/**\r\n * A \"no op\" function that does absolutely nothing (think IEFBR14 :-)\r\n */\r\nexport default function noOp() {\r\n}\r\n","import verify         from 'util/verify';\r\nimport isString       from 'lodash.isstring';\r\nimport isPlainObject  from 'lodash.isplainobject';\r\nimport noOp           from 'util/noOp';\r\nimport {encode,\r\n        decode}       from 'util/encoder';\r\n\r\n/**\r\n * Store the supplied entry in local device storage.\r\n *\r\n * @param {string} key the unique key that catalogs this entry.\r\n * @param {string|jsonObj} ref the reference to store.\r\n * @param {boolean} [safeguard=false] an indicator as to whether the\r\n * entry should be obfuscated (true) or not (false - the DEFAULT).\r\n */\r\nexport function storeItem(key, ref, safeguard=false) {\r\n\r\n  // validate our parameters\r\n  const check = verify.prefix('storeItem() parameter violation: ');\r\n\r\n  // ... key\r\n  check(key,           'key is required');\r\n  check(isString(key), 'key must be a string, NOT: ', key);\r\n\r\n  // ... ref\r\n  check(ref,                                 'ref is required');\r\n  check(isString(ref) || isPlainObject(ref), 'ref must be a string -or- an object literal, NOT: ', ref);\r\n\r\n  // ... safeguard\r\n  check(safeguard===true || safeguard===false, 'safeguard must be a boolean (true/false), NOT: ', safeguard);\r\n\r\n  // encode the supplied ref into a string representation\r\n  // SUPPORTING:\r\n  //   - object encoding (to a string representation)\r\n  //     NOTE: plain strings are NOT altered in this operation\r\n  //   - safeguard (obfuscation)\r\n  const value = encode(ref, safeguard);\r\n\r\n  // store the entry into our deviceStorage\r\n  deviceStorage.setItem(key, value);\r\n}\r\n\r\n\r\n/**\r\n * Fetch the stored entry from local device storage.\r\n *\r\n * @param {string} key the unique key that catalogs this entry.\r\n * \r\n * @return {any} the entry stored from the supplied key (null for\r\n * none), implicitly unpacked to the original ref (supplied to\r\n * `storeItem()`).\r\n */\r\nexport function fetchItem(key) {\r\n\r\n  // validate our parameters\r\n  const check = verify.prefix('fetchItem() parameter violation: ');\r\n\r\n  // ... key\r\n  check(key,           'key is required');\r\n  check(isString(key), 'key must be a string, NOT: ', key);\r\n\r\n  // retrieve the entry from our deviceStorage\r\n  const value = deviceStorage.getItem(key);\r\n\r\n  // no-op for non-existent entries\r\n  if (!value) {\r\n    return null;\r\n  }\r\n\r\n  // decode the entry, unpacking it into the original form (ref)\r\n  const ref = decode(value);\r\n\r\n  // that's all folks :-)\r\n  return ref;\r\n}\r\n\r\n\r\n\r\n/**\r\n * Remove the stored entry from local device storage.\r\n *\r\n * @param {string} key the unique key of the entry to remove.\r\n */\r\nexport function removeItem(key) {\r\n\r\n  // validate our parameters\r\n  const check = verify.prefix('removeItem() parameter violation: ');\r\n\r\n  // ... key\r\n  check(key,           'key is required');\r\n  check(isString(key), 'key must be a string, NOT: ', key);\r\n\r\n  // remove the entry from our local device storage\r\n  deviceStorage.removeItem(key);\r\n}\r\n\r\n\r\n\r\n\r\n//***\r\n//*** Abstract the Web Storage API (gracefully no-oping for unsupported browsers)\r\n//***\r\n//***  NOTE 1: This API is synchronous!\r\n//***  NOTE 2: Apparently this API is available on both http (non SSL) as well as https (SSL).\r\n//***\r\n\r\n// feature detection\r\n// ... NOTE: can't just assert window.localStorage exists\r\n//           see: https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Feature-detecting_localStorage\r\nconst _localStorageAvailable = storageAvailable('localStorage');\r\nfunction storageAvailable(type) {\r\n  let storage;\r\n  try {\r\n    storage = window[type];\r\n    let x = '__storage_test__';\r\n    storage.setItem(x, x);\r\n    storage.removeItem(x);\r\n    return true;\r\n  }\r\n  catch(e) {\r\n    return e instanceof DOMException && (\r\n      // everything except Firefox\r\n      e.code === 22 ||\r\n      // Firefox\r\n      e.code === 1014 ||\r\n      // test name field too, because code might not be present\r\n      // everything except Firefox\r\n      e.name === 'QuotaExceededError' ||\r\n      // Firefox\r\n      e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\r\n           // acknowledge QuotaExceededError only if there's something already stored\r\n           (storage && storage.length !== 0);\r\n  }\r\n}\r\n\r\n// log warning when deviceStorage is NOT in affect\r\nif (!_localStorageAvailable) {\r\n  console.warn('***WARNING*** deviceStorage module ... localStorage (Web Storage API) is NOT available in this browser ... all deviceStorage usage will silently no-op!!');\r\n}\r\n\r\n// our localStorage pass-through that gracefully no-ops for unsupported browsers\r\nconst deviceStorage = _localStorageAvailable ? {\r\n  setItem:    (keyName, keyValue) => window.localStorage.setItem(keyName, keyValue),\r\n  getItem:    (keyName)           => window.localStorage.getItem(keyName),\r\n  removeItem: (keyName)           => window.localStorage.removeItem(keyName),\r\n} : {\r\n  setItem:    noOp,\r\n  getItem:    noOp,\r\n  removeItem: noOp,\r\n};\r\n\r\n// TEMP crude test of deviceStorage ... invoke these separately!\r\n// deviceStorage.setItem('WowZeeKey', 'WowZeeValue');\r\n// console.log(`test deviceStorage ... '${deviceStorage.getItem('WowZeeKey')}'`);\r\n","import {storeItem,\r\n        fetchItem,\r\n        removeItem}   from 'util/deviceStorage';\r\n\r\n/**\r\n * Store uiTheme on local device.\r\n * \r\n * @param {string} uiTheme the UI Theme to store.\r\n */\r\nexport function storeUITheme(uiTheme) {\r\n  storeItem(uiThemeKey, uiTheme);\r\n}\r\n\r\n/**\r\n * Fetch uiTheme stored on local device (if any).\r\n * \r\n * @return {string} the persisted UI Theme (null for none).\r\n */\r\nexport function fetchUITheme() {\r\n  return fetchItem(uiThemeKey);\r\n}\r\n\r\n/**\r\n * Remove uiTheme from local device.\r\n */\r\nexport function removeUITheme() {\r\n  removeItem(uiThemeKey);\r\n}\r\n\r\nconst uiThemeKey = 'uiTheme';\r\n","import {storeItem,\r\n        fetchItem,\r\n        removeItem}   from 'util/deviceStorage';\r\n\r\n/**\r\n * Store the responsiveMode on local device.\r\n * \r\n * @param {string} responsiveMode the \"responsive mode\" to store.\r\n */\r\nexport function storeResponsiveMode(responsiveMode) {\r\n  storeItem(responsiveModeKey, responsiveMode);\r\n}\r\n\r\n/**\r\n * Fetch responsiveMode stored on local device (if any).\r\n * \r\n * @return {string} the persisted \"responsive mode\" (null for none).\r\n */\r\nexport function fetchResponsiveMode() {\r\n  return fetchItem(responsiveModeKey);\r\n}\r\n\r\n/**\r\n * Remove responsiveMode from local device.\r\n */\r\nexport function removeResponsiveMode() {\r\n  removeItem(responsiveModeKey);\r\n}\r\n\r\nconst responsiveModeKey = 'responsiveMode';\r\n","import {expandWithFassets}    from 'feature-u';\r\nimport {combineReducers}      from 'redux';\r\nimport {reducerHash}          from 'astx-redux-util';\r\nimport {slicedReducer}        from 'feature-redux';\r\nimport _baseUI                from './featureName';\r\nimport _baseUIAct             from './actions';\r\nimport {fetchUITheme}         from './uiThemeStorage';\r\nimport {fetchResponsiveMode}  from './responsiveModeStorage';\r\nimport {createSelector}       from 'reselect';\r\nimport {fnRefEncode,\r\n        fnRefDecode}          from 'util/reduxFnRef';\r\n\r\n\r\n// ***\r\n// *** Our feature reducer, managing our state.\r\n// ***\r\n\r\nconst reducer = slicedReducer(_baseUI, expandWithFassets( (fassets) => combineReducers({\r\n\r\n  // uiTheme: 'light'/'dark'\r\n  uiTheme: reducerHash({\r\n    [_baseUIAct.toggleUITheme]: (state, action) => state==='dark' ? 'light' : 'dark',\r\n  }, fetchUITheme() ), // initialState (default to a persistent state)\r\n\r\n  // responsiveMode: 'md'/'lg'/'off'\r\n  responsiveMode: reducerHash({\r\n    [_baseUIAct.setResponsiveMode]: (state, action) => action.responsiveMode,\r\n  }, fetchResponsiveMode() || 'sm' ), // initialState (from device storage, default to small (a tablet))\r\n\r\n  // the current view\r\n  curView: reducerHash({ // TODO: suspect curView is OBSOLETE for visualize-it ... we are using the dynamic Tab Manager\r\n    [_baseUIAct.changeView]:   (state, action) => action.viewName,\r\n//  AI: DECIDE_AUTH_USER_NEEDED\r\n//  [fassets.actions.signOut]: (state, action) => 'eateries', // AI: Inappropriate app knowledge dependency (really part of an @@INIT app payload) ... AI: streamline in \"INITIALIZATION\" journal entry\r\n  }, 'uninitialized'), // initialState\r\n\r\n  // leftNavItems: {leftNavKey1: LeftNavComp1, leftNavKey2: LeftNavComp2, ...}\r\n  leftNavItems: reducerHash({\r\n    [_baseUIAct.addLeftNavItem]:    (state, action) => ({...state, ...{[action.leftNavKey]: fnRefEncode(action.LeftNavComp)}}),\r\n    [_baseUIAct.removeLeftNavItem]: (state, action) => {\r\n      const {[action.leftNavKey]: omit, ...remainder} = state;\r\n      return remainder;\r\n    },\r\n  }, {}), // initialState\r\n\r\n}) ) );\r\n\r\nexport default reducer;\r\n\r\n\r\n// ***\r\n// *** Various Selectors\r\n// ***\r\n\r\n/** Our feature state root (via slicedReducer as a single-source-of-truth) */\r\nconst getFeatureState           = (appState) => reducer.getSlicedState(appState);\r\nconst gfs = getFeatureState;      // ... concise alias (used internally)\r\n\r\n                                  /** UI Theme: 'light'/'dark' */\r\nexport const getUITheme         = (appState) => gfs(appState).uiTheme || 'light'; // default to 'light' (on first occurrence -or- deviceStorage() NOT supported)\r\n\r\n                                  /** Responsive Mode: 'md'/'lg'/'off' */\r\nexport const getResponsiveMode  = (appState) => gfs(appState).responsiveMode;\r\n\r\n                                  /** current view (ex: 'eateries') */\r\nexport const curView            = (appState) => gfs(appState).curView;\r\n\r\n                                       /** raw leftNavItems */\r\nconst getLeftNavItems = (appState)  => gfs(appState).leftNavItems;\r\n\r\n                                       /** ordered leftNavItems */\r\nexport const getOrderedLeftNavItems  = createSelector( // return: [ [leftNavKey1, LeftNavItem1], [leftNavKey2, LeftNavItem2], ... ]\r\n  getLeftNavItems,\r\n  (leftNavItems) => {\r\n\r\n    // convert to [ [leftNavKey1, encodedLeftNavItem1], [leftNavKey2, encodedLeftNavItem2], ... ]\r\n    const encodedEntries = Object.entries( leftNavItems );\r\n\r\n    // decode component functions [ [leftNavKey1, LeftNavItem1], [leftNavKey2, LeftNavItem2], ... ]\r\n    const entries = encodedEntries.map( ([leftNavKey, encodedLeftNavComp]) => [leftNavKey, fnRefDecode(encodedLeftNavComp)]);\r\n\r\n    // order by leftNavKey\r\n    const orderedEntries = entries.sort( ([k1], [k2]) => k1.localeCompare(k2) );\r\n\r\n    return orderedEntries;\r\n  }\r\n);\r\n","/**\r\n * A function encoding technique which allows function references to be\r\n * visible in Redux DevTools.\r\n * \r\n * As a general rule, redux recommends using plain serializable state within.\r\n * ... https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state\r\n * \r\n * In some cases, however, the dynamics afforded by using functional state\r\n * (or react functional components) is extremely powerful.\r\n * \r\n * If you are NOT relying on the ability to persist and rehydrate redux\r\n * state, you may wish to use functional state to gain additional\r\n * dynamics in advanced systems.\r\n * \r\n * Functional state does in fact work, with the caveats mentioned above,\r\n * however one \"quirkiness\" is that functional state is completely\r\n * invisible in the Redux DevTools ... which can be rather confusing :-(\r\n * \r\n * This simple wrapper, provides visibility of functions (and react\r\n * functional components) held within your redux store.\r\n * \r\n * ```js\r\n * someState: {               // Redux DevTools\r\n *   field1: fn,              // completely hidden: it is functional, just confusing\r\n *   field2: fnRefEncode(fn), // visible as:        field2: {fnRef: \"hidden in Redux DevTools\"}\r\n * }\r\n * ```\r\n * \r\n * When using this wrapper, don't forget to decode it ... for example\r\n * \r\n * ```js\r\n * fnRefDecode(someState.field2)(); // invocation of encoded redux state function\r\n * ```\r\n */\r\n\r\nexport const fnRefEncode = (fn) => ({fn, fnRef: 'hidden in Redux DevTools'});\r\n\r\nexport const fnRefDecode = (fnRef) => fnRef.fn;\r\n","import {createLogic}          from 'redux-logic';\r\nimport _baseUI                from './featureName';\r\nimport _baseUIAct             from './actions';\r\nimport {getUITheme,\r\n        getResponsiveMode}    from './state';\r\nimport {storeUITheme}         from './uiThemeStorage';\r\nimport {storeResponsiveMode}  from './responsiveModeStorage';\r\n\r\n/**\r\n * Monitor UI Theme changes, persisting the latest theme in our device storage.\r\n */\r\nexport const persistUITheme = createLogic({\r\n\r\n  name: `${_baseUI}.persistUITheme`,\r\n  type: String(_baseUIAct.toggleUITheme),\r\n\r\n  process({getState, action, fassets}, dispatch, done) {\r\n    storeUITheme( getUITheme(getState()) );\r\n    done();\r\n  },\r\n\r\n});\r\n\r\n\r\n/**\r\n * Monitor responsiveMode changes, persisting the latest in our device storage.\r\n */\r\nexport const persistResponsiveMode = createLogic({\r\n\r\n  name: `${_baseUI}.persistResponsiveMode`,\r\n  type: String(_baseUIAct.setResponsiveMode),\r\n\r\n  process({getState, action, fassets}, dispatch, done) {\r\n    storeResponsiveMode( getResponsiveMode(getState()) );\r\n    done();\r\n  },\r\n\r\n});\r\n\r\n\r\n// promote all logic modules for this feature\r\n// ... NOTE: individual logic modules are unit tested using the named exports.\r\nexport default [\r\n  persistUITheme,\r\n  persistResponsiveMode,\r\n];\r\n","import React                    from 'react';\r\n\r\nimport {makeStyles}             from '@material-ui/core/styles';\r\n\r\nimport Drawer                   from '@material-ui/core/Drawer';\r\nimport List                     from '@material-ui/core/List';\r\nimport Toolbar                  from '@material-ui/core/Toolbar';\r\n\r\nimport {getOrderedLeftNavItems} from '../state';\r\nimport {useSelector}            from 'react-redux'\r\n\r\n\r\n/**\r\n * LeftNav: our LeftNav component that accumulates menu items \r\n * via a programmatic API: fassets.action.activateTab()\r\n */\r\nexport default function LeftNav() {\r\n\r\n  const classes = useStyles();\r\n\r\n  const orderedLeftNavItems = useSelector((appState) => getOrderedLeftNavItems(appState), []);\r\n\r\n  // LeftNav is dynamic, only displayed when it has entries\r\n  if (orderedLeftNavItems.length <= 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Drawer className={classes.leftNav}\r\n            variant=\"permanent\"\r\n            classes={{\r\n              paper: classes.leftNavPaper,\r\n            }}>\r\n\r\n      <Toolbar variant=\"dense\"\r\n               comment=\"spacer (hidden UNDER AppBar) so our LeftNav isn't covered up by the AppBar\"/>\r\n\r\n      <List>\r\n        {orderedLeftNavItems.map( ([leftNavKey, LeftNavComp]) => <LeftNavComp key={leftNavKey}/> )}\r\n      </List>\r\n    </Drawer>\r\n  );\r\n}\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n\r\n  leftNav: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n\r\n  leftNavPaper: { // match same width in our LeftNav Drawer usage\r\n    width: drawerWidth,\r\n\r\n    //? // AI: ?? try some simple css (advanced) TO implement resizing\r\n    //? // RESULT: KINDA WORKS \r\n    //? //         - only operates in Chrome (NOT Edge) ... didn't test anything else\r\n    //? //         - resizes the LeftNav GREAT\r\n    //? //         - does NOT propagate to other elms (just overlays the main page) ... prob need some programmatic event handler\r\n    //? //         - kinda quirky (with little corner frame)\r\n    //? resize: 'horizontal', // KOOL: kinda works\r\n    //? // NOT NEEDED: border: '1px solid #333',\r\n    //? // NOT NEEDED: overflow: 'auto',\r\n  },\r\n\r\n}) );\r\n\r\n\r\n\r\n","import React,\r\n       {useState,\r\n        useCallback,\r\n        useMemo}      from 'react';\r\n//import PropTypes      from 'prop-types'; ... AI: DECIDE_AUTH_USER_NEEDED\r\n\r\nimport {useFassets}   from 'feature-u';\r\n\r\nimport IconButton     from '@material-ui/core/IconButton';\r\nimport Menu           from '@material-ui/core/Menu';\r\nimport UserIcon       from '@material-ui/icons/AccountCircle';\r\n//import Typography     from '@material-ui/core/Typography'; ... AI: DECIDE_AUTH_USER_NEEDED\r\n\r\n\r\n/**\r\n * UserMenu: our UserMenu component that accumulates menu items via use contract.\r\n */\r\nexport default function UserMenu({curUser}) {\r\n\r\n  const [anchorUserMenu, setAnchorUserMenu] = useState(null);\r\n  const userMenuOpen = useMemo(() => Boolean(anchorUserMenu), [anchorUserMenu]);\r\n\r\n  const openUserMenu = useCallback((event) => setAnchorUserMenu(event.currentTarget), []);\r\n  _closeUserMenu     = useCallback(()      => setAnchorUserMenu(null),                []);\r\n\r\n  const userMenuItems        = useFassets('AppMotif.UserMenuItem.*@withKeys');\r\n  const orderedUserMenuItems = useMemo(() => (\r\n    [...userMenuItems].sort(([item1Key], [item2Key]) => item1Key.localeCompare(item2Key))\r\n  ), [userMenuItems]);\r\n\r\n  return (\r\n    <div>\r\n      <IconButton color=\"inherit\"\r\n                  onClick={openUserMenu}>\r\n        <UserIcon/>\r\n        {/* ... AI: DECIDE_AUTH_USER_NEEDED\r\n        <Typography variant=\"subtitle2\" color=\"inherit\" noWrap>\r\n          &nbsp;{curUser.name}\r\n        </Typography>\r\n        */}\r\n      </IconButton>\r\n      <Menu anchorEl={anchorUserMenu}\r\n            anchorOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'right',\r\n            }}\r\n            transformOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'right',\r\n            }}\r\n            open={userMenuOpen}\r\n            onClose={closeUserMenu}>\r\n        {orderedUserMenuItems.map( ([fassetsKey, UserMenuItem]) => <UserMenuItem key={fassetsKey}/> )}\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n\r\n// AI: DECIDE_AUTH_USER_NEEDED\r\n//UserMenu.propTypes = {\r\n//  curUser: PropTypes.object.isRequired,\r\n//};\r\n\r\n\r\n\r\n/**\r\n * Utility function that closes our user menu.\r\n */\r\nexport function closeUserMenu() { // exported for use by our own: UserMenuItem\r\n  if (_closeUserMenu) {\r\n    _closeUserMenu();\r\n  }\r\n}\r\nlet _closeUserMenu = null;\r\n","import React              from 'react';\r\nimport verify             from 'util/verify';\r\nimport {SnackbarProvider,\r\n        withSnackbar}     from 'notistack';\r\nimport {makeStyles}       from '@material-ui/core/styles';\r\nimport Button             from \"@material-ui/core/Button\";\r\nimport isString           from 'lodash.isstring';\r\nimport isFunction         from 'lodash.isfunction';\r\n\r\n/* eslint-disable react/jsx-pascal-case */  // for: <NotifyAPI_withSnackBar>\r\n\r\n/**\r\n * The Notify component provides user notifications through a visual\r\n * message dialog.\r\n *\r\n * User messages are initiated through a programmatic invocation,\r\n * using the functional notify() API.  Supplied directives support\r\n * a variety of scenarios, including:\r\n *   - action buttons (for acknowledgment, or confirmation, etc.)\r\n *   - timed closure of the message\r\n *   - msg levels of success, info, warn, error (impacting the dialog style/color)\r\n *   - modal and non-modal\r\n *\r\n * Notify is the fundamental component which is the basis of various\r\n * UI notifications (i.e. Toasts, Alerts, Confirmations, etc.).  It\r\n * can be used stand-alone, or indirectly through various wrappers\r\n * (promoted through named exports).  The following functions are\r\n * summarized as follows:\r\n *\r\n * ```\r\n *                                                                 auto-close         variant-color      screen           ??TODO client\r\n *                 params:                         msg             duration           level              position         modal  actions\r\n *                 ============================    ==============  =================  =================  ===============  =====  ==========================\r\n *   - notify .... ({msg,                          msg to display  1-20 seconds       'success': green   'top-left'       false  [ {txt, [action]}, ... ]\r\n *                   duration=5,                   ... supports    null: close        'info':    blue    'top-center'     true   - where action: () => void\r\n *                   level='success',                  cr/lf             via          'warn':    yellow  'top-right'             - actions ARE OPTIONAL\r\n *                   position='bottom-left',                             client       'error':   red     'bottom-left'           - ALL actions auto close\r\n *                   modal=false,                                        action                          'bottom-center'  \r\n *                   actions=[]})                                        DEFAULT: OK                     'bottom-right'\r\n *                   \r\n *   - toast ..... ({msg, duration=5, actions})                    ditto              via toast.xyz()    'bottom-left'    false  ditto\r\n *   - alert ..... ({msg, actions})                                null               via alert.xyz()    'top-center'     true   ditto\r\n *   - confirm ... ({msg, actions})                                null               via confirm.xyz()  'top-right'      true   requires client action(s)\r\n * ```\r\n *\r\n * **Setup**:\r\n *\r\n *   The Notify component is tightly controlled as a single instance\r\n *   within an entire app.  Therefore, one and only one Notify\r\n *   instance must be pre-instantiated (initially hidden) somewhere at\r\n *   the top-level of your app.\r\n *\r\n *     ```\r\n *       <React.Fragment>\r\n *         <Notify/>\r\n *         {app content}\r\n *       </React.Fragment>\r\n\r\n *       -or-\r\n *       <Notify>\r\n *         {app content}\r\n *       <Notify>\r\n *     ```\r\n * \r\n * **Usage**:\r\n * \r\n *   see docs below: `notify()`, `toast()`, `alert()`, `confirm()`\r\n * \r\n * **Module Note**:\r\n *\r\n *   This utility is housed in a lower-case `notify.js` module,\r\n *   because the general public API is a series of lower-case \"named\r\n *   exported\" functions: `notify()`, `toast()`, `alert()`,\r\n *   `confirm()`.\r\n * \r\n *   There is a \"default exported\" Notify component (which is somewhat\r\n *   unusual to find in a lower-case module), but is only used once at\r\n *   app startup, so is therefore justified (in this case).\r\n */\r\n\r\n//***\r\n//*** the top-level Notify component conveniently auto-injects the notistack <SnackbarProvider>\r\n//*** (required for our programmatic interface)\r\n//***\r\n\r\nexport default function Notify(props) {\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <SnackbarProvider maxSnack={3} dense={true} className={classes.variantSuccess}>\r\n      <NotifyAPI_withSnackBar>\r\n        {props.children}\r\n      </NotifyAPI_withSnackBar>\r\n    </SnackbarProvider>\r\n  );\r\n}\r\n\r\n// apply snackbar variant style changes in support cr/lf\r\n// ... via: whiteSpace of 'pre-line'\r\n// ... this honors cr/lf within our snackbar items\r\nconst useStyles = makeStyles( theme => ({\r\n  variantSuccess: {\r\n    whiteSpace: 'pre-line',\r\n  },\r\n  variantInfo: {\r\n    whiteSpace: 'pre-line',\r\n  },\r\n  variantWarning: {\r\n    whiteSpace: 'pre-line',\r\n  },\r\n  variantError: {\r\n    whiteSpace: 'pre-line',\r\n  },\r\n}) );\r\n\r\n\r\n//***\r\n//*** keep track of our one-and-only instance\r\n//***\r\n\r\nlet _singleton = null;\r\n\r\n\r\n//***\r\n//*** the NotifyAPI component provides our internal programmatic API\r\n//*** (see .display()), used by notify(), toast(), etc.\r\n//***\r\n\r\nclass NotifyAPI extends React.Component {\r\n\r\n  static propTypes = { // expected component props\r\n  }\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    // keep track of our one-and-only instance\r\n    verify(!_singleton, '<Notify> only ONE Notify instance should be instantiated in the app (at the top-level).');\r\n    _singleton = this;\r\n  }\r\n\r\n  // display() is the interface point to our programmatic API (notify(), toast(), etc.)\r\n  display({msg,\r\n           duration=5, // auto close duration in seconds ... DEFAULT: 5 ... use null - manual close (via actions [default to OK])\r\n           level='success',\r\n           position='bottom-left',\r\n           modal=false,\r\n           actions=[],\r\n           ...unknownArgs}={}) {\r\n\r\n    // validate the named parameters (i.e. the directive)\r\n    const check = verify.prefix('notify() parameter violation: '); // NOTE: we pretend we are: notify() (the public access point)\r\n\r\n    // ... msg\r\n    check(msg, 'directive.msg is required');\r\n    check(isString(msg),  'msg must be a string');\r\n\r\n    // ... duration\r\n    if (duration !== null) {\r\n      check(duration >= 1 && duration <= 20, `supplied duration (${duration}) must be a number between 1 and 20 (inclusive).`);\r\n    }\r\n\r\n    // ... level\r\n    check(levelVariant[level], `invalid level: '${level}', expecting one of ${Object.keys(levelVariant)}.`);\r\n\r\n    // ... position\r\n    check(anchorOrigin[position], `invalid position: '${position}', expecting one of ${Object.keys(anchorOrigin)}.`);\r\n\r\n    // ... modal\r\n    check(modal===true || modal===false, `supplied modal (${modal}) must be a boolean true/false.`);\r\n\r\n    // ... actions\r\n    check(actions,                'actions must be an Action[] array'); // defaulted to [] ... this is user error of like null or something\r\n    check(Array.isArray(actions), 'actions must be an Action[] array');\r\n    actions.forEach( (action, indx) => {\r\n      check(action.txt,           `action[${indx}].txt is required`);\r\n      check(isString(action.txt), `action[${indx}].txt be a string ... NOT: ${action.txt}`);\r\n      if (action.action) {\r\n        check(isFunction(action.action), `action[${indx}].action (when supplied) must be a function ... NOT: ${action.action}`);\r\n      }\r\n    });\r\n\r\n    // ... unknown args\r\n    const unknownArgKeys = Object.keys(unknownArgs);\r\n    check(unknownArgKeys.length===0,  `unrecognized named parameter(s): ${unknownArgKeys}`);\r\n\r\n    // maintain our display duration\r\n    const autoHideDuration = duration ? duration*1000 : null; // convert to seconds ... null indicates manual close (via actions [default to OK])\r\n\r\n    // interpret any client-supplied actions\r\n\r\n    // ... provide a default OK when NO duration and NO actions are defined\r\n    //     NOTE: When NO duration is supplied, only way to close notification is through an action!\r\n    //           If client has NO actions, we will supply one (a default OK)\r\n    if (!duration && actions.length===0) {\r\n      actions = [{txt: 'OK'}]; // do NOT mutate client-supplied actions\r\n    }\r\n\r\n    // ... maintain a actions callback map indexed by .txt (default to identityFn)\r\n    const actionsCbMap = actions.reduce( (map, action) => {\r\n      map[action.txt] = action.action || identityFn;\r\n      return map;\r\n    }, {} );\r\n    // ... define our actionButtons (supplied to enqueueSnackbar) ... empty array is ignored\r\n    const actionButtons = actions.map( (action, indx) => <Button key={indx} color=\"default\" size=\"small\">{action.txt}</Button> );\r\n\r\n\r\n    // KEY: display the notification ... using notistack's enqueueSnackbar(...)\r\n    const snackbarKey = this.props.enqueueSnackbar(msg, {\r\n      variant: levelVariant[level],\r\n      autoHideDuration,\r\n      anchorOrigin: anchorOrigin[position],\r\n      action: actionButtons,\r\n      onClick: (e) => {\r\n        // close this notification\r\n        this.props.closeSnackbar(snackbarKey);\r\n\r\n        // invoke client-supplied callback\r\n        // ... on delay to make any client-notification transitions more intuitive\r\n        const clientAction = actionsCbMap[e.target.textContent];\r\n        setTimeout( () => clientAction(), 400);\r\n      },\r\n    });\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {this.props.children}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n// our level variant (indirectly defines color -and- provides level validation)\r\nconst levelVariant = { // color NOT used\r\n  success: 'success',\r\n  info:    'info',\r\n  warn:    'warning',\r\n  error:   'error',\r\n};\r\n\r\n// our anchorOrigin, indexed by position keyword\r\nconst anchorOrigin = {\r\n  'top-left':      { vertical: 'top',    horizontal: 'left'   },\r\n  'top-center':    { vertical: 'top',    horizontal: 'center' },\r\n  'top-right':     { vertical: 'top',    horizontal: 'right'  },\r\n  'bottom-left':   { vertical: 'bottom', horizontal: 'left'   },\r\n  'bottom-center': { vertical: 'bottom', horizontal: 'center' },\r\n  'bottom-right':  { vertical: 'bottom', horizontal: 'right'  },\r\n};\r\n\r\n// a convenient identity function\r\nconst identityFn = (p)=>p;\r\n\r\n\r\n//***\r\n//*** the withSnackbar() HOC provides access to the Snackbar run-time methods:\r\n//***   + props.enqueueSnackbar(...)\r\n//***   + props.closeSnackbar(...)\r\n//*** \r\n\r\nconst NotifyAPI_withSnackBar = withSnackbar(NotifyAPI);\r\nNotifyAPI_withSnackBar.displayName = 'NotifyAPI_withSnackBar'; // ... for react debugging (NOT accomplished in withSnackbar() ... grrrrr)\r\n\r\n\r\n\r\n/**\r\n * Display a user notification - the general purpose access point,\r\n * using named directives.\r\n *\r\n * @param {string} directive.msg the message to be displayed (cr/lf\r\n * are supported).\r\n *\r\n * @param {number} [directive.duration] the number of seconds to\r\n * display the msg before automatically closing the dialog.  If not\r\n * supplied, the dialog must be explicitly closed through a button\r\n * click.\r\n *\r\n * @param {string} [directive.level] the category level associated\r\n * with this notification (impacting background color).  One of:\r\n *  - 'success' ... the default\r\n *  - 'info'\r\n *  - 'warn'\r\n *  - 'error'\r\n *\r\n * @param {string} [directive.position] the position to display this\r\n * notification. One of:\r\n *  - 'top-left'\r\n *  - 'top-center'\r\n *  - 'top-right'\r\n *  - 'bottom-left' ... the default\r\n *  - 'bottom-center'\r\n *  - 'bottom-right'\r\n *\r\n * @param {boolean} [directive.modal] an indicator as to whether the\r\n * notification dialog is modal (true) or not (false) the default.\r\n *\r\n * @param {Action[]} [directive.actions] one or more actions -\r\n * button/action combinations.  The required Action.txt defines the\r\n * button label, and the Action.action is an option client-supplied\r\n * callback.  Each defined action will implicitly close the dialog,\r\n * in addition to invoking the optional client-supplied callback.\r\n *\r\n * NOTE: When NO duration and NO actions are defined, a default OK \r\n *       action is injected that will close the dialog when clicked.\r\n *\r\n * Example:\r\n * ```\r\n *   notify({\r\n *     msg:      'You have un-saved changes.\\nif you leave, your changes will NOT be saved!',\r\n *     duration: seconds,\r\n *     level:    'warn',\r\n *     position: 'bottom-right',\r\n *     modal:    true,\r\n *     actions: [\r\n *       { txt: 'Discard Changes', action: () => ...callback-logic-here... },\r\n *       { txt: 'Go Back' }\r\n *     ]\r\n *   });\r\n * ```\r\n */\r\nexport function notify(directive) {\r\n  // validate that an <Notify> has been instantiated\r\n  verify(_singleton, 'notify(): NO <Notify> instance has been established in the app root.');\r\n\r\n  // pass-through to our instance method\r\n  _singleton.display(directive);\r\n}\r\n\r\n\r\n/**\r\n * The toast() function is a convenience wrapper around notify() that\r\n * displays the supplied msg as a \"toast\" ... a non-modal dialog\r\n * located at the bottom-left of the screen, which is typically closed\r\n * after 5 seconds.\r\n *\r\n * Various levels can be accomplished via toast.success(),\r\n * toast.info(), toast.warn(), toast.error() ... all of which have the\r\n * same signature.  NOTE: toast() is the same as toast.success().\r\n *\r\n * @param {string} directive.msg the message to be displayed (cr/lf are\r\n * supported).\r\n *\r\n * @param {number} [directive.duration] the number of seconds before\r\n * automatically closing the dialog (default: 5).  A null defers to\r\n * supplied actions to close (which in turn defaults to an OK).\r\n *\r\n * @param {Action[]} [directive.actions] one or more actions -\r\n * button/action combinations.  The required Action.txt defines the\r\n * button label, and the Action.action is an option client-supplied\r\n * callback.  Each defined action will implicitly close the dialog,\r\n * in addition to invoking the optional client-supplied callback.\r\n *\r\n * NOTE: When NO duration and NO actions are defined, a default OK \r\n *       action is injected that will close the dialog when clicked.\r\n *\r\n * Example:\r\n * ```\r\n *\r\n *   toast({ msg:'Hello World' });    // will close in 6 secs\r\n *\r\n *   toast.error({ msg:     `An error occurred: ${err}`, \r\n *                 duration: null }); // OK button will close\r\n *\r\n *   toast.warn({                     // will close in 3 secs -OR- when \"undo\" is clicked\r\n *     msg: 'Your item was deleted', \r\n *     actions: [\r\n *       { txt: 'undo', action: () => ...callback-logic-here... },\r\n *     ]\r\n *    })\r\n * ```\r\n */\r\nfunction toastBase({msg, duration=5, actions, ...unknownArgs}, level) {\r\n\r\n  // validate toast-specific characteristics (other validation done by notify())\r\n  const funcQual = level ? `.${level}` : '';\r\n  const check    = verify.prefix(`toast${funcQual}() parameter violation: `);\r\n\r\n  // NOTE: as a general rule, validations are provided by the root notify()\r\n  // checking msg explicitly avoids unknownArgKeys weirdness (below) when msg is passed as a non-named param\r\n  check(msg, 'msg named parameter is required');\r\n\r\n  const unknownArgKeys = Object.keys(unknownArgs);\r\n  check(unknownArgKeys.length===0,  `unrecognized named parameter(s): ${unknownArgKeys}`);\r\n\r\n  // defer to our general-purpose notify() utility\r\n  notify({\r\n    msg,\r\n    duration,\r\n    level,    // NOTE: level is defaulted by the root notify()\r\n    position: 'bottom-left',\r\n    modal: false,\r\n    actions,\r\n  });\r\n}\r\nexport function  toast(directive) { toastBase(directive);          }\r\ntoast.success  = function(directive) { toastBase(directive, 'success'); }\r\ntoast.info     = function(directive) { toastBase(directive, 'info');    }\r\ntoast.warn     = function(directive) { toastBase(directive, 'warn');    }\r\ntoast.error    = function(directive) { toastBase(directive, 'error');   }\r\n\r\n\r\n/**\r\n * The alert() function is a convenience wrapper around notify() that\r\n * displays the supplied msg as a \"alert\" ... a modal dialog located\r\n * at the top-center of the screen, that must be acknowledged by the\r\n * user with either the default OK button, or a client-supplied\r\n * action.\r\n *\r\n * Various levels can be accomplished via alert.success(),\r\n * alert.info(), alert.warn(), alert.error() ... all of which have the\r\n * same signature.  NOTE: alert() is the same as alert.success().\r\n *\r\n * @param {string} directive.msg the message to be displayed (cr/lf\r\n * are supported).\r\n *\r\n * @param {Action[]} [directive.actions] one or more actions -\r\n * button/action combinations.  The required Action.txt defines the\r\n * button label, and the Action.action is an option client-supplied\r\n * callback.  Each defined action will implicitly close the dialog,\r\n * in addition to invoking the optional client-supplied callback.\r\n *\r\n * NOTE: When NO actions are defined, a default OK  action is injected\r\n *       that will close the dialog when clicked.\r\n *\r\n * Example:\r\n * ```\r\n *   alert({ msg:'Hello World' });\r\n *   alert.warn({\r\n *     msg:`Your limit (${limit}) has been reached!`\r\n *     actions: [\r\n *       { txt: 'increase', action: () => ...callback-logic-here... },\r\n *     ]\r\n *   });\r\n * ```\r\n */\r\nfunction alertBase({msg, actions, ...unknownArgs}, level) {\r\n\r\n  // validate alert-specific characteristics (other validation done by notify())\r\n  const funcQual = level ? `.${level}` : '';\r\n  const check    = verify.prefix(`alert${funcQual}() parameter violation: `);\r\n\r\n  // NOTE: as a general rule, validations are provided by the root notify()\r\n  // checking msg explicitly avoids unknownArgKeys weirdness (below) when msg is passed as a non-named param\r\n  check(msg, 'msg named parameter is required');\r\n\r\n  const unknownArgKeys = Object.keys(unknownArgs);\r\n  check(unknownArgKeys.length===0,  `unrecognized named parameter(s): ${unknownArgKeys}`);\r\n\r\n  // defer to our general-purpose notify() utility\r\n  notify({\r\n    msg,\r\n    duration: null, // force user acknowledgment\r\n    level,          // NOTE: level is defaulted by the root notify()\r\n    position: 'top-center',\r\n    modal: true,\r\n    actions,\r\n  });\r\n}\r\nexport function  alert(directive) { alertBase(directive);          }\r\nalert.success  = function(directive) { alertBase(directive, 'success'); }\r\nalert.info     = function(directive) { alertBase(directive, 'info');    }\r\nalert.warn     = function(directive) { alertBase(directive, 'warn');    }\r\nalert.error    = function(directive) { alertBase(directive, 'error');   }\r\n\r\n\r\n/**\r\n * The confirm() function is a convenience wrapper around notify()\r\n * that displays the supplied msg as a \"confirmation\" ... a modal\r\n * dialog located at the bottom-right of the screen, that must be\r\n * acknowledged through client-supplied action buttons.\r\n *\r\n * Various levels can be accomplished via confirm.success(),\r\n * confirm.info(), confirm.warn(), confirm.error() ... all of which\r\n * have the same signature.  NOTE: confirm() is the same as\r\n * confirm.success().\r\n *\r\n * @param {string} directive.msg the message to be displayed (cr/lf\r\n * are supported).\r\n *\r\n * @param {Action[]} directive.actions one or more actions - button/action\r\n * combinations.  The required Action.txt defines the button label,\r\n * and the Action.action is an option client-supplied callback.  Each\r\n * defined action will implicitly close the dialog, in addition to\r\n * invoking the optional client-supplied callback.\r\n *\r\n * Example:\r\n * ```\r\n *   confirm.warn({ \r\n *     msg: 'This is an confirm warning.\\nYou must explicitly acknowledge it.', \r\n *     actions: [\r\n *       { txt: 'Discard Changes', action: () => console.log('xx Discarding Changes') },\r\n *       { txt: 'Go Back' }\r\n *     ]\r\n *   });\r\n * ```\r\n */\r\nfunction confirmBase({msg, actions, ...unknownArgs}, level) {\r\n\r\n  // validate confirm-specific characteristics (other validation done by notify())\r\n  const funcQual = level ? `.${level}` : '';\r\n  const check    = verify.prefix(`confirm${funcQual}() parameter violation: `);\r\n\r\n  // NOTE: as a general rule, validations are provided by the root notify()\r\n  // checking msg explicitly avoids unknownArgKeys weirdness (below) when msg is passed as a non-named param\r\n  check(msg, 'msg named parameter is required');\r\n\r\n  // confirm() requires client-supplied actions\r\n  check(actions && actions.length>0, 'client-specific actions are required.');\r\n\r\n  const unknownArgKeys = Object.keys(unknownArgs);\r\n  check(unknownArgKeys.length===0,  `unrecognized named parameter(s): ${unknownArgKeys}`);\r\n\r\n  // defer to our general-purpose notify() utility\r\n  notify({\r\n    msg,\r\n    duration: null, // force user acknowledgment\r\n    level,          // NOTE: level is defaulted by the root notify()\r\n    position: 'top-right',\r\n    modal: true,\r\n    actions,\r\n  });\r\n}\r\nexport function  confirm(directive) { confirmBase(directive);          }\r\nconfirm.success  = function(directive) { confirmBase(directive, 'success'); }\r\nconfirm.info     = function(directive) { confirmBase(directive, 'info');    }\r\nconfirm.warn     = function(directive) { confirmBase(directive, 'warn');    }\r\nconfirm.error    = function(directive) { confirmBase(directive, 'error');   }\r\n","import React,\r\n       {useMemo}      from 'react';\r\nimport PropTypes      from 'prop-types';\r\n\r\nimport {useFassets}   from 'feature-u';\r\nimport {useSelector}  from 'react-redux'\r\n\r\nimport {makeStyles}   from '@material-ui/core/styles';\r\n\r\nimport LeftNav        from './LeftNav';\r\nimport UserMenu       from './UserMenu';\r\n\r\nimport AppBar         from '@material-ui/core/AppBar';\r\nimport IconButton     from '@material-ui/core/IconButton';\r\nimport MenuIcon       from '@material-ui/icons/Menu';\r\nimport Toolbar        from '@material-ui/core/Toolbar';\r\nimport Typography     from '@material-ui/core/Typography';\r\n\r\nimport {toast}        from 'util/notify';\r\n\r\n/**\r\n * AppMotif is a re-usable top-level component that establishes\r\n * the following application characteristics:\r\n * \r\n * - a **Left Nav** menu\r\n * - a **User Menu** menu\r\n * - a **Current View** state _(orchestrating which application view is active)_\r\n * - a **Tool Bar** with various artifacts (ex: title bar and footer)\r\n * \r\n * While these controls are promoted through AppMotif, it's content\r\n * is accumulated from external features through various **Use\r\n * Contracts**.\r\n\r\n * AppMotif is auto injected through the MainLayout component,\r\n * however, it is only active when an active user is **signed-in**.\r\n * \r\n * The main page content is rendered as children of this component\r\n * (like eateries, discovery, etc.).\r\n *\r\n * USAGE:\r\n * ```\r\n *   <AppMotif>\r\n *     ... app page content here\r\n *   </AppMotif>\r\n * ```\r\n * \r\n * Please refer to the **`baseUI` README** for more information.\r\n */\r\nexport default function AppMotif({children}) {\r\n\r\n  const fassets = useFassets();\r\n\r\n//const curUser = useSelector( (appState) => fassets.sel.curUser(appState), [fassets] );\r\n  const curView = useSelector( (appState) => fassets.sel.curView(appState), [fassets] );\r\n\r\n  const classes = useStyles();\r\n\r\n  // define our auxiliary view content\r\n  const viewAuxiliaryContent    = fassets.get('AppMotif.auxViewContent.*@withKeys');\r\n  const curViewAuxiliaryContent = useMemo(() => resolveCurViewAuxiliaryContent(curView, viewAuxiliaryContent), [curView, viewAuxiliaryContent]);\r\n  const {TitleComp, FooterComp} = curViewAuxiliaryContent;\r\n\r\n  // no-op when no user is signed-in ... AI: DECIDE_AUTH_USER_NEEDED\r\n//if (!curUser.isUserSignedIn()) {\r\n//  return (\r\n//    <>\r\n//      {children}\r\n//    </>\r\n//  );\r\n//}\r\n\r\n  return (\r\n    <div className={classes.app}>\r\n\r\n      {/* Title Bar */}\r\n      <AppBar className={classes.appBar}\r\n              position=\"fixed\"> {/* NOTE: eatery-nod-w used position \"absolute\" ... don't see any diff */}\r\n        <Toolbar className={classes.toolbar}\r\n                 variant=\"dense\"\r\n                 disableGutters={false}> {/*NOTE: doesn't seem that disableGutters does anything */}\r\n\r\n          {/* AI: Consider for some App Menu */}\r\n          <IconButton className={classes.menuButton}\r\n                      color=\"inherit\"\r\n                      onClick={ async () => {\r\n                          // toast.warn({msg: 'App Menu NOT implemented yet (coming soon)!'}) // ?? original\r\n                          try {\r\n                            const fileHandle  = await window.chooseFileSystemEntries(); // AI: eventually retain this in outer scope IF you need to reuse\r\n                            const file        = await fileHandle.getFile();\r\n                            const fileContent = await file.text();\r\n                            toast({msg: 'see console for file content :-)'});\r\n                            console.log(`local fileContent:\\n\\n${fileContent}`);\r\n                          }\r\n                          catch (err) {\r\n                            if (err.message !== 'The user aborted a request.') {\r\n                              console.log('err in local file handler: ', err);\r\n                            }\r\n                          }\r\n                      }}>\r\n            <MenuIcon/>\r\n          </IconButton>\r\n\r\n          {/* Title */}\r\n          <div className={classes.title}>\r\n            <TitleComp/>\r\n          </div>\r\n\r\n          {/* User Profile Menu ... AI: DECIDE_AUTH_USER_NEEDED ... curUser prop usage\r\n          <UserMenu curUser={curUser}/>\r\n            */}\r\n          <UserMenu/>\r\n\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      {/* Left Nav */}\r\n      <LeftNav/>\r\n\r\n      {/* Page Content */}\r\n      <main className={classes.content}>\r\n\r\n        <Toolbar variant=\"dense\"\r\n                 comment=\"spacer (hidden UNDER AppBar) so our main content isn't covered up by the AppBar\"/>\r\n\r\n        {children}\r\n      </main>\r\n\r\n      {/* Optional Bottom Bar */}\r\n      {FooterComp && (\r\n         <AppBar className={classes.bottomBar}\r\n                 position=\"absolute\">\r\n           <Toolbar className={classes.toolbar}\r\n                    variant=\"dense\"\r\n                    disableGutters={false}>\r\n             <FooterComp/>\r\n           </Toolbar>\r\n         </AppBar>\r\n       )}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nAppMotif.propTypes = {\r\n  children: PropTypes.node.isRequired, // main page content (like eateries and discovery)\r\n};\r\n\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n\r\n  app: {\r\n    display: 'flex', // KJB: does not seem to be doing anything\r\n  },\r\n\r\n  appBar: {\r\n    zIndex:     theme.zIndex.drawer + 1, // NOTE: forces AppBar to be OVER LeftNav (a drawer) ... this is new for fixed LeftNav\r\n  },\r\n\r\n  bottomBar: {\r\n    top:        'auto',\r\n    bottom:     0,\r\n  },\r\n\r\n  toolbar: {\r\n    // ***Dashboard Sample***\r\n    // paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n\r\n  menuButton: {\r\n    marginRight: 36, // proper spacing between menu button and title\r\n  },\r\n\r\n  title: {\r\n    flexGrow: 1, // moves right-most toolbar items to the right\r\n  },\r\n\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',                 // content window is height is same as our viewport (100%)\r\n    overflow: 'auto',                // add scrollbar ONLY when necessary\r\n  },\r\n}) );\r\n\r\n\r\nfunction resolveCurViewAuxiliaryContent(curView, viewAuxiliaryContent) {\r\n  const matchKey = `AppMotif.auxViewContent.${curView}`;\r\n  const [, curViewAuxiliaryContent] = viewAuxiliaryContent.find( ([key]) => key === matchKey ) || fallbackViewAuxiliaryContent;\r\n  return curViewAuxiliaryContent;\r\n}\r\n\r\nconst fallbackViewAuxiliaryContent = ['AppMotif.auxViewContent.FALLBACK', {\r\n  // TODO: unsure if we need a customizable Title in our header\r\n  //       - temporarily make \"App Motif\" \"Visualize It\" \r\n  //       = research further\r\n  TitleComp: () => (\r\n    <Typography variant=\"h6\"\r\n                color=\"inherit\"\r\n                noWrap>\r\n      Visualize It\r\n    </Typography>\r\n  ),\r\n}];\r\n","import React  from 'react';\r\nimport Fade   from '@material-ui/core/Fade';\r\nimport Slide  from '@material-ui/core/Slide';\r\nimport Zoom   from '@material-ui/core/Zoom';\r\n\r\n//***\r\n//*** Common Transition components used throughout our app :-)\r\n//***\r\n\r\nexport const TransitionFade  = React.forwardRef( (props, ref) => <Fade  ref={ref} timeout=\"1000\"                   {...props} /> );\r\nexport const TransitionSlide = React.forwardRef( (props, ref) => <Slide ref={ref} direction=\"right\" timeout=\"1000\" {...props} /> );\r\nexport const TransitionZoom  = React.forwardRef( (props, ref) => <Zoom  ref={ref} timeout=\"1000\"                   {...props} /> );\r\n","import React, {useState} from 'react';\r\nimport PropTypes         from 'prop-types';\r\n\r\nimport {makeStyles}      from '@material-ui/core/styles';\r\nimport {useForCellPhone} from 'util/responsiveBreakpoints';\r\n\r\nimport Button            from '@material-ui/core/Button';\r\nimport Progress          from '@material-ui/core/LinearProgress';  // -or- '@material-ui/core/CircularProgress';\r\nimport Dialog            from '@material-ui/core/Dialog';\r\nimport DialogContent     from '@material-ui/core/DialogContent';\r\nimport DialogTitle       from '@material-ui/core/DialogTitle';\r\nimport Typography        from '@material-ui/core/Typography';\r\nimport {TransitionZoom}  from 'util/Transition';\r\nimport {alert}           from 'util/notify';\r\n\r\n\r\n/**\r\n * A modal SplashScreen used when there is nothing else to display :-)\r\n *\r\n * The SplashScreen will responsively/dynamically utilize the full\r\n * screen for cell phone devices.\r\n *\r\n * The SplashScreen can be instantiated with a direct message to display:\r\n * ```js\r\n * <SplashScreen msg=\"hello world\" [err={error}]/>\r\n * ```\r\n * \r\n * In support of the programmatic API, a single SplashScreen must be statically\r\n * instantiated in the root of your DOM (without any msg):\r\n * ```js\r\n * <SplashScreen/>\r\n * ```\r\n *\r\n * Supporting the following programmatic API:\r\n * ```js\r\n *   + splash(msg, [err]): void ... display the supplied msg/err in the programmatic SplashScreen\r\n *   + splash(): void           ... clear the programmatic SplashScreen\r\n * ```\r\n */\r\nexport default function SplashScreen({msg, err}) {\r\n\r\n  const isCellPhone = useForCellPhone();\r\n  const classes     = useStyles();\r\n\r\n  // conditionally render SplashScreenProgrammatic when NO msg is supplied\r\n  return msg ? <SplashScreenCommon msg={msg} err={err} open={true} fullScreen={isCellPhone} classes={classes}/>\r\n             : <SplashScreenProgrammatic                           fullScreen={isCellPhone} classes={classes}/>;\r\n}\r\n\r\nSplashScreen.propTypes = {\r\n  msg: PropTypes.string,\r\n  err: PropTypes.object,\r\n};\r\n\r\nSplashScreen.defaultProps = {\r\n  msg: '',\r\n  err: null,\r\n};\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n  title: {\r\n    color:           theme.palette.common.white,\r\n    backgroundColor: theme.palette.primary.main, // theme.palette.primary.main (bluish) or theme.palette.secondary.main (redish)\r\n  },\r\n\r\n  progress: {\r\n    margin: theme.spacing(4),\r\n  },\r\n}) );\r\n\r\n\r\n// ***\r\n// *** Our programmatic API (see docs above)\r\n// ***\r\n\r\n// <SplashScreenProgrammatic fullScreen= classes= />\r\nfunction SplashScreenProgrammatic({fullScreen, classes}) {\r\n\r\n  // maintain our programmatic state ... the msg/err to display\r\n  const [splashState, setSplashState] = useState({\r\n    msg: '',\r\n    err: null,\r\n  });\r\n\r\n  // broaden the scope of our splashState setter (used in our `splash(msg, [err])` programmatic API)\r\n  if (_setSplashState && _setSplashState!==setSplashState) { // validate that only one instance exists\r\n    throw new Error('***ERROR*** <SplashScreen/> (supporting the programmatic `splash(msg, [err])` API) should only be instantiated ONE TIME (in the app root DOM)');\r\n  }\r\n  _setSplashState = setSplashState; // THIS should work ... no need for: _setSplashState = useCallback(...);\r\n\r\n  // render our component\r\n  return <SplashScreenCommon msg={splashState.msg} err={splashState.err} open={splashState.msg ? true : false} fullScreen={fullScreen} classes={classes} />;\r\n}\r\n\r\n// our programmatic API\r\nexport function splash(msg='', err=null) {\r\n  // implement in terms of <SplashScreenProgrammatic> state\r\n  if (!_setSplashState) {\r\n    throw new Error('***ERROR*** the programmatic `splash(msg, [err])` API requires <SplashScreen/> be instantiated in the app root DOM');\r\n  }\r\n  _setSplashState({msg, err});\r\n}\r\nlet _setSplashState = null; // expose our inner function\r\n\r\n\r\n// ***\r\n// *** Our \"common\" rendering agent shared by BOTH `<SplashScreen>` and `<SplashScreenProgrammatic>`\r\n// ***\r\n\r\nlet _errLastReported = null;\r\n\r\n// <SplashScreenCommon msg= open= fullScreen= classes= />\r\nfunction SplashScreenCommon({msg, err, open, fullScreen, classes}) {\r\n\r\n  // setup any error rendering constructs\r\n  const errCntl = !err ? null : (\r\n    <>\r\n      <br/>\r\n      <Typography variant=\"subtitle2\" color=\"secondary\">Encountered ERROR: {err.formatUserMsg()}</Typography>\r\n      <Button variant=\"contained\" color=\"secondary\" onClick={handleErr}>\r\n        <Typography variant=\"subtitle2\">Show Detail</Typography>\r\n      </Button>\r\n    </>\r\n  );\r\n  function handleErr() {\r\n    alert.error({ msg: `An unexpected error occurred:\r\n\r\n${err}\r\n\r\nIf this problem persists, please contact your tech support.`\r\n    });\r\n  }\r\n\r\n  // when supplied, log the details of the error (with traceback) for tech review\r\n  // NOTE 1: we refrain from using console.warn() and console.error() \r\n  //         because of BAD semantics inferred by react-native/expo:\r\n  //          - console.warn():  generates yellow popup\r\n  //          - console.error(): kills app with \"red screen of death\"\r\n  // NOTE 2: react-native/expo appears to be doing something non standard\r\n  //         when passing error as the 2nd parameter of log():\r\n  //             log('msg', error)\r\n  //         ... in this case is merely emitting error.toString()\r\n  //         ... we can however receive a stack trace by calling log(error) as the first parameter\r\n  if (err && err !== _errLastReported) {\r\n    _errLastReported = err;\r\n    const prefix = err.isUnexpected() ? '*** Unexpected Error:\\n\\n' : '*** Expected Error:\\n\\n';\r\n    console.log(prefix + err);\r\n    if (err.isUnexpected()) { // produce stack traces only for unexpected errors\r\n      console.log('Stack Trace ...');\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  // render our component\r\n  return (\r\n    <Dialog open={open}\r\n            fullScreen={fullScreen}\r\n            TransitionComponent={TransitionZoom}>\r\n      \r\n      <DialogTitle className={classes.title}>\r\n        <center className={classes.title}>Visualize It</center>\r\n      </DialogTitle>\r\n      \r\n      <DialogContent>\r\n        <center>\r\n          <br/>\r\n          <img width=\"120px\" src='visualize-it-logo.png' alt='visualize-it'/>\r\n          <br/>\r\n          <Progress className={classes.progress} color=\"secondary\"/>\r\n          <Typography variant=\"body2\">{msg}</Typography>\r\n          {errCntl}\r\n          <br/>\r\n        </center>\r\n      </DialogContent>\r\n      \r\n    </Dialog>\r\n  );\r\n}\r\n","import {useTheme}           from '@material-ui/core/styles';\r\nimport useMediaQuery        from '@material-ui/core/useMediaQuery';\r\nimport {useSelector}        from 'react-redux'\r\nimport {getResponsiveMode}  from 'features/common/baseUI/state'\r\n\r\n\r\n/**\r\n * A react hook promoting a boolean indicator (true/false) as to\r\n * whether the device's width represents a typical cell phone.\r\n * \r\n * @return {boolean} see description (above)\r\n */\r\nexport function useForCellPhone() {\r\n  const theme       = useTheme();\r\n  const isCellPhone = useMediaQuery(theme.breakpoints.down('xs')); // available breakpoints: xs/sm/md/lg/xl\r\n\r\n  return isCellPhone;\r\n}\r\n\r\n\r\n/**\r\n * A react hook promoting a boolean indicator (true/false) as to\r\n * whether the device's width is sufficient to be considered a tablet\r\n * (or greater - such as a desktop).\r\n *\r\n * @return {boolean} see description (above)\r\n *\r\n * @deprecated ... currently NOT used\r\n */\r\nexport function useForTabletPlus() {\r\n  const theme        = useTheme();\r\n  const isTabletPlus = useMediaQuery(theme.breakpoints.up('md')); // breakpoints: xs/sm/md/lg/xl\r\n\r\n  return isTabletPlus;\r\n}\r\n\r\n\r\n/**\r\n * A react hook promoting a boolean indicator (true/false) as to\r\n * whether the device's width is sufficient to be filled with more\r\n * content (such as a tablet or desktop).\r\n *\r\n * This algorithm is based on the breakpoint defined in the\r\n * reactiveMOde state, which can be controlled by the user -AND-\r\n * disabled.\r\n *\r\n * @return {boolean} see description (above)\r\n */\r\n\r\nexport function useForWiderDevice() {\r\n  const responsiveMode  = useSelector( (appState) => getResponsiveMode(appState), [] );\r\n  const theme           = useTheme();\r\n  const isWiderDevice   = useMediaQuery(theme.breakpoints.up(responsiveMode)); // NOTE: theme.breakpoints.up('off'): false\r\n\r\n  return isWiderDevice;\r\n}\r\n","import React,\r\n       {useMemo}          from 'react';\r\nimport {useSelector}      from 'react-redux'\r\nimport PropTypes          from 'prop-types';\r\nimport {makeStyles}       from '@material-ui/core/styles';\r\nimport {MuiThemeProvider,      // NOTE: MuiThemeProvider **SHOULD** be at the root of ALL visible components\r\n        createMuiTheme}   from '@material-ui/core/styles';\r\nimport CssBaseline        from '@material-ui/core/CssBaseline';\r\nimport AppMotif           from './AppMotif';\r\nimport Notify             from 'util/notify';\r\nimport SplashScreen       from 'util/SplashScreen';\r\nimport {getUITheme}       from '../state';\r\n\r\n\r\n/**\r\n * MainLayout is a re-usable top-level component that promotes the\r\n * proper Material-UI (MUI) theming/styling WITH a responsive layout.\r\n * \r\n * The following items are provided through this component:\r\n *\r\n * - a **Responsive Design** that auto adjusts for desktops, cell\r\n *   phones, and portable devices\r\n *\r\n * - a **UI Theme** allowing the user to choose from light/dark\r\n *   renditions\r\n *\r\n * - an **About Dialog** is promoted from information gleaned from the\r\n *   `package.json`\r\n *\r\n * - the **Notify** utility is activated, supporting programmatic\r\n *   **toasts, alerts, and confirmations**\r\n *\r\n * - the **SplashScreen** utility is activated, supporting the programmatic\r\n *   `splash(msg)` API\r\n * \r\n * Please refer to the **`baseUI` README** for more information.\r\n */\r\nexport default function MainLayout({children}) {\r\n\r\n  const uiTheme    = useSelector((appState) => getUITheme(appState), []);\r\n  const themeInUse = useMemo(() => uiTheme==='dark' ? darkTheme : lightTheme, [uiTheme]);\r\n  const classes    = useStyles();\r\n\r\n  return (\r\n    <MuiThemeProvider theme={themeInUse}>\r\n      <CssBaseline/>\r\n      <Notify/>\r\n      <SplashScreen/>\r\n      <main className={classes.main}>\r\n        <AppMotif>\r\n          {children}\r\n        </AppMotif>\r\n      </main>\r\n    </MuiThemeProvider>\r\n  );\r\n}\r\n\r\nMainLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\n\r\nconst lightTheme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true,\r\n    fontSize:        12,   // USE smaller font size ... default is 16 (seems more like 14)\r\n  },\r\n\r\n  palette: {\r\n    type: 'light',\r\n    // CREATED FROM: https://material.io/tools/color/\r\n    primary: {                 // REF: Teal 800\r\n      light:        '#439889',\r\n      main:         '#00695c',\r\n      dark:         '#003d33',\r\n      contrastText: '#f5f5f5', // OVERRIDE: Grey 200\r\n    },\r\n    secondary: {               // REF: Red 800\r\n      light:        '#ff5f52',\r\n      main:         '#c62828',\r\n      dark:         '#8e0000',\r\n      contrastText: '#f5f5f5', // OVERRIDE: Grey 200\r\n    },\r\n  },\r\n});\r\n\r\nconst darkTheme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true,\r\n    fontSize:        12,   // USE smaller font size ... default is 16 (seems more like 14)\r\n  },\r\n  palette: {\r\n    type: 'dark',\r\n    // CREATED FROM: https://material.io/tools/color/\r\n    primary: {                 // REF: Teal 800\r\n      light:        '#439889',\r\n      main:         '#00695c',\r\n      dark:         '#003d33',\r\n      contrastText: '#f5f5f5', // OVERRIDE: Grey 200\r\n    },\r\n    secondary: {               // REF: Red 800\r\n      light:        '#ff5f52',\r\n      main:         '#c62828',\r\n      dark:         '#8e0000',\r\n      contrastText: '#f5f5f5', // OVERRIDE: Grey 200\r\n    },\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n  main: {\r\n    width:        'auto',\r\n    display:      'block', // Fix IE 11 issue.\r\n // marginLeft:   theme.spacing(3), // N/A: bad news for the overall layout\r\n // marginRight:  theme.spacing(3),\r\n\r\n // reactive design // N/A:  THIS IS CAUSING HAVOC on my main content container overall width\r\n // [theme.breakpoints.up(400 + theme.spacing(3 * 2))]: {\r\n //   width:       400,\r\n //   marginLeft:  'auto',\r\n //   marginRight: 'auto',\r\n // },\r\n  },\r\n}) );\r\n","import React           from 'react';\r\nimport PropTypes       from 'prop-types';\r\nimport MenuItem        from '@material-ui/core/MenuItem';\r\nimport {closeUserMenu} from './UserMenu';\r\n\r\n/**\r\n * UserMenuItem: our UserMenuItem - a MenuItem wrapper that auto-closes the UserMenu.\r\n */\r\nexport default function UserMenuItem(props) {\r\n\r\n  // value-added onClick that auto-closes the UserMenu\r\n  const myOnClick = (...args) => {\r\n    // auto-close the UserMenu\r\n    closeUserMenu()\r\n\r\n    // pass-through to client onClick()\r\n    if (props.onClick) {\r\n      props.onClick(...args);\r\n    }\r\n  };\r\n\r\n  // wrap <MenuItem>\r\n  return (\r\n    <MenuItem {...props} onClick={myOnClick}>{props.children}</MenuItem>\r\n  );\r\n}\r\n\r\nUserMenuItem.propTypes = {\r\n  children: PropTypes.node.isRequired, // UserMenuItem content is required (i.e. the label)\r\n};\r\n","import React,\r\n       {useMemo,\r\n        useCallback} from 'react';\r\n\r\nimport {useSelector,\r\n        useDispatch} from 'react-redux'\r\n\r\nimport _baseUIAct    from '../actions';\r\nimport {getUITheme}  from '../state';\r\n\r\nimport Chip          from '@material-ui/core/Chip';\r\nimport Divider       from '@material-ui/core/Divider';\r\nimport MoonIcon      from '@material-ui/icons/Brightness3';\r\nimport SunIcon       from '@material-ui/icons/WbSunny';\r\nimport UserMenuItem  from 'features/common/baseUI/comp/UserMenuItem';\r\n\r\n\r\n/**\r\n * ToggleUITheme: our user-profile menu items (in the App Header)\r\n * \r\n * NOTE: Because this is a \"custom\" component that is held in Menu\r\n *       (a ButtonBase MenuItem) it must be able to hold a ref ... hence\r\n *       the React.forwardRef()!\r\n *       see: https://material-ui.com/guides/migration-v3/#button\r\n *            https://material-ui.com/guides/composition/#caveat-with-refs\r\n *            AVOIDS following log:\r\n *            Warning: Function components cannot be given refs. Attempts to access\r\n *                     this ref will fail. Did you mean to use React.forwardRef()?\r\n * NOTE: Subsequent Discovery: I think this is really due to the fact that\r\n *       we were injecting <Divider/> too!\r\n *       This React.forwardRef() was NOT needed in src/features/common/auth/comp/AuthUserMenu.js,\r\n *       where it simply injected a series of <UserMenuItem>s in a React.Fragment ... hmmmm\r\n */\r\nconst ToggleUITheme = React.forwardRef( (props, ref) => {\r\n  const uiTheme = useSelector((appState) => getUITheme(appState), []);\r\n\r\n  const ChipIcon = useMemo(() => uiTheme==='light' ? MoonIcon  : SunIcon,    [uiTheme]);\r\n  const label    = useMemo(() => uiTheme==='light' ? 'to dark' : 'to light', [uiTheme]);\r\n\r\n  const dispatch      = useDispatch();\r\n  const toggleUITheme = useCallback(() => dispatch( _baseUIAct.toggleUITheme() ), [dispatch]);\r\n\r\n  return (\r\n    <span {...props} ref={ref}>\r\n      <UserMenuItem onClick={toggleUITheme}>\r\n        <Chip label={label}\r\n              icon={<ChipIcon/>}/>\r\n      </UserMenuItem>\r\n      <Divider/>\r\n    </span>\r\n  );\r\n});  \r\nexport default ToggleUITheme;\r\n","import React,\r\n       {useMemo,\r\n        useCallback} from 'react';\r\n\r\nimport {useSelector,\r\n        useDispatch} from 'react-redux'\r\n\r\nimport _baseUIAct           from '../actions';\r\nimport {getResponsiveMode}  from '../state';\r\n\r\nimport Chip          from '@material-ui/core/Chip';\r\nimport Divider       from '@material-ui/core/Divider';\r\nimport CheckedIcon    from '@material-ui/icons/Check';\r\nimport UserMenuItem  from 'features/common/baseUI/comp/UserMenuItem';\r\n\r\nimport {confirm}     from 'util/notify';\r\n\r\n\r\n/**\r\n * MaintainResponsiveMode: our user-profile menu items (in the App Header)\r\n * \r\n * NOTE: Because this is a \"custom\" component that is held in Menu\r\n *       (a ButtonBase MenuItem) it must be able to hold a ref ... hence\r\n *       the React.forwardRef()!\r\n *       see: https://material-ui.com/guides/migration-v3/#button\r\n *            https://material-ui.com/guides/composition/#caveat-with-refs\r\n *            AVOIDS following log:\r\n *            Warning: Function components cannot be given refs. Attempts to access\r\n *                     this ref will fail. Did you mean to use React.forwardRef()?\r\n * NOTE: Subsequent Discovery: I think this is really due to the fact that\r\n *       we were injecting <Divider/> too!\r\n *       This React.forwardRef() was NOT needed in src/features/common/auth/comp/AuthUserMenu.js,\r\n *       where it simply injected a series of <UserMenuItem>s in a React.Fragment ... hmmmm\r\n */\r\nconst MaintainResponsiveMode = React.forwardRef( (props, ref) => {\r\n\r\n  const responsiveMode = useSelector((appState) => getResponsiveMode(appState), []);\r\n\r\n  const ChipIcon = useMemo(() => responsiveMode==='off' ? ()=>null : CheckedIcon, [responsiveMode]);\r\n\r\n  const dispatch                = useDispatch();\r\n  const maintainResponsiveMode  = useCallback(() => {\r\n    confirm.success({ \r\n      msg: `This app is designed with mobile devices in mind (i.e. cell phones).\r\n\r\nWhen the \"responsive\" mode is enabled, selected screens will dynamically adjust to take advantage of the additional screen real estate.  As an example, a simple list can morph into a detailed table.\r\n\r\nYou can define the \"responsive\" boundary where additional content is manifest (based on the screen width), or disable it altogether.\r\n\r\nSet the \"responsive\" boundary to:\r\n(** is current)`,\r\n      actions: [\r\n        ...defineActions(responsiveMode, dispatch),\r\n        { txt: 'Close' },\r\n      ]\r\n    });\r\n  }, [dispatch, responsiveMode]);\r\n\r\n  return (\r\n    <span {...props} ref={ref}>\r\n      <UserMenuItem onClick={maintainResponsiveMode}>\r\n        <Chip label=\"responsive\"\r\n              icon={<ChipIcon/>}/>\r\n      </UserMenuItem>\r\n      <Divider/>\r\n    </span>\r\n  );\r\n});  \r\nexport default MaintainResponsiveMode;\r\n\r\n\r\nconst breakpoints = [\r\n//{name: 'Phone',      value: 'xs'},  // xs, extra-small:    0px ... breakpoint ranges are from this point TO the next range (inclusive)\r\n  {name: 'Tablet',     value: 'sm'},  // sm, small:        600px\r\n  {name: 'Desktop',    value: 'md'},  // md, medium:       960px\r\n  {name: 'Landscape',  value: 'lg'},  // lg, large:       1280px\r\n//{name: 'Super-Wide', value: 'xl'},  // xl, extra-large: 1920px\r\n  {name: 'Disable',    value: 'off'},\r\n];\r\n\r\nconst defineActions = (curResponsiveMode, dispatch) => breakpoints.map( (breakpoint) => ({\r\n  txt:    `${ curResponsiveMode===breakpoint.value ? '**' : '' }${breakpoint.name}`,\r\n  action: () => dispatch( _baseUIAct.setResponsiveMode(breakpoint.value) ),\r\n}) );\r\n","import React         from 'react';\r\n\r\nimport {alert}       from 'util/notify';\r\n\r\nimport Divider       from '@material-ui/core/Divider';\r\nimport UserMenuItem  from 'features/common/baseUI/comp/UserMenuItem';\r\n\r\n\r\n/**\r\n * About: display info about this app (gleaned from package.json)\r\n *\r\n * NOTE: These env vars require the following .env file (in your project root per CRA):\r\n *\r\n *   .env\r\n *   ====\r\n *   REACT_APP_NAME=$npm_package_name\r\n *   REACT_APP_VERSION=$npm_package_version\r\n *   REACT_APP_DESCRIPTION=$npm_package_description\r\n *   REACT_APP_ABOUT_DOCS=$npm_package_about_docs\r\n *   REACT_APP_ABOUT_HIST=$npm_package_about_hist\r\n *\r\n * NOTE: Because this is a \"custom\" component that is held in Menu\r\n *       (a ButtonBase MenuItem) it must be able to hold a ref ... hence\r\n *       the React.forwardRef()!\r\n *       see: https://material-ui.com/guides/migration-v3/#button\r\n *            https://material-ui.com/guides/composition/#caveat-with-refs\r\n *            AVOIDS following log:\r\n *            Warning: Function components cannot be given refs. Attempts to access\r\n *                     this ref will fail. Did you mean to use React.forwardRef()?\r\n * NOTE: Subsequent Discovery: I think this is really due to the fact that\r\n *       we were injecting <Divider/> too!\r\n *       This React.forwardRef() was NOT needed in src/features/common/auth/comp/AuthUserMenu.js,\r\n *       where it simply injected a series of <UserMenuItem>s in a React.Fragment ... hmmmm\r\n */\r\nconst About = React.forwardRef( (props, ref) => (\r\n  <span {...props} ref={ref}>\r\n    <Divider/>\r\n    <UserMenuItem onClick={showAbout}>About ...</UserMenuItem>\r\n  </span>\r\n) );\r\nexport default About;\r\n\r\nfunction showAbout() {\r\n  const name    = process.env.REACT_APP_NAME        || 'UNKNOWN name (from package.json: name)';\r\n  const desc    = process.env.REACT_APP_DESCRIPTION || 'UNKNOWN desc (from package.json: description)';\r\n  const ver     = process.env.REACT_APP_VERSION     || 'UNKNOWN (from package.json: version)';\r\n  const docsUrl = process.env.REACT_APP_ABOUT_DOCS;\r\n  const histUrl = process.env.REACT_APP_ABOUT_HIST;\r\n\r\n  const msg = `${name}\\n\\n${desc}\\n\\nversion: ${ver}`;\r\n\r\n  const actions = [];\r\n  if (docsUrl)\r\n    actions.push({ txt: 'Docs',    action: () => window.open(docsUrl, '_blank') });\r\n  if (histUrl)\r\n    actions.push({ txt: 'History', action: () => window.open(histUrl, '_blank') });\r\n  actions.push({ txt: 'Close' });\r\n\r\n  alert.success({msg, actions});\r\n}\r\n","import React                  from 'react';\r\nimport {createFeature,\r\n        fassetValidations}    from 'feature-u';\r\n\r\nimport _baseUI                from './featureName';\r\nimport _baseUIAct             from './actions';\r\nimport reducer                from './state';\r\nimport * as _baseUISel        from './state';\r\nimport logic                  from './logic';\r\n\r\nimport MainLayout             from './comp/MainLayout';\r\nimport ToggleUITheme          from './comp/ToggleUITheme';\r\nimport MaintainResponsiveMode from './comp/MaintainResponsiveMode';\r\nimport About                  from './comp/About';\r\n\r\n// feature: baseUI <<< full details in README\r\n//          Provides a UI foundation for an entire application.\r\n//          It manages the following characteristics:\r\n//          - a Responsive Design that auto adjusts for desktops, cell phones, and\r\n//            portable devices.\r\n//          - a UI Theme allowing the user to choose from light/dark renditions\r\n//          - when an active user is signed-in, the following items are also\r\n//            manifest:\r\n//            - a \"Left Nav\" menu\r\n//            - a \"User Menu\" menu\r\n//            - a \"Current View\" state (orchestrating which application view is active)\r\n//            - a \"Tool Bar\" with various artifacts (ex: title bar and footer)\r\nexport default createFeature({\r\n  name: _baseUI,\r\n\r\n  // our public face ...\r\n  fassets: {\r\n\r\n    define: {\r\n      'actions.changeView': _baseUIAct.changeView, // changeView(viewName)\r\n      'sel.curView':        _baseUISel.curView,    // curView(appState): string\r\n\r\n      'actions.addLeftNavItem':    _baseUIAct.addLeftNavItem,    // addLeftNavItem(leftNavKey, LeftNavComp)\r\n      'actions.removeLeftNavItem': _baseUIAct.removeLeftNavItem, // removeLeftNavItem(leftNavKey)\r\n    },\r\n\r\n    defineUse: {\r\n      // inject User Menu entries\r\n      // ... to ToggleUITheme ('light'/'dark')\r\n      'AppMotif.UserMenuItem.aa1_UIThemeToggle': ToggleUITheme,\r\n      // ... to MaintainResponsiveMode ('md'/'lg'/'off')\r\n      'AppMotif.UserMenuItem.aa2_MaintainResponsiveMode': MaintainResponsiveMode,\r\n      // ... to display About info (gleaned from package.json)\r\n      'AppMotif.UserMenuItem.zz8_About': About,\r\n    },\r\n\r\n    use: [\r\n      // full details in README\r\n      ['AppMotif.UserMenuItem.*',   {required: true,  type: fassetValidations.comp}],\r\n      ['AppMotif.auxViewContent.*', {required: false, type: fassetValidations.any}],\r\n    ],\r\n  },\r\n\r\n  reducer,\r\n  logic,\r\n\r\n  // inject our baseUI components into the root of our app\r\n  appWillStart({fassets, curRootAppElm}) {\r\n    return (\r\n      <MainLayout>\r\n        {curRootAppElm}\r\n      </MainLayout>\r\n    );\r\n  },\r\n\r\n});\r\n","import {generateActions}    from 'action-u';\r\nimport _tabManager          from './featureName';\r\n\r\nexport default generateActions.root({\r\n  [_tabManager]: { // prefix all actions with our feature name, guaranteeing they unique app-wide!\r\n\r\n    activateTab: { // actions.activateTab(tabId, preview=true): Action\r\n                   // > activate the specified tab (may exist, or will create on first reference)\r\n                   actionMeta: { // NOTE: logic supplements this action to simplify reducer (see docs)\r\n                     traits: ['tabId', 'preview'],\r\n                     ratify: (tabId, preview=true) => [tabId, preview],\r\n                   },\r\n    },\r\n\r\n    closeTab: { // actions.closeTab(tabId): Action\r\n                // > close specified tab\r\n                actionMeta: { // NOTE: logic supplements this action to simplify reducer (see docs)\r\n                  traits: ['tabId'],\r\n                },\r\n    },\r\n\r\n  },\r\n\r\n});\r\n","/**\r\n * Expose our featureName through a mini-meta module that is\r\n * \"importable\" in all use-cases (a single-source-of-truth).\r\n */\r\nexport default 'tabManager';\r\n","import {combineReducers}    from 'redux';\r\nimport {reducerHash}        from 'astx-redux-util';\r\nimport {slicedReducer}      from 'feature-redux';\r\nimport _tabManager          from './featureName';\r\nimport _tabManagerAct       from './actions';\r\n\r\n// ***\r\n// *** Our feature reducer, managing state for our tabManager process.\r\n// ***\r\n\r\nconst reducer = slicedReducer(_tabManager, combineReducers({\r\n\r\n  // activeTabId: string ... the tabId of the active tab\r\n  activeTabId: reducerHash({\r\n    [_tabManagerAct.activateTab]:     (state, action) => action.pgmDirectives.next_activeTabId,\r\n    [_tabManagerAct.closeTab]:        (state, action) => action.pgmDirectives.next_activeTabId,\r\n  }, null), // initialState\r\n\r\n  // previewTabId: string ... the tabId of the optional tab that is in preview mode (will be re-used)\r\n  previewTabId: reducerHash({\r\n    [_tabManagerAct.activateTab]:     (previewTabId, action) => action.pgmDirectives.next_previewTabId,\r\n    [_tabManagerAct.closeTab]:        (previewTabId, action) => previewTabId===action.tabId ? null : previewTabId,\r\n  }, null), // initialState\r\n\r\n  // tabs: [{tabId, tabName}, ...] ... all of our tab objects, fed from the activateTab action\r\n  tabs: reducerHash({\r\n    [_tabManagerAct.activateTab]: (tabs, action) => {\r\n      let   newTabs = tabs;\r\n      const {tabId, tabName}         = action;\r\n      const {removeTabId, addNewTab} = action.pgmDirectives;\r\n\r\n      if (removeTabId) {\r\n        newTabs = newTabs.filter( (tab) => tab.tabId !== removeTabId );\r\n      }\r\n      if (addNewTab) {\r\n        newTabs = [...newTabs, {tabId, tabName}];\r\n      }\r\n      return newTabs;\r\n    },\r\n\r\n    [_tabManagerAct.closeTab]: (tabs, action) => tabs.filter( (tab) => tab.tabId !== action.tabId ),\r\n\r\n  }, []), // initialState\r\n\r\n}) );\r\n\r\nexport default reducer;\r\n\r\n\r\n// ***\r\n// *** Various Selectors\r\n// ***\r\n\r\n// Our feature state root (via slicedReducer as a single-source-of-truth)\r\nconst getFeatureState  = (appState) => reducer.getSlicedState(appState);\r\nconst gfs              = getFeatureState; // ... concise alias (used internally)\r\n\r\nexport const getActiveTabId  = (appState) => gfs(appState).activeTabId;\r\nexport const getPreviewTabId = (appState) => gfs(appState).previewTabId;\r\nexport const getTabs         = (appState) => gfs(appState).tabs;\r\nexport const getTotalTabs    = (appState) => gfs(appState).tabs.length;\r\n","import {createLogic}        from 'redux-logic';\r\nimport _tabManager          from './featureName';\r\nimport _tabManagerAct       from './actions';\r\nimport * as sel             from './state';\r\nimport {getTabName}         from './tabRegistry';\r\n\r\n/**\r\n * Supplement the 'activateTab' action with the following directives\r\n * (centralize logic and simplifying our reducers):\r\n *\r\n * ```\r\n * action: {\r\n *   ... from incoming action:\r\n *   tabId:   'xyz'\r\n *   preview: true\r\n * \r\n *   ... supplemented by logic:\r\n *   tabName: 'ValveXyz'  ... strictly a convenience\r\n *   pgmDirectives: {     ... simplifies reducer\r\n *     next_activeTabId:  'xyz' (or null when NO tabs)\r\n *     next_previewTabId: 'xyz' (or null when NO preview tab)\r\n *     removeTabId:       'xyz' (or null) ... supports previewTab removal\r\n *     addNewTab:         true/false ... supports new tab creation (on first reference)\r\n *   }\r\n * }\r\n *```\r\n */\r\nexport const supplementActivateTab = createLogic({\r\n\r\n  name: `${_tabManager}.supplementActivateTab`,\r\n  type: String(_tabManagerAct.activateTab),\r\n\r\n  transform({getState, action, fassets}, next, reject) {\r\n\r\n    const appState = getState();\r\n\r\n    //***\r\n    //*** Request Aliases: req_ (from original action)\r\n    //***\r\n\r\n    const req_tabId   = action.tabId;\r\n    const req_preview = action.preview; // true: preview tab (single-click), false: permanent tab (double-click)\r\n\r\n\r\n    //***\r\n    //*** Current State Aliases: cur_ (from redux state)\r\n    //***\r\n\r\n//  const cur_activeTabId  = sel.getActiveTabId(appState);\r\n    const cur_previewTabId = sel.getPreviewTabId(appState);\r\n    const cur_tabs         = sel.getTabs(appState);\r\n\r\n    // the requested current tab entry (when it previously exists) ... undefined for new tab request\r\n    const cur_targetTab = cur_tabs.find( (tab) => req_tabId === tab.tabId );\r\n    \r\n    // does the requested target tab pre-exist?\r\n    const cur_targetTabPreExists = cur_targetTab ? true : false;\r\n\r\n    //***\r\n    //*** transform logic\r\n    //***\r\n\r\n    // reason about next_activeTabId\r\n    // ... for 'activateTab' action, this is ALWAYS our incoming tabId\r\n    const next_activeTabId = req_tabId;\r\n\r\n    // manage addNewTab directive\r\n    // ... action may direct the dynamic addition of a NEW tab FROM the tabCreator ReactComp found our Tab Registry\r\n    const addNewTab = !cur_targetTabPreExists;\r\n\r\n    // manage our preview tab directives\r\n    // ... this is the only complex aspect of this process\r\n\r\n    // ... default our directives to NO CHANGE\r\n    let next_previewTabId = cur_previewTabId; // DEFAULT: NO change\r\n    let removeTabId       = null;             // DEFAULT: null (i.e. NO preview tab to remove)\r\n\r\n    // ... when activating a new tab\r\n    if (addNewTab) {\r\n      if (req_preview) { // ... our new tab is a \"preview\" mode request\r\n        next_previewTabId = req_tabId;        // this new tab will now be the preview tab\r\n        removeTabId       = cur_previewTabId; // displacing prior preview tab (if any - may be null)\r\n      }\r\n      else { // ... our new tab is a \"permanent\" mode request (any prior preview should NOT change)\r\n        // ... this is our default setting\r\n      }\r\n    }\r\n    // ... when activating an existing tab\r\n    else {\r\n\r\n      // KEY: THIS IS THE REAL TESTING POINT\r\n      // if request is permanent, and this existing tab was previously preview\r\n      // ... we want to remove the preview connotation\r\n      if ( (!req_preview) && (req_tabId === cur_previewTabId) ) {\r\n        next_previewTabId = null; // remove ANY preview connotation\r\n      }\r\n      // .. otherwise we leave preview as-is (I THINK)\r\n\r\n    }\r\n\r\n    //***\r\n    //*** supplement our action with pgmDirectives (see JSDocs above)\r\n    //***\r\n\r\n    action.tabName = getTabName(req_tabId);\r\n\r\n    action.pgmDirectives = {\r\n      next_activeTabId,\r\n      next_previewTabId,\r\n      removeTabId,\r\n      addNewTab,\r\n    };\r\n\r\n    next(action);\r\n  },\r\n\r\n});\r\n\r\n\r\n/**\r\n * Supplement the 'closeTab' action with the following directives\r\n * (centralize logic and simplifying our reducers):\r\n *\r\n * ```\r\n * action: {\r\n *   ... from incoming action:\r\n *   tabId:   'xyz'\r\n * \r\n *   ... supplemented by logic:\r\n *   pgmDirectives: {     ... simplifies reducer\r\n *     next_activeTabId:  'xyz' (or null when NO tabs)\r\n *   }\r\n * }\r\n *```\r\n */\r\nexport const supplementCloseTab = createLogic({\r\n\r\n  name: `${_tabManager}.supplementCloseTab`,\r\n  type: String(_tabManagerAct.closeTab),\r\n\r\n  transform({getState, action, fassets}, next, reject) {\r\n\r\n    const appState = getState();\r\n\r\n    const tabs         = sel.getTabs(appState);\r\n    const closeTabIndx = tabs.findIndex( (tab) => action.tabId === tab.tabId );\r\n\r\n    // we shift our next active tab to the right (except on end - to the left)\r\n    // ... REMEMBER: we are dealing with the state (array) BEFORE it has been altered\r\n\r\n    //                                                     AT END ...       NOT AT END ...\r\n    //                                                     ==============   ==============\r\n    const nextTabIndx = (closeTabIndx === tabs.length-1) ? closeTabIndx-1 : closeTabIndx+1;\r\n    const nextTabId   = nextTabIndx < 0 ? null : tabs[nextTabIndx].tabId;\r\n\r\n\r\n    //***\r\n    //*** supplement our action with pgmDirectives (see JSDocs above)\r\n    //***\r\n\r\n    action.pgmDirectives = {\r\n      next_activeTabId: nextTabId,\r\n    };\r\n\r\n    next(action);\r\n  },\r\n\r\n});\r\n\r\n\r\n// promote all logic modules for this feature\r\n// ... NOTE: individual logic modules are unit tested using the named exports.\r\nexport default [\r\n\r\n  supplementActivateTab,\r\n  supplementCloseTab,\r\n\r\n];\r\n","import React,\r\n       {useCallback}       from 'react';\r\n\r\nimport {useSelector,\r\n        useDispatch}       from 'react-redux'\r\n\r\nimport {createLogger}      from 'util/logger';\r\n\r\nimport * as _tabManagerSel from '../state';\r\nimport _tabManagerAct      from '../actions';\r\nimport {getTabCreator}     from '../tabRegistry';\r\n\r\nimport AppBar              from '@material-ui/core/AppBar';\r\nimport Box                 from '@material-ui/core/Box';\r\nimport CloseIcon           from '@material-ui/icons/Close';\r\nimport Grid                from '@material-ui/core/Grid';\r\nimport Paper               from '@material-ui/core/Paper';\r\nimport Tab                 from '@material-ui/core/Tab';\r\nimport Tabs                from '@material-ui/core/Tabs';\r\nimport Typography          from '@material-ui/core/Typography';\r\nimport {makeStyles}        from '@material-ui/core/styles';\r\n\r\n// our internal diagnostic logger (normally disabled)\r\nconst log = createLogger('***DIAG*** <TabManager> ... ').disable();\r\n\r\n/**\r\n * TabManager: Our top-level manager of tabs.\r\n */\r\nexport default function TabManager() {\r\n\r\n  const classes = useStyles();\r\n\r\n  const activeTabId  = useSelector((appState) => _tabManagerSel.getActiveTabId(appState), []);\r\n  const previewTabId = useSelector((appState) => _tabManagerSel.getPreviewTabId(appState), []);\r\n  const tabs         = useSelector((appState) => _tabManagerSel.getTabs(appState), []);\r\n  const dispatch     = useDispatch();\r\n  const handleTabChanged   = useCallback((event, tabId) => {\r\n    log(`handleTabChanged('${tabId}')`);\r\n    dispatch( _tabManagerAct.activateTab(tabId) );\r\n  }, [dispatch]);\r\n\r\n  // NOTE: handleCloseTab is currently NOT cached because I am creating multiple inline funcs within the render (below)\r\n  const handleCloseTab = (event, tabId) => {\r\n    log('in handleCloseTab: ', tabId);\r\n    event.stopPropagation(); // prevent parent tabChanged event from firing ... if not done, it can fire AFTER closeTab - which is bad (because the tab is gone)\r\n    dispatch( _tabManagerAct.closeTab(tabId) );\r\n  };\r\n\r\n  // PERF: TabManager renders 2 times every tab change ... performance doesn't appear to be a problem :-)\r\n  log('rendering');\r\n\r\n  // NOTE: Each TabPanel content is app-specific,\r\n  //       dynamically created through the tab registry's tabCreator ReactComp.\r\n\r\n  // TABS NOTE: <Tabs> value IS the currently selected Tab value\r\n  //            ... can be false - NO tab selected (NOT all that useful)\r\n  //            ... onChange is fired when <Tab> clicked, passing new active <Tab> value\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs value={activeTabId}\r\n              onChange={handleTabChanged}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              variant=\"scrollable\"\r\n              scrollButtons=\"auto\">\r\n          {tabs.map( tab => (\r\n             <Tab className={tab.tabId===previewTabId ? classes.tabPreview : classes.tabPermanent}\r\n                  key={tab.tabId}\r\n                  value={tab.tabId}\r\n                  label={(\r\n                    <Grid container\r\n                          // force dual items to edge\r\n                          justify=\"space-between\">\r\n                      <Grid item>\r\n                        <Typography variant=\"subtitle2\" color=\"inherit\">\r\n                          {tab.tabName}\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <CloseIcon onClick={(e) => handleCloseTab(e, tab.tabId)}/>\r\n                      </Grid>\r\n                    </Grid>\r\n                  )}\r\n             />)\r\n           )}\r\n        </Tabs>\r\n      </AppBar>\r\n      {tabs.map( tab => {\r\n         const TabCreator = getTabCreator(tab.tabId);\r\n         return (\r\n           <TabPanel key={tab.tabId}\r\n                     tabId={tab.tabId}\r\n                     activeTabId={activeTabId}>\r\n             {/* AI: this content will be dynamically rendered\r\n           \r\n                     NOTE: the following div/Box (if used) will show you the results of a big content and where the scroll bars appear\r\n                          <div style={{height: 2000, width: 1000, border: '1px solid orange'}}>\r\n           \r\n                          <Box border={1}\r\n                                borderColor=\"secondary.light\">\r\n           \r\n                          <Box border={1}\r\n                               borderColor=\"secondary.light\"\r\n                               width={1000}\r\n                               height={2000}>\r\n           \r\n                               primary.light: green diff shade\r\n                               primary.main:  green\r\n                               primary.dark:  green diff shade\r\n           \r\n                               secondary.light: grayish <<< like this one\r\n                               secondary.main:  purple\r\n                               secondary.dark:  almost black\r\n               */}\r\n             <TabCreator/>\r\n           </TabPanel>\r\n         );\r\n       } )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n  tabPreview: {\r\n    fontStyle: 'italic',\r\n  },\r\n  tabPermanent: {\r\n  },\r\n}) );\r\n\r\n\r\n// TODO: consider moving TabPanel out into it's own module (possibly NOT if we only use it here)\r\n// TODO: something above TabPanel is giving it the full width\r\n//       how to fill all vertical space?\r\n//        - a style height: '100%' kinda works, but it doesn't account for filler under AppBar\r\n//          ... style={{height: '100%'}}\r\n//        - can use css calc(): 97px = 48px AppBar + 49px TabBar <<< number calculation is a real hack\r\n//          ... style={{height: 'calc(100% - 97px)'}}\r\n// NOTE: the box (below) is giving us a bit of styling (currently padding so as to not place content right up to the edge)\r\nconst TabPanel = ({tabId, activeTabId, children}) => (\r\n  <Paper hidden={tabId !== activeTabId} style={{height: 'calc(100% - 97px)'}}>\r\n    <Box padding={1}>\r\n      {children}\r\n    </Box>\r\n  </Paper>\r\n);\r\n","import React from 'react';\r\nimport Grid  from '@material-ui/core/Grid';\r\n\r\n/**\r\n * A component that centers all contained children within a Grid (both horizontally and vertically).\r\n */\r\nexport default function CenterItems({children}) {\r\n  return (\r\n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n      {children}\r\n    </Grid>\r\n  );\r\n}\r\n\r\n/**\r\n * A component that horizontally centers all contained children within a Grid.\r\n * AI: Currently not used (added in an attempt to fix icon alignment with text, but found better solution)\r\n */\r\nexport function CenterItemsHorizontally({children}) {\r\n  return (\r\n    <Grid container direction=\"row\" justify=\"flex-start\" alignItems=\"center\">\r\n      {children}\r\n    </Grid>\r\n  );\r\n}\r\n","import React           from 'react';\r\n\r\nimport {makeStyles}    from '@material-ui/core/styles';\r\nimport Typography      from '@material-ui/core/Typography';\r\nimport Paper           from '@material-ui/core/Paper';\r\nimport CenterItems     from 'util/CenterItems';\r\n\r\n\r\n/**\r\n * StartUpPage: our initial display when NO tabs are active.\r\n */\r\nexport default function StartUpPage() {\r\n\r\n  const classes = useStyles();\r\n\r\n  // NOTE: relative path (in imgs below) support server deployment in sub-directory\r\n  // ?? HACK: how to fill all vertical space (using calc below) see TabManager.js note\r\n  return (\r\n    <Paper className={classes.root} style={{height: 'calc(100% - 48px)'}}>\r\n      <CenterItems>\r\n        <img src=\"visualize-it-logo.png\" width=\"300\" alt=\"Logo\" className={classes.entry} />\r\n      </CenterItems>\r\n      <CenterItems>\r\n        <Typography variant=\"h4\" color=\"inherit\" noWrap className={classes.entry} >\r\n          Your View into External Systems!\r\n        </Typography>\r\n      </CenterItems>\r\n      <CenterItems>\r\n        <img src=\"visualize-it-logo-eyes.jpg\" alt=\"Logo Eyes\" className={classes.entry}/>\r\n      </CenterItems>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles( theme => ({\r\n  root: {\r\n    padding: theme.spacing(3, 2, 15),\r\n  },\r\n\r\n  entry: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}) );\r\n","import React           from 'react';\r\nimport {featureRoute}  from 'feature-router';\r\nimport TabManager      from './comp/TabManager';\r\nimport StartUpPage     from './comp/StartUpPage';\r\nimport {getTotalTabs}  from './state';\r\n\r\n// ***\r\n// *** The routes for this feature.\r\n// ***\r\n\r\nexport default [\r\n\r\n  featureRoute({\r\n    content: ({fassets, appState}) => getTotalTabs(appState) === 0 ? <StartUpPage/> : <TabManager/>,\r\n  }),\r\n\r\n];\r\n","import {createFeature}    from 'feature-u';\r\nimport _tabManager        from './featureName';\r\nimport _tabManagerAct     from './actions';\r\nimport reducer            from './state';\r\nimport logic              from './logic';\r\nimport route              from './route';\r\n\r\n\r\n// feature: tabManager\r\n//          a manager of tabs\r\nexport default createFeature({\r\n  name: _tabManager,\r\n\r\n  fassets: {\r\n    define: {\r\n      'actions.activateTab': _tabManagerAct.activateTab, // activateTab(tabId, preview=true): Action\r\n      'actions.closeTab':    _tabManagerAct.closeTab,    // closeTab(tabId): Action\r\n    },\r\n  },\r\n\r\n  reducer,\r\n  logic,\r\n  route,\r\n});\r\n","import {createLogic}      from 'redux-logic';\r\nimport _logActions        from './featureName';\r\nimport featureFlags       from 'featureFlags';\r\n\r\nlet lastState = null;\r\n\r\n/**\r\n * Log all dispatched actions.\r\n *\r\n * TODO: retrofit to use real logger:\r\n *       using the following Log levels:\r\n *         - TRACE:   see dispatched actions\r\n *         - VERBOSE: see dispatched actions INCLUDING action content (CAUTION: action content can be BIG)\r\n */\r\nexport const actionLogger = createLogic({\r\n\r\n  name: `${_logActions}.actionLogger`,\r\n  type: '*', // monitor ALL action types\r\n\r\n  transform({getState, action}, next) {\r\n\r\n    if (featureFlags.log === 'verbose') { // group action/state together\r\n      console.group(`Action: ${action.type}`);\r\n    }\r\n\r\n    console.log('Dispatched Action: ', action);\r\n\r\n    // TODO: retrofit to use log-u:\r\n    // // log dispatched action\r\n    // if (log.isVerboseEnabled()) {\r\n    //   log.verbose(()=> `Dispatched Action: ${FMT(action.type)} with content:\\n${FMT(action)}`);\r\n    // }\r\n    // else {\r\n    //   log.trace(()=>   `Dispatched Action: ${FMT(action.type)}`);\r\n    // }\r\n\r\n    // continue processing\r\n    next(action);\r\n  },\r\n\r\n  process({getState, action, fassets}, dispatch, done) {\r\n\r\n    if (featureFlags.log === 'verbose') { // state can be big ... log conditionally\r\n\r\n      const curState = getState();\r\n      if (curState === lastState) {\r\n        console.log('Current State: UNCHANGED');\r\n      }\r\n      else {\r\n        console.log('Current State: ', curState);\r\n      }\r\n      lastState = curState;\r\n\r\n      console.groupEnd();\r\n    }\r\n\r\n    done();\r\n  },\r\n\r\n});\r\n\r\n\r\n// promote all logic modules for this feature\r\n// ... NOTE: individual logic modules are unit tested using the named exports.\r\nexport default [\r\n  actionLogger,\r\n];\r\n","/**\r\n * Expose our featureName through a mini-meta module that is\r\n * \"importable\" in all use-cases (a single-source-of-truth).\r\n */\r\nexport default 'logActions';\r\n","import {createFeature}  from 'feature-u';\r\nimport _logActions      from './featureName';\r\nimport logic            from './logic';\r\nimport featureFlags     from 'featureFlags';\r\n\r\n// feature: logActions\r\n//          log all dispatched actions and resulting state (full details in README)\r\nexport default createFeature({\r\n  name:    _logActions,\r\n  enabled: featureFlags.log ? true : false, // NOTE: feature-u requires boolean, but featureFlags.log can be a string (e.g. 'verbose')\r\n  logic,\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n           .register(swUrl)\n           .then(registration => {\n             registration.onupdatefound = () => {\n               const installingWorker = registration.installing;\n               if (installingWorker == null) {\n                 return;\n               }\n               installingWorker.onstatechange = () => {\n                 if (installingWorker.state === 'installed') {\n                   if (navigator.serviceWorker.controller) {\n                     // At this point, the updated precached content has been fetched,\n                     // but the previous service worker will still serve the older\n                     // content until all client tabs are closed.\n                     console.log(\n                       'New content is available and will be used when all ' +\n                       'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                     );\n\n                     // Execute callback\n                     if (config && config.onUpdate) {\n                       config.onUpdate(registration);\n                     }\n                   } else {\n                     // At this point, everything has been precached.\n                     // It's the perfect time to display a\n                     // \"Content is cached for offline use.\" message.\n                     console.log('Content is cached for offline use.');\n\n                     // Execute callback\n                     if (config && config.onSuccess) {\n                       config.onSuccess(registration);\n                     }\n                   }\n                 }\n               };\n             };\n           })\n           .catch(error => {\n             console.error('Error during service worker registration:', error);\n           });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createFeature}    from 'feature-u';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// feature: pwa\r\n//          orchestrates the Progressive Web App hooks (as defined by Create React App)\r\nexport default createFeature({\r\n  name:    'pwa',\r\n\r\n  appInit({showStatus, fassets, appState, dispatch}) {\r\n    // FROM: CRA (Create React App):\r\n    // If you want your app to work offline and load faster, you can change\r\n    // unregister() to register() below. Note this comes with some pitfalls.\r\n    // Learn more about service workers: http://bit.ly/CRA-PWA\r\n    serviceWorker.unregister();\r\n  }\r\n});\r\n","import sandbox                from './sandbox/feature';\r\n//import auth                   from './common/auth/feature';    // AI: DECIDE_AUTH_USER_NEEDED\r\n//import authService            from './common/auth/subFeatures/authService/feature';\r\n//import authServiceFirebase    from './common/auth/subFeatures/authServiceFirebase/feature';\r\n//import authServiceMock        from './common/auth/subFeatures/authServiceMock/feature';\r\nimport initFirebase           from './common/initFirebase/feature';\r\nimport baseUI                 from './common/baseUI/feature';\r\nimport tabManager             from './common/tabManager/feature';\r\nimport logActions             from './common/diagnostic/logActions/feature';\r\nimport pwa                    from './common/pwa/feature';\r\n\r\n// accumulate/promote ALL features that make up our app\r\nexport default [\r\n\r\n\r\n  //***\r\n  //*** app-specific features\r\n  //***\r\n\r\n  sandbox,\r\n\r\n  //***\r\n  //*** common app-neutral features\r\n  //***\r\n\r\n  baseUI,\r\n  tabManager,\r\n  \r\n//auth,\r\n//authService,\r\n//authServiceFirebase,\r\n//authServiceMock,\r\n  \r\n  initFirebase,\r\n  \r\n  pwa,\r\n\r\n  // diagnostic features ...\r\n  logActions,\r\n];\r\n","import React                  from 'react';\r\nimport {createReducerAspect}  from 'feature-redux';\r\nimport {createLogicAspect}    from 'feature-redux-logic';\r\nimport {createRouteAspect}    from 'feature-router';\r\nimport SplashScreen           from 'util/SplashScreen';\r\n\r\n\r\n//***\r\n//*** define/configure the aspects representing our app's run-time stack\r\n//***\r\n\r\n// redux - extending: Feature.reducer\r\nconst reducerAspect = createReducerAspect();\r\n\r\n// redux-logic - extending: Feature.logic\r\nconst logicAspect   = createLogicAspect();\r\n\r\n// Feature Routes - extending: Feature.route\r\nconst routeAspect   = createRouteAspect();\r\n// ... define fallback screen (used when no routes are in effect)\r\nrouteAspect.config.fallbackElm$ = <SplashScreen msg=\"I'm trying to think but it hurts!\"/>;\r\n\r\n\r\n//***\r\n//*** promote the aspects representing our app's run-time stack\r\n//***\r\n\r\nexport default [\r\n  reducerAspect,\r\n  logicAspect,\r\n  routeAspect,\r\n];\r\n","import ReactDOM     from 'react-dom';\r\nimport {launchApp}  from 'feature-u';\r\nimport features     from 'features';\r\nimport aspects      from 'aspects';\r\nimport {splash}     from 'util/SplashScreen';\r\n\r\n// launch our app, exposing the Fassets object (facilitating cross-feature-communication)\r\nexport default launchApp({\r\n\r\n  features,\r\n  aspects,\r\n\r\n  registerRootAppElm(rootAppElm) {\r\n    ReactDOM.render(rootAppElm,\r\n                    document.getElementById('root'));\r\n  },\r\n\r\n  showStatus(msg='', err=null) {\r\n    splash(msg, err);\r\n  },\r\n});\r\n","import 'util/ErrorExtensionPolyfill';\r\nexport {default} from 'app'; // redirect to app.js\r\n"],"sourceRoot":""}